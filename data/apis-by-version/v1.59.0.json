{
  "classes": {
    "AtomEnvironment": {
      "name": "AtomEnvironment",
      "superClass": null,
      "filename": "src/atom-environment.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L57",
      "sections": [
        {
          "name": "Properties",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Atom Details",
          "description": ""
        },
        {
          "name": "Managing The Atom Window",
          "description": ""
        },
        {
          "name": "Messaging the User",
          "description": ""
        },
        {
          "name": "Managing the Dev Tools",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidBeep",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L472",
          "visibility": "Extended",
          "summary": "Invoke the given callback whenever {::beep} is called.",
          "description": "Invoke the given callback whenever {::beep} is called.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called whenever {::beep} is called.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillThrowError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L489",
          "visibility": "Extended",
          "summary": "Invoke the given callback when there is an unhandled error, but\nbefore the devtools pop open",
          "description": "Invoke the given callback when there is an unhandled error, but\nbefore the devtools pop open",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "originalError",
                      "description": "{Object} the original error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "message",
                      "description": "{String} the original error object",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "url",
                      "description": "{String} Url to the file where the error originated.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "line",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "column",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "preventDefault",
                      "description": "{Function} call this to avoid popping up the dev tools.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called whenever there is an unhandled error",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidThrowError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L504",
          "visibility": "Extended",
          "summary": "Invoke the given callback whenever there is an unhandled error.",
          "description": "Invoke the given callback whenever there is an unhandled error.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "originalError",
                      "description": "{Object} the original error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "message",
                      "description": "{String} the original error object",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "url",
                      "description": "{String} Url to the file where the error originated.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "line",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "column",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called whenever there is an unhandled error",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "whenShellEnvironmentLoaded",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L519",
          "visibility": "Extended",
          "summary": "Invoke the given callback as soon as the shell environment is\nloaded (or immediately if it was already loaded).",
          "description": "Invoke the given callback as soon as the shell environment is\nloaded (or immediately if it was already loaded).",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called whenever there is an unhandled error",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "inDevMode",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L533",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if the current window is in development mode."
            }
          ]
        },
        {
          "name": "inSafeMode",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L539",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if the current window is in safe mode."
            }
          ]
        },
        {
          "name": "inSpecMode",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L545",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if the current window is running specs."
            }
          ]
        },
        {
          "name": "getAppName",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L561",
          "visibility": "Public",
          "summary": "Get the full name of this Atom release (e.g. \"Atom\", \"Atom Beta\")",
          "description": "Get the full name of this Atom release (e.g. \"Atom\", \"Atom Beta\")",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the app name {String}."
            }
          ]
        },
        {
          "name": "getVersion",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L569",
          "visibility": "Public",
          "summary": "Get the version of the Atom application.",
          "description": "Get the version of the Atom application.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the version text {String}."
            }
          ]
        },
        {
          "name": "getReleaseChannel",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L580",
          "visibility": "Public",
          "summary": "Gets the release channel of the Atom application.",
          "description": "Gets the release channel of the Atom application.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the release channel as a {String}. Will return a specific release channel\nname like 'beta' or 'nightly' if one is found in the Atom version or 'stable'\notherwise."
            }
          ]
        },
        {
          "name": "isReleasedVersion",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L585",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if the current version is an official release."
            }
          ]
        },
        {
          "name": "getWindowLoadTime",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L596",
          "visibility": "Public",
          "summary": "Get the time taken to completely load the current window.",
          "description": "Get the time taken to completely load the current window.\n\nThis time include things like loading and activating packages, creating\nDOM elements for the editor, and reading the config.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns the {Number} of milliseconds taken to load the window or null\nif the window hasn't finished loading yet."
            }
          ]
        },
        {
          "name": "getStartupMarkers",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L606",
          "visibility": "Public",
          "summary": "Get the all the markers with the information about startup time.",
          "description": "Get the all the markers with the information about startup time.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of timing markers.\nEach timing is an object with two keys:\n\n* `label`: string\n* `time`:  Time since the `startTime` (in milliseconds)."
            }
          ]
        },
        {
          "name": "getLoadSettings",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L615",
          "visibility": "Public",
          "summary": "Get the load settings for the current window.",
          "description": "Get the load settings for the current window.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} containing all the load setting key/value pairs."
            }
          ]
        },
        {
          "name": "open",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L637",
          "visibility": "Essential",
          "summary": "Open a new Atom window using the given options.",
          "description": "Open a new Atom window using the given options.\n\nCalling this method without an options parameter will open a prompt to pick\na file/folder to open in the new window.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pathsToOpen",
                  "description": "An {Array} of {String} paths to open.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "newWindow",
                  "description": "A {Boolean}, true to always open a new window instead of reusing existing windows depending on the paths to open.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "devMode",
                  "description": "A {Boolean}, true to open the window in development mode. Development mode loads the Atom source from the locally cloned repository and also loads all the packages in ~/.atom/dev/packages",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "safeMode",
                  "description": "A {Boolean}, true to open the window in safe mode. Safe mode prevents all packages installed to ~/.atom/packages from loading.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "pickFolder",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L646",
          "visibility": "Extended",
          "summary": "Prompt the user to select one or more folders.",
          "description": "Prompt the user to select one or more folders.",
          "arguments": [
            {
              "children": [
                {
                  "name": "paths",
                  "description": "An {Array} of {String} paths that the user selected, or `null` if the user dismissed the dialog.",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to call once the user has confirmed the selection.",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "close",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L651",
          "visibility": "Essential",
          "summary": "Close the current window.",
          "description": "Close the current window."
        },
        {
          "name": "getSize",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L658",
          "visibility": "Essential",
          "summary": "Get the size of current window.",
          "description": "Get the size of current window.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} in the format `{width: 1000, height: 700}`"
            }
          ]
        },
        {
          "name": "setSize",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L666",
          "visibility": "Essential",
          "summary": "Set the size of current window.",
          "description": "Set the size of current window.",
          "arguments": [
            {
              "name": "width",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "height",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getPosition",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L673",
          "visibility": "Essential",
          "summary": "Get the position of current window.",
          "description": "Get the position of current window.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} in the format `{x: 10, y: 20}`"
            }
          ]
        },
        {
          "name": "setPosition",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L681",
          "visibility": "Essential",
          "summary": "Set the position of current window.",
          "description": "Set the position of current window.",
          "arguments": [
            {
              "name": "x",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "y",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getCurrentWindow",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L686",
          "visibility": "Extended",
          "summary": "Get the current window",
          "description": "Get the current window"
        },
        {
          "name": "center",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L691",
          "visibility": "Extended",
          "summary": "Move current window to the center of the screen.",
          "description": "Move current window to the center of the screen."
        },
        {
          "name": "focus",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L696",
          "visibility": "Extended",
          "summary": "Focus the current window.",
          "description": "Focus the current window."
        },
        {
          "name": "show",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L702",
          "visibility": "Extended",
          "summary": "Show the current window.",
          "description": "Show the current window."
        },
        {
          "name": "hide",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L707",
          "visibility": "Extended",
          "summary": "Hide the current window.",
          "description": "Hide the current window."
        },
        {
          "name": "reload",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L712",
          "visibility": "Extended",
          "summary": "Reload the current window.",
          "description": "Reload the current window."
        },
        {
          "name": "restartApplication",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L717",
          "visibility": "Extended",
          "summary": "Relaunch the entire application.",
          "description": "Relaunch the entire application."
        },
        {
          "name": "isMaximized",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L722",
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if the current window is maximized."
            }
          ]
        },
        {
          "name": "isFullScreen",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L731",
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if the current window is in full screen mode."
            }
          ]
        },
        {
          "name": "setFullScreen",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L736",
          "visibility": "Extended",
          "summary": "Set the full screen state of the current window.",
          "description": "Set the full screen state of the current window."
        },
        {
          "name": "toggleFullScreen",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L741",
          "visibility": "Extended",
          "summary": "Toggle the full screen state of the current window.",
          "description": "Toggle the full screen state of the current window."
        },
        {
          "name": "beep",
          "sectionName": "Messaging the User",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L1185",
          "visibility": "Essential",
          "summary": "Visually and audibly trigger a beep.",
          "description": "Visually and audibly trigger a beep."
        },
        {
          "name": "confirm",
          "sectionName": "Messaging the User",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L1244",
          "visibility": "Essential",
          "summary": "A flexible way to open a dialog akin to an alert dialog.",
          "description": "A flexible way to open a dialog akin to an alert dialog.\n\nWhile both async and sync versions are provided, it is recommended to use the async version\nsuch that the renderer process is not blocked while the dialog box is open.\n\nThe async version accepts the same options as Electron's `dialog.showMessageBox`.\nFor convenience, it sets `type` to `'info'` and `normalizeAccessKeys` to `true` by default.\n\nIf the dialog is closed (via `Esc` key or `X` in the top corner) without selecting a button\nthe first button will be clicked unless a \"Cancel\" or \"No\" button is provided.",
          "arguments": [
            {
              "children": [
                {
                  "name": "message",
                  "description": "The {String} message to display.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "detailedMessage",
                  "description": "The {String} detailed message to display.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "buttons",
                  "description": "Either an {Array} of {String}s or an {Object} where keys are button names and the values are callback {Function}s to invoke when clicked.",
                  "type": "Array",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An options {Object}. If the callback argument is also supplied, see the documentation at https://electronjs.org/docs/api/dialog#dialogshowmessageboxbrowserwindow-options-callback for the list of available options. Otherwise, only the following keys are accepted:",
              "type": "Object",
              "isOptional": false
            },
            {
              "name": "callback",
              "description": "A {Function} that will be called with the index of the chosen option. If a callback is supplied, the dialog will be non-blocking. This argument is recommended.",
              "type": "Function",
              "isOptional": true
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "js",
              "code": "// Async version (recommended)\natom.confirm({\n  message: 'How you feeling?',\n  detail: 'Be honest.',\n  buttons: ['Good', 'Bad']\n}, response => {\n  if (response === 0) {\n    window.alert('good to hear')\n  } else {\n    window.alert('bummer')\n  }\n})",
              "raw": "```js\n// Async version (recommended)\natom.confirm({\n  message: 'How you feeling?',\n  detail: 'Be honest.',\n  buttons: ['Good', 'Bad']\n}, response => {\n  if (response === 0) {\n    window.alert('good to hear')\n  } else {\n    window.alert('bummer')\n  }\n})\n```"
            },
            {
              "description": "",
              "lang": "js",
              "code": "// Legacy sync version\nconst chosen = atom.confirm({\n  message: 'How you feeling?',\n  detailedMessage: 'Be honest.',\n  buttons: {\n    Good: () => window.alert('good to hear'),\n    Bad: () => window.alert('bummer')\n  }\n})",
              "raw": "```js\n// Legacy sync version\nconst chosen = atom.confirm({\n  message: 'How you feeling?',\n  detailedMessage: 'Be honest.',\n  buttons: {\n    Good: () => window.alert('good to hear'),\n    Bad: () => window.alert('bummer')\n  }\n})\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns the chosen button index {Number} if the buttons option is an array\nor the return value of the callback if the buttons option is an object.\nIf a callback function is supplied, returns `undefined`."
            }
          ]
        },
        {
          "name": "openDevTools",
          "sectionName": "Managing the Dev Tools",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L1260",
          "visibility": "Extended",
          "summary": "Open the dev tools for the current window.",
          "description": "Open the dev tools for the current window.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the DevTools have been opened."
            }
          ]
        },
        {
          "name": "toggleDevTools",
          "sectionName": "Managing the Dev Tools",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L1268",
          "visibility": "Extended",
          "summary": "Toggle the visibility of the dev tools for the current window.",
          "description": "Toggle the visibility of the dev tools for the current window.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the DevTools have been opened or\nclosed."
            }
          ]
        },
        {
          "name": "executeJavaScriptInDevTools",
          "sectionName": "Managing the Dev Tools",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L1273",
          "visibility": "Extended",
          "summary": "Execute code in dev tools.",
          "description": "Execute code in dev tools."
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "clipboard",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L66",
          "visibility": "Public",
          "summary": "A {Clipboard} instance",
          "description": "A {Clipboard} instance"
        },
        {
          "name": "deserializers",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L79",
          "visibility": "Public",
          "summary": "A {DeserializerManager} instance",
          "description": "A {DeserializerManager} instance"
        },
        {
          "name": "views",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L83",
          "visibility": "Public",
          "summary": "A {ViewRegistry} instance",
          "description": "A {ViewRegistry} instance"
        },
        {
          "name": "notifications",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L86",
          "visibility": "Public",
          "summary": "A {NotificationManager} instance",
          "description": "A {NotificationManager} instance"
        },
        {
          "name": "config",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L91",
          "visibility": "Public",
          "summary": "A {Config} instance",
          "description": "A {Config} instance"
        },
        {
          "name": "keymaps",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L107",
          "visibility": "Public",
          "summary": "A {KeymapManager} instance",
          "description": "A {KeymapManager} instance"
        },
        {
          "name": "tooltips",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L112",
          "visibility": "Public",
          "summary": "A {TooltipManager} instance",
          "description": "A {TooltipManager} instance"
        },
        {
          "name": "commands",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L118",
          "visibility": "Public",
          "summary": "A {CommandRegistry} instance",
          "description": "A {CommandRegistry} instance"
        },
        {
          "name": "grammars",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L122",
          "visibility": "Public",
          "summary": "A {GrammarRegistry} instance",
          "description": "A {GrammarRegistry} instance"
        },
        {
          "name": "styles",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L125",
          "visibility": "Public",
          "summary": "A {StyleManager} instance",
          "description": "A {StyleManager} instance"
        },
        {
          "name": "packages",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L128",
          "visibility": "Public",
          "summary": "A {PackageManager} instance",
          "description": "A {PackageManager} instance"
        },
        {
          "name": "themes",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L141",
          "visibility": "Public",
          "summary": "A {ThemeManager} instance",
          "description": "A {ThemeManager} instance"
        },
        {
          "name": "menu",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L150",
          "visibility": "Public",
          "summary": "A {MenuManager} instance",
          "description": "A {MenuManager} instance"
        },
        {
          "name": "contextMenu",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L156",
          "visibility": "Public",
          "summary": "A {ContextMenuManager} instance",
          "description": "A {ContextMenuManager} instance"
        },
        {
          "name": "project",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L163",
          "visibility": "Public",
          "summary": "A {Project} instance",
          "description": "A {Project} instance"
        },
        {
          "name": "textEditors",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L174",
          "visibility": "Public",
          "summary": "A {TextEditorRegistry} instance",
          "description": "A {TextEditorRegistry} instance"
        },
        {
          "name": "workspace",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L182",
          "visibility": "Public",
          "summary": "A {Workspace} instance",
          "description": "A {Workspace} instance"
        },
        {
          "name": "history",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/atom-environment.js#L217",
          "visibility": "Public",
          "summary": "A {HistoryManager} instance",
          "description": "A {HistoryManager} instance"
        }
      ],
      "visibility": "Essential",
      "summary": "Atom global for dealing with packages, themes, menus, and the window.",
      "description": "Atom global for dealing with packages, themes, menus, and the window.\n\nAn instance of this class is always available as the `atom` global."
    },
    "BufferedNodeProcess": {
      "name": "BufferedNodeProcess",
      "superClass": "BufferedProcess",
      "filename": "src/buffered-node-process.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/buffered-node-process.js#L13",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/buffered-node-process.js#L35",
          "visibility": "Public",
          "summary": "Runs the given Node script by spawning a new child process.",
          "description": "Runs the given Node script by spawning a new child process.",
          "arguments": [
            {
              "children": [
                {
                  "name": "command",
                  "description": "The {String} path to the JavaScript script to execute.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "args",
                  "description": "The {Array} of arguments to pass to the script (optional).",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "options",
                  "description": "The options {Object} to pass to Node's `ChildProcess.spawn`\n```\n      method (optional).\n```",
                  "type": "Object",
                  "isOptional": false
                },
                {
                  "name": "stdout",
                  "description": "The callback {Function} that receives a single argument which\n```\n     contains the standard output from the command. The callback is\n     called as data is received but it's buffered to ensure only\n     complete lines are passed until the source stream closes. After\n     the source stream has closed all remaining data is sent in a\n     final call (optional).\n```",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "stderr",
                  "description": "The callback {Function} that receives a single argument which\n```\n     contains the standard error output from the command. The\n     callback is called as data is received but it's buffered to\n     ensure only complete lines are passed until the source stream\n     closes. After the source stream has closed all remaining data\n     is sent in a final call (optional).\n```",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "exit",
                  "description": "The callback {Function} which receives a single argument\n```\n   containing the exit status (optional).\n```",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Like {BufferedProcess}, but accepts a Node script as the command\nto run.",
      "description": "Like {BufferedProcess}, but accepts a Node script as the command\nto run.\n\nThis is necessary on Windows since it doesn't support shebang `#!` lines.",
      "examples": [
        {
          "description": "",
          "lang": "js",
          "code": "  const {BufferedNodeProcess} = require('atom')",
          "raw": "```js\n  const {BufferedNodeProcess} = require('atom')\n```"
        }
      ]
    },
    "BufferedProcess": {
      "name": "BufferedProcess",
      "superClass": null,
      "filename": "src/buffered-process.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/buffered-process.js#L20",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Helper Methods",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/buffered-process.js#L50",
          "visibility": "Public",
          "summary": "Runs the given command by spawning a new child process.",
          "description": "Runs the given command by spawning a new child process.",
          "arguments": [
            {
              "children": [
                {
                  "name": "command",
                  "description": "The {String} command to execute.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "args",
                  "description": "The {Array} of arguments to pass to the command (optional).",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "options",
                  "description": "{Object} (optional) The options {Object} to pass to Node's `ChildProcess.spawn` method.",
                  "type": "Object",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "data",
                      "description": "{String}",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "stdout",
                  "description": "{Function} (optional) The callback that receives a single argument which contains the standard output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "data",
                      "description": "{String}",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "stderr",
                  "description": "{Function} (optional) The callback that receives a single argument which contains the standard error output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "code",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "exit",
                  "description": "{Function} (optional) The callback which receives a single argument containing the exit status.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "autoStart",
                  "description": "{Boolean} (optional) Whether the command will automatically start when this BufferedProcess is created. Defaults to true.  When set to false you must call the `start` method to start the process.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onWillThrowError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/buffered-process.js#L135",
          "visibility": "Public",
          "summary": "Will call your callback when an error will be raised by the process.\nUsually this is due to the command not being available or not on the PATH.\nYou can call `handle()` on the object passed to your callback to indicate\nthat you have handled this error.",
          "description": "Will call your callback when an error will be raised by the process.\nUsually this is due to the command not being available or not on the PATH.\nYou can call `handle()` on the object passed to your callback to indicate\nthat you have handled this error.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "error",
                      "description": "{Object} the error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "handle",
                      "description": "{Function} call this to indicate you have handled the error. The error will not be thrown if this function is called.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "errorObject",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} callback",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}"
            }
          ]
        },
        {
          "name": "kill",
          "sectionName": "Helper Methods",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/buffered-process.js#L250",
          "visibility": "Public",
          "summary": "Terminate the process.",
          "description": "Terminate the process."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A wrapper which provides standard error/output line buffering for\nNode's ChildProcess.",
      "description": "A wrapper which provides standard error/output line buffering for\nNode's ChildProcess.",
      "examples": [
        {
          "description": "",
          "lang": "js",
          "code": "{BufferedProcess} = require('atom')\n\nconst command = 'ps'\nconst args = ['-ef']\nconst stdout = (output) => console.log(output)\nconst exit = (code) => console.log(\"ps -ef exited with #{code}\")\nconst process = new BufferedProcess({command, args, stdout, exit})",
          "raw": "```js\n{BufferedProcess} = require('atom')\n\nconst command = 'ps'\nconst args = ['-ef']\nconst stdout = (output) => console.log(output)\nconst exit = (code) => console.log(\"ps -ef exited with #{code}\")\nconst process = new BufferedProcess({command, args, stdout, exit})\n```"
        }
      ]
    },
    "Clipboard": {
      "name": "Clipboard",
      "superClass": null,
      "filename": "src/clipboard.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/clipboard.js#L15",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "write",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/clipboard.js#L44",
          "visibility": "Public",
          "summary": "Write the given text to the clipboard.",
          "description": "Write the given text to the clipboard.\n\nThe metadata associated with the text is available by calling\n{::readWithMetadata}.",
          "arguments": [
            {
              "name": "text",
              "description": "The {String} to store.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "metadata",
              "description": "The additional info to associate with the text.",
              "type": null,
              "isOptional": true
            }
          ]
        },
        {
          "name": "read",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/clipboard.js#L53",
          "visibility": "Public",
          "summary": "Read the text from the clipboard.",
          "description": "Read the text from the clipboard.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "writeFindText",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/clipboard.js#L58",
          "visibility": "Public",
          "summary": "Write the given text to the macOS find pasteboard",
          "description": "Write the given text to the macOS find pasteboard"
        },
        {
          "name": "readFindText",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/clipboard.js#L65",
          "visibility": "Public",
          "summary": "Read the text from the macOS find pasteboard.",
          "description": "Read the text from the macOS find pasteboard.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "readWithMetadata",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/clipboard.js#L75",
          "visibility": "Public",
          "summary": "Read the text from the clipboard and return both the text and the\nassociated metadata.",
          "description": "Read the text from the clipboard and return both the text and the\nassociated metadata.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with the following keys:\n\n* `text` The {String} clipboard text.\n* `metadata` The metadata stored by an earlier call to {::write}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents the clipboard used for copying and pasting in Atom.",
      "description": "Represents the clipboard used for copying and pasting in Atom.\n\nAn instance of this class is always available as the `atom.clipboard` global.",
      "examples": [
        {
          "description": "",
          "lang": "js",
          "code": "atom.clipboard.write('hello')\n\nconsole.log(atom.clipboard.read()) // 'hello'",
          "raw": "```js\natom.clipboard.write('hello')\n\nconsole.log(atom.clipboard.read()) // 'hello'\n```"
        }
      ]
    },
    "Color": {
      "name": "Color",
      "superClass": null,
      "filename": "src/color.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/color.js#L5",
      "sections": [],
      "classMethods": [
        {
          "name": "parse",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/color.js#L13",
          "visibility": "Essential",
          "summary": "Parse a {String} or {Object} into a {Color}.",
          "description": "Parse a {String} or {Object} into a {Color}.",
          "arguments": [
            {
              "name": "value",
              "description": "A {String} such as `'white'`, `#ff00ff`, or `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`, and `alpha` properties.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Color",
              "description": "Returns a {Color} or `null` if it cannot be parsed."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "toHexString",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/color.js#L85",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} in the form `'#abcdef'`."
            }
          ]
        },
        {
          "name": "toRGBAString",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/color.js#L92",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} in the form `'rgba(25, 50, 75, .9)'`."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "A simple color class returned from {Config::get} when the value\nat the key path is of type 'color'.",
      "description": "A simple color class returned from {Config::get} when the value\nat the key path is of type 'color'."
    },
    "CommandRegistry": {
      "name": "CommandRegistry",
      "superClass": null,
      "filename": "src/command-registry.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/command-registry.js#L47",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/command-registry.js#L130",
          "visibility": "Public",
          "summary": "Add one or more command listeners associated with a selector.",
          "description": "Add one or more command listeners associated with a selector.",
          "titledArguments": [
            {
              "title": "Registering One Command",
              "description": "",
              "arguments": [
                {
                  "name": "target",
                  "description": "A {String} containing a CSS selector or a DOM element. If you pass a selector, the command will be globally associated with all matching elements. The `,` combinator is not currently supported. If you pass a DOM element, the command will be associated with just that element.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "commandName",
                  "description": "A {String} containing the name of a command you want to handle such as `user:insert-date`.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "displayName",
                      "description": "Overrides any generated `displayName` that would otherwise be generated from the event name.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "description",
                      "description": "Used by consumers to display detailed information about the command.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "hiddenInCommandPalette",
                      "description": "If `true`, this command will not appear in the bundled command palette by default, but can still be shown with. the `Command Palette: Show Hidden Commands` command. This is a good option when you need to register large numbers of commands that don't make sense to be executed from the command palette. Please use this option conservatively, as it could reduce the discoverability of your package's commands.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "listener",
                  "description": "A listener which handles the event.  Either a {Function} to call when the given command is invoked on an element matching the selector, or an {Object} with a `didDispatch` property which is such a function. The function (`listener` itself if it is a function, or the `didDispatch` method if `listener` is an object) will be called with `this` referencing the matching DOM node and the following argument: Additionally, `listener` may have additional properties which are returned to those who query using `atom.commands.findCommands`, as well as several meaningful metadata properties:",
                  "type": "Function",
                  "isOptional": false
                }
              ]
            },
            {
              "title": "Registering Multiple Commands",
              "description": "",
              "arguments": [
                {
                  "name": "target",
                  "description": "A {String} containing a CSS selector or a DOM element. If you pass a selector, the commands will be globally associated with all matching elements. The `,` combinator is not currently supported. If you pass a DOM element, the command will be associated with just that element.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "commands",
                  "description": "An {Object} mapping command names like `user:insert-date` to listener {Function}s.",
                  "type": "Object",
                  "isOptional": false
                }
              ]
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\nadded command handler(s)."
            }
          ]
        },
        {
          "name": "findCommands",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/command-registry.js#L242",
          "visibility": "Public",
          "summary": "Find all registered commands matching a query.",
          "description": "Find all registered commands matching a query.",
          "arguments": [
            {
              "children": [
                {
                  "name": "target",
                  "description": "A DOM node that is the hypothetical target of a given command.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "An {Object} containing one or more of the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of `CommandDescriptor` {Object}s containing the following keys:\n\n* `name` The name of the command. For example, `user:insert-date`.\n* `displayName` The display name of the command. For example,\n  `User: Insert Date`.\n  Additional metadata may also be present in the returned descriptor:\n* `description` a {String} describing the function of the command in more\n  detail than the title\n* `tags` an {Array} of {String}s that describe keywords related to the\n  command\n  Any additional nonstandard metadata provided when the command was `add`ed\n  may also be present in the returned descriptor."
            }
          ]
        },
        {
          "name": "dispatch",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/command-registry.js#L289",
          "visibility": "Public",
          "summary": "Simulate the dispatch of a command on a DOM node.",
          "description": "Simulate the dispatch of a command on a DOM node.\n\nThis can be useful for testing when you want to simulate the invocation of a\ncommand on a detached DOM node. Otherwise, the DOM node in question needs to\nbe attached to the document so the event bubbles up to the root node to be\nprocessed.",
          "arguments": [
            {
              "name": "target",
              "description": "The DOM node at which to start bubbling the command event.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "commandName",
              "description": "{String} indicating the name of the command to dispatch.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onWillDispatch",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/command-registry.js#L299",
          "visibility": "Public",
          "summary": "Invoke the given callback before dispatching a command event.",
          "description": "Invoke the given callback before dispatching a command event.",
          "arguments": [
            {
              "children": [
                {
                  "name": "event",
                  "description": "The Event that will be dispatched",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before dispatching each command",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onDidDispatch",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/command-registry.js#L307",
          "visibility": "Public",
          "summary": "Invoke the given callback after dispatching a command event.",
          "description": "Invoke the given callback after dispatching a command event.",
          "arguments": [
            {
              "children": [
                {
                  "name": "event",
                  "description": "The Event that was dispatched",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after dispatching each command",
              "type": "Function",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Associates listener functions with commands in a\ncontext-sensitive way using CSS selectors. You can access a global instance of\nthis class via `atom.commands`, and commands registered there will be\npresented in the command palette.",
      "description": "Associates listener functions with commands in a\ncontext-sensitive way using CSS selectors. You can access a global instance of\nthis class via `atom.commands`, and commands registered there will be\npresented in the command palette.\n\nThe global command registry facilitates a style of event handling known as\n*event delegation* that was popularized by jQuery. Atom commands are expressed\nas custom DOM events that can be invoked on the currently focused element via\na key binding or manually via the command palette. Rather than binding\nlisteners for command events directly to DOM nodes, you instead register\ncommand event listeners globally on `atom.commands` and constrain them to\nspecific kinds of elements with CSS selectors.\n\nCommand names must follow the `namespace:action` pattern, where `namespace`\nwill typically be the name of your package, and `action` describes the\nbehavior of your command. If either part consists of multiple words, these\nmust be separated by hyphens. E.g. `awesome-package:turn-it-up-to-eleven`.\nAll words should be lowercased.\n\nAs the event bubbles upward through the DOM, all registered event listeners\nwith matching selectors are invoked in order of specificity. In the event of a\nspecificity tie, the most recently registered listener is invoked first. This\nmirrors the \"cascade\" semantics of CSS. Event listeners are invoked in the\ncontext of the current DOM node, meaning `this` always points at\n`event.currentTarget`. As is normally the case with DOM events,\n`stopPropagation` and `stopImmediatePropagation` can be used to terminate the\nbubbling process and prevent invocation of additional listeners.\n\n## Example\n\nHere is a command that inserts the current date in an editor:\n\n```coffee\natom.commands.add 'atom-text-editor',\n  'user:insert-date': (event) ->\n    editor = @getModel()\n    editor.insertText(new Date().toLocaleString())\n```"
    },
    "CompositeDisposable": {
      "name": "CompositeDisposable",
      "superClass": null,
      "filename": "lib/composite-disposable.js",
      "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L27",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Managing Disposables",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L33",
          "visibility": "Public",
          "summary": "Construct an instance, optionally with one or more disposables",
          "description": "Construct an instance, optionally with one or more disposables"
        },
        {
          "name": "dispose",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L44",
          "visibility": "Public",
          "summary": "Dispose all disposables added to this composite disposable.",
          "description": "Dispose all disposables added to this composite disposable.\n\nIf this object has already been disposed, this method has no effect."
        },
        {
          "name": "add",
          "sectionName": "Managing Disposables",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L62",
          "visibility": "Public",
          "summary": "Add disposables to be disposed when the composite is disposed.",
          "description": "Add disposables to be disposed when the composite is disposed.\n\nIf this object has already been disposed, this method has no effect.",
          "arguments": [
            {
              "name": "...disposables",
              "description": "{Disposable} instances or any objects with `.dispose()` methods.",
              "type": "Disposable",
              "isOptional": false
            }
          ]
        },
        {
          "name": "remove",
          "sectionName": "Managing Disposables",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L75",
          "visibility": "Public",
          "summary": "Remove a previously added disposable.",
          "description": "Remove a previously added disposable.",
          "arguments": [
            {
              "name": "disposable",
              "description": "{Disposable} instance or any object with a `.dispose()` method.",
              "type": "Disposable",
              "isOptional": false
            }
          ]
        },
        {
          "name": "delete",
          "sectionName": "Managing Disposables",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L82",
          "visibility": "Public",
          "summary": "Alias to {CompositeDisposable::remove}",
          "description": "Alias to {CompositeDisposable::remove}"
        },
        {
          "name": "clear",
          "sectionName": "Managing Disposables",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/composite-disposable.js#L88",
          "visibility": "Public",
          "summary": "Clear all disposables. They will not be disposed by the next call\nto dispose.",
          "description": "Clear all disposables. They will not be disposed by the next call\nto dispose."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "An object that aggregates multiple {Disposable} instances together\ninto a single disposable, so they can all be disposed as a group.",
      "description": "An object that aggregates multiple {Disposable} instances together\ninto a single disposable, so they can all be disposed as a group.\n\nThese are very useful when subscribing to multiple events.",
      "examples": [
        {
          "description": "",
          "lang": "js",
          "code": "const {CompositeDisposable} = require('atom')\n\nclass Something {\n  constructor() {\n    this.disposables = new CompositeDisposable()\n    const editor = atom.workspace.getActiveTextEditor()\n    this.disposables.add(editor.onDidChange(() => {})\n    this.disposables.add(editor.onDidChangePath(() => {})\n  }\n\n  destroy() {\n    this.disposables.dispose();\n  }\n}",
          "raw": "```js\nconst {CompositeDisposable} = require('atom')\n\nclass Something {\n  constructor() {\n    this.disposables = new CompositeDisposable()\n    const editor = atom.workspace.getActiveTextEditor()\n    this.disposables.add(editor.onDidChange(() => {})\n    this.disposables.add(editor.onDidChangePath(() => {})\n  }\n\n  destroy() {\n    this.disposables.dispose();\n  }\n}\n```"
        }
      ]
    },
    "Config": {
      "name": "Config",
      "superClass": null,
      "filename": "src/config.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L383",
      "sections": [
        {
          "name": "Config Subscription",
          "description": ""
        },
        {
          "name": "Managing Settings",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "observe",
          "sectionName": "Config Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L497",
          "visibility": "Essential",
          "summary": "Add a listener for changes to a given key path. This is different\nthan {::onDidChange} in that it will immediately call your callback with the\ncurrent value of the config entry.",
          "description": "Add a listener for changes to a given key path. This is different\nthan {::onDidChange} in that it will immediately call your callback with the\ncurrent value of the config entry.\n\n### Examples\n\nYou might want to be notified when the themes change. We'll watch\n`core.themes` for changes\n\n```coffee\natom.config.observe 'core.themes', (value) ->\n  # do stuff with value\n```",
          "arguments": [
            {
              "name": "keyPath",
              "description": "{String} name of the key to observe",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "scope",
                  "description": "{ScopeDescriptor} describing a path from the root of the syntax tree to a token. Get one by calling {editor.getLastCursor().getScopeDescriptor()}. See {::get} for examples. See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/) for more information.",
                  "type": "ScopeDescriptor",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "value",
                  "description": "the new value of the key",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when the value of the key changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} with the following keys on which you can call\n`.dispose()` to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Config Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L543",
          "visibility": "Essential",
          "summary": "Add a listener for changes to a given key path. If `keyPath` is\nnot specified, your callback will be called on changes to any key.",
          "description": "Add a listener for changes to a given key path. If `keyPath` is\nnot specified, your callback will be called on changes to any key.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "{String} name of the key to observe. Must be specified if `scopeDescriptor` is specified.",
              "type": "String",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "scope",
                  "description": "{ScopeDescriptor} describing a path from the root of the syntax tree to a token. Get one by calling {editor.getLastCursor().getScopeDescriptor()}. See {::get} for examples. See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/) for more information.",
                  "type": "ScopeDescriptor",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "newValue",
                      "description": "the new value of the key",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "oldValue",
                      "description": "the prior value of the key.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when the value of the key changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} with the following keys on which you can call\n`.dispose()` to unsubscribe."
            }
          ]
        },
        {
          "name": "get",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L621",
          "visibility": "Essential",
          "summary": "Retrieves the setting for the given key.",
          "description": "Retrieves the setting for the given key.\n\n### Examples\n\nYou might want to know what themes are enabled, so check `core.themes`\n\n```coffee\natom.config.get('core.themes')\n```\n\nWith scope descriptors you can get settings within a specific editor\nscope. For example, you might want to know `editor.tabLength` for ruby\nfiles.\n\n```coffee\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n```\n\nThis setting in ruby files might be different than the global tabLength setting\n\n```coffee\natom.config.get('editor.tabLength') # => 4\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n```\n\nYou can get the language scope descriptor via\n{TextEditor::getRootScopeDescriptor}. This will get the setting specifically\nfor the editor's language.\n\n```coffee\natom.config.get('editor.tabLength', scope: @editor.getRootScopeDescriptor()) # => 2\n```\n\nAdditionally, you can get the setting at the specific cursor position.\n\n```coffee\nscopeDescriptor = @editor.getLastCursor().getScopeDescriptor()\natom.config.get('editor.tabLength', scope: scopeDescriptor) # => 2\n```",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key to retrieve.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "sources",
                  "description": "{Array} of {String} source names. If provided, only values that were associated with these sources during {::set} will be used.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "excludeSources",
                  "description": "{Array} of {String} source names. If provided, values that  were associated with these sources during {::set} will not be used.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "scope",
                  "description": "{ScopeDescriptor} describing a path from the root of the syntax tree to a token. Get one by calling {editor.getLastCursor().getScopeDescriptor()} See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/) for more information.",
                  "type": "ScopeDescriptor",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the value from Atom's default settings, the user's configuration\nfile in the type specified by the configuration schema."
            }
          ]
        },
        {
          "name": "getAll",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L649",
          "visibility": "Extended",
          "summary": "Get all of the values for the given key-path, along with their\nassociated scope selector.",
          "description": "Get all of the values for the given key-path, along with their\nassociated scope selector.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key to retrieve",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "{Object} see the `options` argument to {::get}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Object}s with the following keys:\n\n* `scopeDescriptor` The {ScopeDescriptor} with which the value is associated\n* `value` The value for the key-path"
            }
          ]
        },
        {
          "name": "set",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L731",
          "visibility": "Essential",
          "summary": "Sets the value for a configuration setting.",
          "description": "Sets the value for a configuration setting.\n\nThis value is stored in Atom's internal configuration file.\n\n### Examples\n\nYou might want to change the themes programmatically:\n\n```coffee\natom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])\n```\n\nYou can also set scoped settings. For example, you might want change the\n`editor.tabLength` only for ruby files.\n\n```coffee\natom.config.get('editor.tabLength') # => 4\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4\natom.config.get('editor.tabLength', scope: ['source.js']) # => 4\n\n# Set ruby to 2\natom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true\n\n# Notice it's only set to 2 in the case of ruby\natom.config.get('editor.tabLength') # => 4\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\natom.config.get('editor.tabLength', scope: ['source.js']) # => 4\n```",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "value",
              "description": "The value of the setting. Passing `undefined` will revert the setting to the default value.",
              "type": null,
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "scopeSelector",
                  "description": "{String}. eg. '.source.ruby' See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/) for more information.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "source",
                  "description": "{String} The name of a file with which the setting is associated. Defaults to the user's config file.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}\n\n* `true` if the value was set.\n* `false` if the value was not able to be coerced to the type specified in the setting's schema."
            }
          ]
        },
        {
          "name": "unset",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L779",
          "visibility": "Essential",
          "summary": "Restore the setting at `keyPath` to its default value.",
          "description": "Restore the setting at `keyPath` to its default value.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "scopeSelector",
                  "description": "{String}. See {::set}",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "source",
                  "description": "{String}. See {::set}",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getSources",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L840",
          "visibility": "Extended",
          "summary": "Get an {Array} of all of the `source` {String}s with which\nsettings have been added via {::set}.",
          "description": "Get an {Array} of all of the `source` {String}s with which\nsettings have been added via {::set}."
        },
        {
          "name": "getSchema",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L855",
          "visibility": "Extended",
          "summary": "Retrieve the schema for a specific key path. The schema will tell\nyou what type the keyPath expects, and other metadata about the config\noption.",
          "description": "Retrieve the schema for a specific key path. The schema will tell\nyou what type the keyPath expects, and other metadata about the config\noption.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} eg. `{type: 'integer', default: 23, minimum: 1}`."
            },
            {
              "type": null,
              "description": "Returns `null` when the keyPath has no schema specified, but is accessible\nfrom the root schema."
            }
          ]
        },
        {
          "name": "transact",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/config.js#L889",
          "visibility": "Extended",
          "summary": "Suppress calls to handler functions registered with {::onDidChange}\nand {::observe} for the duration of `callback`. After `callback` executes,\nhandlers will be called once if the value for their key-path has changed.",
          "description": "Suppress calls to handler functions registered with {::onDidChange}\nand {::observe} for the duration of `callback`. After `callback` executes,\nhandlers will be called once if the value for their key-path has changed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to execute while suppressing calls to handlers.",
              "type": "Function",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Used to access all of Atom's configuration details.",
      "description": "Used to access all of Atom's configuration details.\n\nAn instance of this class is always available as the `atom.config` global.\n\n## Getting and setting config settings.\n\n```coffee\n# Note that with no value set, ::get returns the setting's default value.\natom.config.get('my-package.myKey') # -> 'defaultValue'\n\natom.config.set('my-package.myKey', 'value')\natom.config.get('my-package.myKey') # -> 'value'\n```\n\nYou may want to watch for changes. Use {::observe} to catch changes to the setting.\n\n```coffee\natom.config.set('my-package.myKey', 'value')\natom.config.observe 'my-package.myKey', (newValue) ->\n  # `observe` calls immediately and every time the value is changed\n  console.log 'My configuration changed:', newValue\n```\n\nIf you want a notification only when the value changes, use {::onDidChange}.\n\n```coffee\natom.config.onDidChange 'my-package.myKey', ({newValue, oldValue}) ->\n  console.log 'My configuration changed:', newValue, oldValue\n```\n\n### Value Coercion\n\nConfig settings each have a type specified by way of a\n[schema](json-schema.org). For example we might want an integer setting that only\nallows integers greater than `0`:\n\n```coffee\n# When no value has been set, `::get` returns the setting's default value\natom.config.get('my-package.anInt') # -> 12\n\n# The string will be coerced to the integer 123\natom.config.set('my-package.anInt', '123')\natom.config.get('my-package.anInt') # -> 123\n\n# The string will be coerced to an integer, but it must be greater than 0, so is set to 1\natom.config.set('my-package.anInt', '-20')\natom.config.get('my-package.anInt') # -> 1\n```\n\n## Defining settings for your package\n\nDefine a schema under a `config` key in your package main.\n\n```coffee\nmodule.exports =\n  # Your config schema\n  config:\n    someInt:\n      type: 'integer'\n      default: 23\n      minimum: 1\n\n  activate: (state) -> # ...\n  # ...\n```\n\nSee [package docs](http://flight-manual.atom.io/hacking-atom/sections/package-word-count/) for\nmore info.\n\n## Config Schemas\n\nWe use [json schema](http://json-schema.org) which allows you to define your value's\ndefault, the type it should be, etc. A simple example:\n\n```coffee\n# We want to provide an `enableThing`, and a `thingVolume`\nconfig:\n  enableThing:\n    type: 'boolean'\n    default: false\n  thingVolume:\n    type: 'integer'\n    default: 5\n    minimum: 1\n    maximum: 11\n```\n\nThe type keyword allows for type coercion and validation. If a `thingVolume` is\nset to a string `'10'`, it will be coerced into an integer.\n\n```coffee\natom.config.set('my-package.thingVolume', '10')\natom.config.get('my-package.thingVolume') # -> 10\n\n# It respects the min / max\natom.config.set('my-package.thingVolume', '400')\natom.config.get('my-package.thingVolume') # -> 11\n\n# If it cannot be coerced, the value will not be set\natom.config.set('my-package.thingVolume', 'cats')\natom.config.get('my-package.thingVolume') # -> 11\n```\n\n### Supported Types\n\nThe `type` keyword can be a string with any one of the following. You can also\nchain them by specifying multiple in an an array. For example\n\n```coffee\nconfig:\n  someSetting:\n    type: ['boolean', 'integer']\n    default: 5\n\n# Then\natom.config.set('my-package.someSetting', 'true')\natom.config.get('my-package.someSetting') # -> true\n\natom.config.set('my-package.someSetting', '12')\natom.config.get('my-package.someSetting') # -> 12\n```\n\n#### string\n\nValues must be a string.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'string'\n    default: 'hello'\n```\n\n#### integer\n\nValues will be coerced into integer. Supports the (optional) `minimum` and\n`maximum` keys.\n\n```coffee\n  config:\n    someSetting:\n      type: 'integer'\n      default: 5\n      minimum: 1\n      maximum: 11\n```\n\n#### number\n\nValues will be coerced into a number, including real numbers. Supports the\n(optional) `minimum` and `maximum` keys.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'number'\n    default: 5.3\n    minimum: 1.5\n    maximum: 11.5\n```\n\n#### boolean\n\nValues will be coerced into a Boolean. `'true'` and `'false'` will be coerced into\na boolean. Numbers, arrays, objects, and anything else will not be coerced.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'boolean'\n    default: false\n```\n\n#### array\n\nValue must be an Array. The types of the values can be specified by a\nsubschema in the `items` key.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'array'\n    default: [1, 2, 3]\n    items:\n      type: 'integer'\n      minimum: 1.5\n      maximum: 11.5\n```\n\n#### color\n\nValues will be coerced into a {Color} with `red`, `green`, `blue`, and `alpha`\nproperties that all have numeric values. `red`, `green`, `blue` will be in\nthe range 0 to 255 and `value` will be in the range 0 to 1. Values can be any\nvalid CSS color format such as `#abc`, `#abcdef`, `white`,\n`rgb(50, 100, 150)`, and `rgba(25, 75, 125, .75)`.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'color'\n    default: 'white'\n```\n\n#### object / Grouping other types\n\nA config setting with the type `object` allows grouping a set of config\nsettings. The group will be visually separated and has its own group headline.\nThe sub options must be listed under a `properties` key.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'object'\n    properties:\n      myChildIntOption:\n        type: 'integer'\n        minimum: 1.5\n        maximum: 11.5\n```\n\n### Other Supported Keys\n\n#### enum\n\nAll types support an `enum` key, which lets you specify all the values the\nsetting can take. `enum` may be an array of allowed values (of the specified\ntype), or an array of objects with `value` and `description` properties, where\nthe `value` is an allowed value, and the `description` is a descriptive string\nused in the settings view.\n\nIn this example, the setting must be one of the 4 integers:\n\n```coffee\nconfig:\n  someSetting:\n    type: 'integer'\n    default: 4\n    enum: [2, 4, 6, 8]\n```\n\nIn this example, the setting must be either 'foo' or 'bar', which are\npresented using the provided descriptions in the settings pane:\n\n```coffee\nconfig:\n  someSetting:\n    type: 'string'\n    default: 'foo'\n    enum: [\n      {value: 'foo', description: 'Foo mode. You want this.'}\n      {value: 'bar', description: 'Bar mode. Nobody wants that!'}\n    ]\n```\n\nIf you only have a few elements, you can display your enum as a list of\nradio buttons in the settings view rather than a select list. To do so,\nspecify `radio: true` as a sibling property to the `enum` array.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'string'\n    default: 'foo'\n    enum: [\n      {value: 'foo', description: 'Foo mode. You want this.'}\n      {value: 'bar', description: 'Bar mode. Nobody wants that!'}\n    ]\n    radio: true\n```\n\nUsage:\n\n```coffee\natom.config.set('my-package.someSetting', '2')\natom.config.get('my-package.someSetting') # -> 2\n\n# will not set values outside of the enum values\natom.config.set('my-package.someSetting', '3')\natom.config.get('my-package.someSetting') # -> 2\n\n# If it cannot be coerced, the value will not be set\natom.config.set('my-package.someSetting', '4')\natom.config.get('my-package.someSetting') # -> 4\n```\n\n#### title and description\n\nThe settings view will use the `title` and `description` keys to display your\nconfig setting in a readable way. By default the settings view humanizes your\nconfig key, so `someSetting` becomes `Some Setting`. In some cases, this is\nconfusing for users, and a more descriptive title is useful.\n\nDescriptions will be displayed below the title in the settings view.\n\nFor a group of config settings the humanized key or the title and the\ndescription are used for the group headline.\n\n```coffee\nconfig:\n  someSetting:\n    title: 'Setting Magnitude'\n    description: 'This will affect the blah and the other blah'\n    type: 'integer'\n    default: 4\n```\n\n__Note__: You should strive to be so clear in your naming of the setting that\nyou do not need to specify a title or description!\n\nDescriptions allow a subset of\n[Markdown formatting](https://help.github.com/articles/github-flavored-markdown/).\nSpecifically, you may use the following in configuration setting descriptions:\n\n* **bold** - `**bold**`\n* *italics* - `*italics*`\n* [links](https://atom.io) - `[links](https://atom.io)`\n* `code spans` - `` `code spans` ``\n* line breaks - `line breaks<br/>`\n* ~~strikethrough~~ - `~~strikethrough~~`\n\n#### order\n\nThe settings view orders your settings alphabetically. You can override this\nordering with the order key.\n\n```coffee\nconfig:\n  zSetting:\n    type: 'integer'\n    default: 4\n    order: 1\n  aSetting:\n    type: 'integer'\n    default: 4\n    order: 2\n```\n\n## Manipulating values outside your configuration schema\n\nIt is possible to manipulate(`get`, `set`, `observe` etc) values that do not\nappear in your configuration schema. For example, if the config schema of the\npackage 'some-package' is\n\n```coffee\nconfig:\nsomeSetting:\n  type: 'boolean'\n  default: false\n```\n\nYou can still do the following\n\n```coffee\nlet otherSetting  = atom.config.get('some-package.otherSetting')\natom.config.set('some-package.stillAnotherSetting', otherSetting * 5)\n```\n\nIn other words, if a function asks for a `key-path`, that path doesn't have to\nbe described in the config schema for the package or any package. However, as\nhighlighted in the best practices section, you are advised against doing the\nabove.\n\n## Best practices\n\n* Don't depend on (or write to) configuration keys outside of your keypath."
    },
    "ContextMenuManager": {
      "name": "ContextMenuManager",
      "filename": "src/context-menu-manager.coffee",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/context-menu-manager.coffee#L44",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/context-menu-manager.coffee#L115",
          "visibility": "Public",
          "summary": "Add context menu items scoped by CSS selectors.",
          "description": "Add context menu items scoped by CSS selectors.",
          "arguments": [
            {
              "children": [
                {
                  "name": "label",
                  "description": "A {String} containing the menu item's label.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "command",
                  "description": "A {String} containing the command to invoke on the target of the right click that invoked the context menu.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "enabled",
                  "description": "A {Boolean} indicating whether the menu item should be clickable. Disabled menu items typically appear grayed out. Defaults to `true`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "submenu",
                  "description": "An {Array} of additional items.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "type",
                  "description": "If you want to create a separator, provide an item  with `type: 'separator'` and no other keys.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "visible",
                  "description": "A {Boolean} indicating whether the menu item should appear in the menu. Defaults to `true`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "children": [
                    {
                      "name": "event",
                      "description": "The click event that deployed the context menu.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "created",
                  "description": "A {Function} that is called on the item each time a context menu is created via a right click. You can assign properties to `this` to dynamically compute the command, label, etc. This method is actually called on a clone of the original item template to prevent state from leaking across context menu deployments. Called with the following argument:",
                  "type": "Function",
                  "isOptional": true
                },
                {
                  "children": [
                    {
                      "name": "event",
                      "description": "The click event that deployed the context menu.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "shouldDisplay",
                  "description": "A {Function} that is called to determine whether to display this item on a given context menu deployment. Called with the following argument:",
                  "type": "Function",
                  "isOptional": true
                },
                {
                  "name": "id",
                  "description": "(internal) A {String} containing the menu item's id. Returns a {Disposable} on which `.dispose()` can be called to remove the added menu items. ",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "itemsBySelector",
              "description": "An {Object} whose keys are CSS selectors and whose values are {Array}s of item {Object}s containing the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "To add a context menu, pass a selector matching the elements to which you\nwant the menu to apply as the top level key, followed by a menu descriptor.\nThe invocation below adds a global 'Help' context menu item and a 'History'\nsubmenu on the editor supporting undo/redo. This is just for example\npurposes and not the way the menu is actually configured in Atom by default.",
              "lang": "coffee",
              "code": "atom.contextMenu.add {\n  'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}]\n  'atom-text-editor': [{\n    label: 'History',\n    submenu: [\n      {label: 'Undo', command:'core:undo'}\n      {label: 'Redo', command:'core:redo'}\n    ]\n  }]\n}",
              "raw": "```coffee\natom.contextMenu.add {\n  'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}]\n  'atom-text-editor': [{\n    label: 'History',\n    submenu: [\n      {label: 'Undo', command:'core:undo'}\n      {label: 'Redo', command:'core:redo'}\n    ]\n  }]\n}\n```"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Provides a registry for commands that you'd like to appear in the\ncontext menu.",
      "description": "Provides a registry for commands that you'd like to appear in the\ncontext menu.\n\nAn instance of this class is always available as the `atom.contextMenu`\nglobal.\n\n## Context Menu CSON Format\n\n```coffee\n'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}]\n'atom-text-editor': [{\n  label: 'History',\n  submenu: [\n    {label: 'Undo', command:'core:undo'}\n    {label: 'Redo', command:'core:redo'}\n  ]\n}]\n```\n\nIn your package's menu `.cson` file you need to specify it under a\n`context-menu` key:\n\n```coffee\n'context-menu':\n  'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}]\n  ...\n```\n\nThe format for use in {::add} is the same minus the `context-menu` key. See\n{::add} for more information. "
    },
    "Cursor": {
      "name": "Cursor",
      "superClass": "Model",
      "filename": "src/cursor.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L13",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Managing Cursor Position",
          "description": ""
        },
        {
          "name": "Cursor Position Details",
          "description": ""
        },
        {
          "name": "Moving the Cursor",
          "description": ""
        },
        {
          "name": "Local Positions and Ranges",
          "description": ""
        },
        {
          "name": "Comparing to another cursor",
          "description": ""
        },
        {
          "name": "Utilities",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangePosition",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L42",
          "visibility": "Public",
          "summary": "Calls your `callback` when the cursor has been moved.",
          "description": "Calls your `callback` when the cursor has been moved.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldBufferPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "oldScreenPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newBufferPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newScreenPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "textChanged",
                      "description": "{Boolean}",
                      "type": "Boolean",
                      "isOptional": false
                    },
                    {
                      "name": "cursor",
                      "description": "{Cursor} that triggered the event",
                      "type": "Cursor",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L51",
          "visibility": "Public",
          "summary": "Calls your `callback` when the cursor is destroyed",
          "description": "Calls your `callback` when the cursor is destroyed",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "setScreenPosition",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L65",
          "visibility": "Public",
          "summary": "Moves a cursor to a given screen position.",
          "description": "Moves a cursor to a given screen position.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "{Array} of two numbers: the screen row, and the screen column.",
              "type": "Array",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "autoscroll",
                  "description": "A Boolean which, if `true`, scrolls the {TextEditor} to wherever the cursor moves to.",
                  "type": "TextEditor",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getScreenPosition",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L72",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns the screen position of the cursor as a {Point}."
            }
          ]
        },
        {
          "name": "setBufferPosition",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L83",
          "visibility": "Public",
          "summary": "Moves a cursor to a given buffer position.",
          "description": "Moves a cursor to a given buffer position.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "{Array} of two numbers: the buffer row, and the buffer column.",
              "type": "Array",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "autoscroll",
                  "description": "{Boolean} indicating whether to autoscroll to the new position. Defaults to `true` if this is the most recently added cursor, `false` otherwise.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getBufferPosition",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L90",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the current buffer position as an Array."
            }
          ]
        },
        {
          "name": "getScreenRow",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L95",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the cursor's current screen row."
            }
          ]
        },
        {
          "name": "getScreenColumn",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L100",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the cursor's current screen column."
            }
          ]
        },
        {
          "name": "getBufferRow",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L105",
          "visibility": "Public",
          "summary": "Retrieves the cursor's current buffer row.",
          "description": "Retrieves the cursor's current buffer row."
        },
        {
          "name": "getBufferColumn",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L110",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the cursor's current buffer column."
            }
          ]
        },
        {
          "name": "getCurrentBufferLine",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L116",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the cursor's current buffer row of text excluding its line\nending."
            }
          ]
        },
        {
          "name": "isAtBeginningOfLine",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L121",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether the cursor is at the start of a line."
            }
          ]
        },
        {
          "name": "isAtEndOfLine",
          "sectionName": "Managing Cursor Position",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L126",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether the cursor is on the line return character."
            }
          ]
        },
        {
          "name": "getMarker",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L138",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns the underlying {DisplayMarker} for the cursor.\nUseful with overlay {Decoration}s."
            }
          ]
        },
        {
          "name": "isSurroundedByWhitespace",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L148",
          "visibility": "Public",
          "summary": "Identifies if the cursor is surrounded by whitespace.",
          "description": "Identifies if the cursor is surrounded by whitespace.\n\n\"Surrounded\" here means that the character directly before and after the\ncursor are both whitespace.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isBetweenWordAndNonWord",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L162",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nThis method returns false if the character before or after the cursor is\nwhitespace.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether the cursor is currently between a word and non-word\ncharacter. The non-word characters are defined by the\n`editor.nonWordCharacters` config value."
            },
            {
              "type": null,
              "description": "Returns a Boolean."
            }
          ]
        },
        {
          "name": "isInsideWord",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L184",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\" (default: {::wordRegExp}).",
                  "type": "RegExp",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether this cursor is between a word's start and end."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}"
            }
          ]
        },
        {
          "name": "getIndentLevel",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L194",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the indentation level of the current line."
            }
          ]
        },
        {
          "name": "getScopeDescriptor",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L205",
          "visibility": "Public",
          "summary": "Retrieves the scope descriptor for the cursor's current position.",
          "description": "Retrieves the scope descriptor for the cursor's current position.",
          "returnValues": [
            {
              "type": "ScopeDescriptor",
              "description": "Returns a {ScopeDescriptor}"
            }
          ]
        },
        {
          "name": "getSyntaxTreeScopeDescriptor",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L214",
          "visibility": "Public",
          "summary": "Retrieves the syntax tree scope descriptor for the cursor's current position.",
          "description": "Retrieves the syntax tree scope descriptor for the cursor's current position.",
          "returnValues": [
            {
              "type": "ScopeDescriptor",
              "description": "Returns a {ScopeDescriptor}"
            }
          ]
        },
        {
          "name": "hasPrecedingCharactersOnLine",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L222",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if this cursor has no non-whitespace characters before\nits current position."
            }
          ]
        },
        {
          "name": "isLastCursor",
          "sectionName": "Cursor Position Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L239",
          "visibility": "Public",
          "summary": "Identifies if this cursor is the last in the {TextEditor}.",
          "description": "Identifies if this cursor is the last in the {TextEditor}.\n\n\"Last\" is defined as the most recently added cursor.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "moveUp",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L253",
          "visibility": "Public",
          "summary": "Moves the cursor up one screen row.",
          "description": "Moves the cursor up one screen row.",
          "arguments": [
            {
              "name": "rowCount",
              "description": "{Number} number of rows to move (default: 1)",
              "type": "Number",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "moveToEndOfSelection",
                  "description": "if true, move to the left of the selection if a selection exists.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveDown",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L276",
          "visibility": "Public",
          "summary": "Moves the cursor down one screen row.",
          "description": "Moves the cursor down one screen row.",
          "arguments": [
            {
              "name": "rowCount",
              "description": "{Number} number of rows to move (default: 1)",
              "type": "Number",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "moveToEndOfSelection",
                  "description": "if true, move to the left of the selection if a selection exists.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveLeft",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L299",
          "visibility": "Public",
          "summary": "Moves the cursor left one screen column.",
          "description": "Moves the cursor left one screen column.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to move (default: 1)",
              "type": "Number",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "moveToEndOfSelection",
                  "description": "if true, move to the left of the selection if a selection exists.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveRight",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L323",
          "visibility": "Public",
          "summary": "Moves the cursor right one screen column.",
          "description": "Moves the cursor right one screen column.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to move (default: 1)",
              "type": "Number",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "moveToEndOfSelection",
                  "description": "if true, move to the right of the selection if a selection exists.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveToTop",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L348",
          "visibility": "Public",
          "summary": "Moves the cursor to the top of the buffer.",
          "description": "Moves the cursor to the top of the buffer."
        },
        {
          "name": "moveToBottom",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L353",
          "visibility": "Public",
          "summary": "Moves the cursor to the bottom of the buffer.",
          "description": "Moves the cursor to the bottom of the buffer."
        },
        {
          "name": "moveToBeginningOfScreenLine",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L360",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the line.",
          "description": "Moves the cursor to the beginning of the line."
        },
        {
          "name": "moveToBeginningOfLine",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L365",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the buffer line.",
          "description": "Moves the cursor to the beginning of the buffer line."
        },
        {
          "name": "moveToFirstCharacterOfLine",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L371",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the first character in the\nline.",
          "description": "Moves the cursor to the beginning of the first character in the\nline."
        },
        {
          "name": "moveToEndOfScreenLine",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L409",
          "visibility": "Public",
          "summary": "Moves the cursor to the end of the line.",
          "description": "Moves the cursor to the end of the line."
        },
        {
          "name": "moveToEndOfLine",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L414",
          "visibility": "Public",
          "summary": "Moves the cursor to the end of the buffer line.",
          "description": "Moves the cursor to the end of the buffer line."
        },
        {
          "name": "moveToBeginningOfWord",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L419",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the word.",
          "description": "Moves the cursor to the beginning of the word."
        },
        {
          "name": "moveToEndOfWord",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L424",
          "visibility": "Public",
          "summary": "Moves the cursor to the end of the word.",
          "description": "Moves the cursor to the end of the word."
        },
        {
          "name": "moveToBeginningOfNextWord",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L430",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the next word.",
          "description": "Moves the cursor to the beginning of the next word."
        },
        {
          "name": "moveToPreviousWordBoundary",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L436",
          "visibility": "Public",
          "summary": "Moves the cursor to the previous word boundary.",
          "description": "Moves the cursor to the previous word boundary."
        },
        {
          "name": "moveToNextWordBoundary",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L442",
          "visibility": "Public",
          "summary": "Moves the cursor to the next word boundary.",
          "description": "Moves the cursor to the next word boundary."
        },
        {
          "name": "moveToPreviousSubwordBoundary",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L448",
          "visibility": "Public",
          "summary": "Moves the cursor to the previous subword boundary.",
          "description": "Moves the cursor to the previous subword boundary."
        },
        {
          "name": "moveToNextSubwordBoundary",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L455",
          "visibility": "Public",
          "summary": "Moves the cursor to the next subword boundary.",
          "description": "Moves the cursor to the next subword boundary."
        },
        {
          "name": "skipLeadingWhitespace",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L463",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the buffer line, skipping all\nwhitespace.",
          "description": "Moves the cursor to the beginning of the buffer line, skipping all\nwhitespace."
        },
        {
          "name": "moveToBeginningOfNextParagraph",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L476",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the next paragraph",
          "description": "Moves the cursor to the beginning of the next paragraph"
        },
        {
          "name": "moveToBeginningOfPreviousParagraph",
          "sectionName": "Moving the Cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L482",
          "visibility": "Public",
          "summary": "Moves the cursor to the beginning of the previous paragraph",
          "description": "Moves the cursor to the beginning of the previous paragraph"
        },
        {
          "name": "getPreviousWordBoundaryBufferPosition",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L497",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\"  (default: {::wordRegExp})",
                  "type": "RegExp",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns buffer position of previous word boundary. It might be on\nthe current word, or the previous word."
            }
          ]
        },
        {
          "name": "getNextWordBoundaryBufferPosition",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L535",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\"  (default: {::wordRegExp})",
                  "type": "RegExp",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns buffer position of the next word boundary. It might be on\nthe current word, or the previous word."
            }
          ]
        },
        {
          "name": "getBeginningOfCurrentWordBufferPosition",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L572",
          "visibility": "Public",
          "summary": "Retrieves the buffer position of where the current word starts.",
          "description": "Retrieves the buffer position of where the current word starts.",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\" (default: {::wordRegExp}).",
                  "type": "RegExp",
                  "isOptional": false
                },
                {
                  "name": "includeNonWordCharacters",
                  "description": "A {Boolean} indicating whether to include non-word characters in the default word regex. Has no effect if wordRegex is set.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "allowPrevious",
                  "description": "A {Boolean} indicating whether the beginning of the previous word can be returned.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getEndOfCurrentWordBufferPosition",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L605",
          "visibility": "Public",
          "summary": "Retrieves the buffer position of where the current word ends.",
          "description": "Retrieves the buffer position of where the current word ends.",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\"  (default: {::wordRegExp})",
                  "type": "RegExp",
                  "isOptional": false
                },
                {
                  "name": "includeNonWordCharacters",
                  "description": "A Boolean indicating whether to include non-word characters in the default word regex. Has no effect if wordRegex is set.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getBeginningOfNextWordBufferPosition",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L633",
          "visibility": "Public",
          "summary": "Retrieves the buffer position of where the next word starts.",
          "description": "Retrieves the buffer position of where the next word starts.",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\" (default: {::wordRegExp}).",
                  "type": "RegExp",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}"
            }
          ]
        },
        {
          "name": "getCurrentWordBufferRange",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L658",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "children": [
                {
                  "name": "wordRegex",
                  "description": "A {RegExp} indicating what constitutes a \"word\" (default: {::wordRegExp}).",
                  "type": "RegExp",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the buffer Range occupied by the word located under the cursor."
            }
          ]
        },
        {
          "name": "getCurrentLineBufferRange",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L677",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "children": [
                {
                  "name": "includeNewline",
                  "description": "A {Boolean} which controls whether the Range should include the newline.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the buffer Range for the current line."
            }
          ]
        },
        {
          "name": "getCurrentParagraphBufferRange",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L686",
          "visibility": "Public",
          "summary": "Retrieves the range for the current paragraph.",
          "description": "Retrieves the range for the current paragraph.\n\nA paragraph is defined as a block of text surrounded by empty lines or comments.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getCurrentWordPrefix",
          "sectionName": "Local Positions and Ranges",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L691",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the characters preceding the cursor in the current word."
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparing to another cursor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L711",
          "visibility": "Public",
          "summary": "Compare this cursor's buffer position to another cursor's buffer position.",
          "description": "Compare this cursor's buffer position to another cursor's buffer position.\n\nSee {Point::compare} for more details.",
          "arguments": [
            {
              "name": "otherCursor",
              "description": "{Cursor} to compare against",
              "type": "Cursor",
              "isOptional": false
            }
          ]
        },
        {
          "name": "clearSelection",
          "sectionName": "Utilities",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L720",
          "visibility": "Public",
          "summary": "Deselects the current selection.",
          "description": "Deselects the current selection."
        },
        {
          "name": "wordRegExp",
          "sectionName": "Utilities",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L731",
          "visibility": "Public",
          "summary": "Get the RegExp used by the cursor to determine what a \"word\" is.",
          "description": "Get the RegExp used by the cursor to determine what a \"word\" is.",
          "arguments": [
            {
              "children": [
                {
                  "name": "includeNonWordCharacters",
                  "description": "A {Boolean} indicating whether to include non-word characters in the regex. (default: true)",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "RegExp",
              "description": "Returns a {RegExp}."
            }
          ]
        },
        {
          "name": "subwordRegExp",
          "sectionName": "Utilities",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/cursor.js#L747",
          "visibility": "Public",
          "summary": "Get the RegExp used by the cursor to determine what a \"subword\" is.",
          "description": "Get the RegExp used by the cursor to determine what a \"subword\" is.",
          "arguments": [
            {
              "children": [
                {
                  "name": "backwards",
                  "description": "A {Boolean} indicating whether to look forwards or backwards for the next subword. (default: false)",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "RegExp",
              "description": "Returns a {RegExp}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "The `Cursor` class represents the little blinking line identifying\nwhere text can be inserted.",
      "description": "The `Cursor` class represents the little blinking line identifying\nwhere text can be inserted.\n\nCursors belong to {TextEditor}s and have some metadata attached in the form\nof a {DisplayMarker}."
    },
    "Decoration": {
      "name": "Decoration",
      "superClass": null,
      "filename": "src/decoration.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L45",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Decoration Details",
          "description": ""
        },
        {
          "name": "Properties",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L100",
          "visibility": "Essential",
          "summary": "Destroy this marker decoration.",
          "description": "Destroy this marker decoration.\n\nYou can also destroy the marker if you own it, which will destroy this\ndecoration."
        },
        {
          "name": "onDidChangeProperties",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L128",
          "visibility": "Essential",
          "summary": "When the {Decoration} is updated via {Decoration::update}.",
          "description": "When the {Decoration} is updated via {Decoration::update}.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldProperties",
                      "description": "{Object} the old parameters the decoration used to have",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "newProperties",
                      "description": "{Object} the new parameters the decoration now has",
                      "type": "Object",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L137",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the {Decoration} is destroyed",
          "description": "Invoke the given callback when the {Decoration} is destroyed",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getId",
          "sectionName": "Decoration Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L146",
          "visibility": "Essential",
          "summary": "An id unique across all {Decoration} objects",
          "description": "An id unique across all {Decoration} objects"
        },
        {
          "name": "getMarker",
          "sectionName": "Decoration Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L151",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Decoration",
              "description": "Returns the marker associated with this {Decoration}"
            }
          ]
        },
        {
          "name": "isType",
          "sectionName": "Decoration Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L162",
          "visibility": "Public",
          "summary": "Check if this decoration is of type `type`",
          "description": "Check if this decoration is of type `type`",
          "arguments": [
            {
              "name": "type",
              "description": "{String} type like `'line-number'`, `'line'`, etc. `type` can also be an {Array} of {String}s, where it will return true if the decoration's type matches any in the array.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean}"
            }
          ]
        },
        {
          "name": "getProperties",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L171",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Decoration",
              "description": "Returns the {Decoration}'s properties."
            }
          ]
        },
        {
          "name": "setProperties",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/decoration.js#L184",
          "visibility": "Essential",
          "summary": "Update the marker with new Properties. Allows you to change the decoration's class.",
          "description": "Update the marker with new Properties. Allows you to change the decoration's class.",
          "arguments": [
            {
              "name": "newProperties",
              "description": "{Object} eg. `{type: 'line-number', class: 'my-new-class'}`",
              "type": "Object",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "coffee",
              "code": "decoration.setProperties({type: 'line-number', class: 'my-new-class'})",
              "raw": "```coffee\ndecoration.setProperties({type: 'line-number', class: 'my-new-class'})\n```"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Represents a decoration that follows a {DisplayMarker}. A decoration is\nbasically a visual representation of a marker. It allows you to add CSS\nclasses to line numbers in the gutter, lines, and add selection-line regions\naround marked ranges of text.",
      "description": "Represents a decoration that follows a {DisplayMarker}. A decoration is\nbasically a visual representation of a marker. It allows you to add CSS\nclasses to line numbers in the gutter, lines, and add selection-line regions\naround marked ranges of text.\n\n{Decoration} objects are not meant to be created directly, but created with\n{TextEditor::decorateMarker}. eg.\n\n```coffee\nrange = editor.getSelectedBufferRange() # any range you like\nmarker = editor.markBufferRange(range)\ndecoration = editor.decorateMarker(marker, {type: 'line', class: 'my-line-class'})\n```\n\nBest practice for destroying the decoration is by destroying the {DisplayMarker}.\n\n```coffee\nmarker.destroy()\n```\n\nYou should only use {Decoration::destroy} when you still need or do not own\nthe marker."
    },
    "DeserializerManager": {
      "name": "DeserializerManager",
      "superClass": null,
      "filename": "src/deserializer-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/deserializer-manager.js#L22",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/deserializer-manager.js#L37",
          "visibility": "Public",
          "summary": "Register the given class(es) as deserializers.",
          "description": "Register the given class(es) as deserializers.",
          "arguments": [
            {
              "name": "deserializers",
              "description": "One or more deserializers to register. A deserializer can be any object with a `.name` property and a `.deserialize()` method. A common approach is to register a *constructor* as the deserializer for its instances by adding a `.deserialize()` class method. When your method is called, it will be passed serialized state as the first argument and the {AtomEnvironment} object as the second argument, which is useful if you wish to avoid referencing the `atom` global.",
              "type": "AtomEnvironment",
              "isOptional": false
            }
          ]
        },
        {
          "name": "deserialize",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/deserializer-manager.js#L58",
          "visibility": "Public",
          "summary": "Deserialize the state and params.",
          "description": "Deserialize the state and params.",
          "arguments": [
            {
              "name": "state",
              "description": "The state {Object} to deserialize.",
              "type": "Object",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Manages the deserializers used for serialized state",
      "description": "Manages the deserializers used for serialized state\n\nAn instance of this class is always available as the `atom.deserializers`\nglobal.",
      "examples": [
        {
          "description": "",
          "lang": "coffee",
          "code": "class MyPackageView extends View\n  atom.deserializers.add(this)\n\n  @deserialize: (state) ->\n    new MyPackageView(state)\n\n  constructor: (@state) ->\n\n  serialize: ->\n    @state",
          "raw": "```coffee\nclass MyPackageView extends View\n  atom.deserializers.add(this)\n\n  @deserialize: (state) ->\n    new MyPackageView(state)\n\n  constructor: (@state) ->\n\n  serialize: ->\n    @state\n```"
        }
      ]
    },
    "Directory": {
      "name": "Directory",
      "filename": "src/directory.coffee",
      "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L13",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Directory Metadata",
          "description": ""
        },
        {
          "name": "Managing Paths",
          "description": ""
        },
        {
          "name": "Traversing",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L26",
          "visibility": "Public",
          "summary": "Configures a new Directory instance, no files are accessed.",
          "description": "Configures a new Directory instance, no files are accessed.",
          "arguments": [
            {
              "name": "directoryPath",
              "description": "A {String} containing the absolute path to the directory",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "symlink",
              "description": "A {Boolean} indicating if the path is a symlink. (default: false) ",
              "type": "Boolean",
              "isOptional": true
            }
          ]
        },
        {
          "name": "create",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L51",
          "visibility": "Public",
          "summary": "Creates the directory on disk that corresponds to `::getPath()` if\nno such directory already exists.",
          "description": "Creates the directory on disk that corresponds to `::getPath()` if\nno such directory already exists.",
          "arguments": [
            {
              "name": "mode",
              "description": "{Number} that defaults to `0777`.",
              "type": "Number",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves once the directory is created on disk. It\nresolves to a boolean value that is true if the directory was created or\nfalse if it already existed."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L73",
          "visibility": "Public",
          "summary": "Invoke the given callback when the directory's contents change.",
          "description": "Invoke the given callback when the directory's contents change.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the directory's contents change.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "isFile",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L95",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always false."
            }
          ]
        },
        {
          "name": "isDirectory",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L98",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always true."
            }
          ]
        },
        {
          "name": "isSymbolicLink",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L101",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether or not this is a symbolic link"
            }
          ]
        },
        {
          "name": "exists",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L106",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a promise that resolves to a {Boolean}, true if the\ndirectory exists, false otherwise."
            }
          ]
        },
        {
          "name": "existsSync",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L110",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, true if the directory exists, false otherwise."
            }
          ]
        },
        {
          "name": "isRoot",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L115",
          "visibility": "Public",
          "summary": "Return a {Boolean}, true if this {Directory} is the root directory\nof the filesystem, or false if it isn't. ",
          "description": "Return a {Boolean}, true if this {Directory} is the root directory\nof the filesystem, or false if it isn't. "
        },
        {
          "name": "getPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L126",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nThis may include unfollowed symlinks or relative directory entries. Or it\nmay be fully resolved, it depends on what you give it. ",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the directory's {String} path."
            }
          ]
        },
        {
          "name": "getRealPathSync",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L132",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nAll relative directory entries are removed and symlinks are resolved to\ntheir final destination. ",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns this directory's completely resolved {String} path."
            }
          ]
        },
        {
          "name": "getBaseName",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L143",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} basename of the directory."
            }
          ]
        },
        {
          "name": "relativize",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L148",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the relative {String} path to the given path from this\ndirectory."
            }
          ]
        },
        {
          "name": "getParent",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L205",
          "visibility": "Public",
          "summary": "Traverse to the parent directory.",
          "description": "Traverse to the parent directory.",
          "returnValues": [
            {
              "type": "Directory",
              "description": "Returns a {Directory}."
            }
          ]
        },
        {
          "name": "getFile",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L214",
          "visibility": "Public",
          "summary": "Traverse within this Directory to a child File. This method doesn't\nactually check to see if the File exists, it just creates the File object.",
          "description": "Traverse within this Directory to a child File. This method doesn't\nactually check to see if the File exists, it just creates the File object.",
          "arguments": [
            {
              "name": "filename",
              "description": "The {String} name of a File within this Directory.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "File",
              "description": "Returns a {File}."
            }
          ]
        },
        {
          "name": "getSubdirectory",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L224",
          "visibility": "Public",
          "summary": "Traverse within this a Directory to a child Directory. This method\ndoesn't actually check to see if the Directory exists, it just creates the\nDirectory object.",
          "description": "Traverse within this a Directory to a child Directory. This method\ndoesn't actually check to see if the Directory exists, it just creates the\nDirectory object.",
          "arguments": [
            {
              "name": "dirname",
              "description": "The {String} name of the child Directory.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Directory",
              "description": "Returns a {Directory}."
            }
          ]
        },
        {
          "name": "getEntriesSync",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L230",
          "visibility": "Public",
          "summary": "Reads file entries in this directory from disk synchronously.",
          "description": "Reads file entries in this directory from disk synchronously.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {File} and {Directory} objects."
            }
          ]
        },
        {
          "name": "getEntries",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L251",
          "visibility": "Public",
          "summary": "Reads file entries in this directory from disk asynchronously.",
          "description": "Reads file entries in this directory from disk asynchronously.",
          "arguments": [
            {
              "children": [
                {
                  "name": "error",
                  "description": "An {Error}, may be null.",
                  "type": "Error",
                  "isOptional": false
                },
                {
                  "name": "entries",
                  "description": "An {Array} of {File} and {Directory} objects. ",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to call with the following arguments:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "contains",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/directory.coffee#L282",
          "visibility": "Public",
          "summary": "Determines if the given path (real or symbolic) is inside this\ndirectory. This method does not actually check if the path exists, it just\nchecks if the path is under this directory.",
          "description": "Determines if the given path (real or symbolic) is inside this\ndirectory. This method does not actually check if the path exists, it just\nchecks if the path is under this directory.",
          "arguments": [
            {
              "name": "pathToCheck",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} whether the given path is inside this directory."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents a directory on disk that can be watched for changes. ",
      "description": "Represents a directory on disk that can be watched for changes. "
    },
    "DisplayMarker": {
      "name": "DisplayMarker",
      "filename": "src/display-marker.coffee",
      "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L43",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "TextEditorMarker Details",
          "description": ""
        },
        {
          "name": "Comparing to other markers",
          "description": ""
        },
        {
          "name": "Managing the marker's range",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L56",
          "visibility": "Essential",
          "summary": "Destroys the marker, causing it to emit the 'destroyed' event. Once\ndestroyed, a marker cannot be restored by undo/redo operations. ",
          "description": "Destroys the marker, causing it to emit the 'destroyed' event. Once\ndestroyed, a marker cannot be restored by undo/redo operations. "
        },
        {
          "name": "copy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L81",
          "visibility": "Essential",
          "summary": "Creates and returns a new {DisplayMarker} with the same properties as\nthis marker.",
          "description": "Creates and returns a new {DisplayMarker} with the same properties as\nthis marker.\n\n{Selection} markers (markers with a custom property `type: \"selection\"`)\nshould be copied with a different `type` value, for example with\n`marker.copy({type: null})`. Otherwise, the new marker's selection will\nbe merged with this marker's selection, and a `null` value will be\nreturned.",
          "arguments": [
            {
              "name": "properties",
              "description": "{Object} properties to associate with the new marker. The new marker's properties are computed by extending this marker's properties with `properties`.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L110",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the state of the marker changes.",
          "description": "Invoke the given callback when the state of the marker changes.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldHeadBufferPosition",
                      "description": "{Point} representing the former head buffer position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newHeadBufferPosition",
                      "description": "{Point} representing the new head buffer position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "oldTailBufferPosition",
                      "description": "{Point} representing the former tail buffer position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newTailBufferPosition",
                      "description": "{Point} representing the new tail buffer position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "oldHeadScreenPosition",
                      "description": "{Point} representing the former head screen position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newHeadScreenPosition",
                      "description": "{Point} representing the new head screen position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "oldTailScreenPosition",
                      "description": "{Point} representing the former tail screen position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newTailScreenPosition",
                      "description": "{Point} representing the new tail screen position",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "wasValid",
                      "description": "{Boolean} indicating whether the marker was valid before the change",
                      "type": "Boolean",
                      "isOptional": false
                    },
                    {
                      "name": "isValid",
                      "description": "{Boolean} indicating whether the marker is now valid",
                      "type": "Boolean",
                      "isOptional": false
                    },
                    {
                      "name": "hadTail",
                      "description": "{Boolean} indicating whether the marker had a tail before the change",
                      "type": "Boolean",
                      "isOptional": false
                    },
                    {
                      "name": "hasTail",
                      "description": "{Boolean} indicating whether the marker now has a tail",
                      "type": "Boolean",
                      "isOptional": false
                    },
                    {
                      "name": "oldProperties",
                      "description": "{Object} containing the marker's custom properties before the change.",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "newProperties",
                      "description": "{Object} containing the marker's custom properties after the change.",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "textChanged",
                      "description": "{Boolean} indicating whether this change was caused by a textual change to the buffer or whether the marker was manipulated directly via its public API.",
                      "type": "Boolean",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the marker changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L126",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the marker is destroyed.",
          "description": "Invoke the given callback when the marker is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the marker is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "isValid",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L137",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the marker is valid.\nMarkers can be invalidated when a region surrounding them in the buffer is\nchanged."
            }
          ]
        },
        {
          "name": "isDestroyed",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L145",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the marker has been\ndestroyed. A marker can be invalid without being destroyed, in which case\nundoing the invalidating operation would restore the marker. Once a marker\nis destroyed by calling {DisplayMarker::destroy}, no undo/redo operation\ncan ever bring it back."
            }
          ]
        },
        {
          "name": "isReversed",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L149",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the head precedes the tail."
            }
          ]
        },
        {
          "name": "isExclusive",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L154",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether changes that occur exactly\nat the marker's head or tail cause it to move."
            }
          ]
        },
        {
          "name": "getInvalidationStrategy",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L162",
          "visibility": "Essential",
          "summary": "Get the invalidation strategy for this marker.",
          "description": "Get the invalidation strategy for this marker.\n\nValid values include: `never`, `surround`, `overlap`, `inside`, and `touch`.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "getProperties",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L167",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} containing any custom properties associated with\nthe marker."
            }
          ]
        },
        {
          "name": "setProperties",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L174",
          "visibility": "Essential",
          "summary": "Merges an {Object} containing new properties into the marker's\nexisting properties.",
          "description": "Merges an {Object} containing new properties into the marker's\nexisting properties.",
          "arguments": [
            {
              "name": "properties",
              "description": "{Object} ",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "matchesProperties",
          "sectionName": "TextEditorMarker Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L179",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether this marker matches the given parameters. The\nparameters are the same as {DisplayMarkerLayer::findMarkers}."
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparing to other markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L192",
          "visibility": "Essential",
          "summary": "Compares this marker to another based on their ranges.",
          "description": "Compares this marker to another based on their ranges.",
          "arguments": [
            {
              "name": "other",
              "description": "{DisplayMarker}",
              "type": "DisplayMarker",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}"
            }
          ]
        },
        {
          "name": "isEqual",
          "sectionName": "Comparing to other markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L199",
          "visibility": "Essential",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "other",
              "description": "{DisplayMarker} other marker ",
              "type": "DisplayMarker",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this marker is equivalent to\nanother marker, meaning they have the same range and options."
            }
          ]
        },
        {
          "name": "getBufferRange",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L210",
          "visibility": "Essential",
          "summary": "Gets the buffer range of this marker.",
          "description": "Gets the buffer range of this marker.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getScreenRange",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L216",
          "visibility": "Essential",
          "summary": "Gets the screen range of this marker.",
          "description": "Gets the screen range of this marker.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "setBufferRange",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L224",
          "visibility": "Essential",
          "summary": "Modifies the buffer range of this marker.",
          "description": "Modifies the buffer range of this marker.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "The new {Range} to use",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} If true, the marker will to be in a reversed orientation. ",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "properties",
              "description": "{Object} properties to associate with the marker.",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "setScreenRange",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L237",
          "visibility": "Essential",
          "summary": "Modifies the screen range of this marker.",
          "description": "Modifies the screen range of this marker.",
          "arguments": [
            {
              "name": "screenRange",
              "description": "The new {Range} to use",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} If true, the marker will to be in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range. ",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getHeadBufferPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L243",
          "visibility": "Extended",
          "summary": "Retrieves the buffer position of the marker's head.",
          "description": "Retrieves the buffer position of the marker's head.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "setHeadBufferPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L249",
          "visibility": "Extended",
          "summary": "Sets the buffer position of the marker's head.",
          "description": "Sets the buffer position of the marker's head.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "The new {Point} to use ",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getHeadScreenPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L262",
          "visibility": "Extended",
          "summary": "Retrieves the screen position of the marker's head.",
          "description": "Retrieves the screen position of the marker's head.",
          "arguments": [
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "setHeadScreenPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L274",
          "visibility": "Extended",
          "summary": "Sets the screen position of the marker's head.",
          "description": "Sets the screen position of the marker's head.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "The new {Point} to use",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range. ",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getTailBufferPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L280",
          "visibility": "Extended",
          "summary": "Retrieves the buffer position of the marker's tail.",
          "description": "Retrieves the buffer position of the marker's tail.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "setTailBufferPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L286",
          "visibility": "Extended",
          "summary": "Sets the buffer position of the marker's tail.",
          "description": "Sets the buffer position of the marker's tail.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "The new {Point} to use ",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getTailScreenPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L299",
          "visibility": "Extended",
          "summary": "Retrieves the screen position of the marker's tail.",
          "description": "Retrieves the screen position of the marker's tail.",
          "arguments": [
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "setTailScreenPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L311",
          "visibility": "Extended",
          "summary": "Sets the screen position of the marker's tail.",
          "description": "Sets the screen position of the marker's tail.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "The new {Point} to use",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range. ",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getStartBufferPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L318",
          "visibility": "Extended",
          "summary": "Retrieves the buffer position of the marker's start. This will always be\nless than or equal to the result of {DisplayMarker::getEndBufferPosition}.",
          "description": "Retrieves the buffer position of the marker's start. This will always be\nless than or equal to the result of {DisplayMarker::getEndBufferPosition}.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getStartScreenPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L332",
          "visibility": "Essential",
          "summary": "Retrieves the screen position of the marker's start. This will always be\nless than or equal to the result of {DisplayMarker::getEndScreenPosition}.",
          "description": "Retrieves the screen position of the marker's start. This will always be\nless than or equal to the result of {DisplayMarker::getEndScreenPosition}.",
          "arguments": [
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getEndBufferPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L339",
          "visibility": "Extended",
          "summary": "Retrieves the buffer position of the marker's end. This will always be\ngreater than or equal to the result of {DisplayMarker::getStartBufferPosition}.",
          "description": "Retrieves the buffer position of the marker's end. This will always be\ngreater than or equal to the result of {DisplayMarker::getStartBufferPosition}.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getEndScreenPosition",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L353",
          "visibility": "Essential",
          "summary": "Retrieves the screen position of the marker's end. This will always be\ngreater than or equal to the result of {DisplayMarker::getStartScreenPosition}.",
          "description": "Retrieves the screen position of the marker's end. This will always be\ngreater than or equal to the result of {DisplayMarker::getStartScreenPosition}.",
          "arguments": [
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "hasTail",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L357",
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the marker has a tail."
            }
          ]
        },
        {
          "name": "plantTail",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L363",
          "visibility": "Extended",
          "summary": "Plants the marker's tail at the current head position. After calling\nthe marker's tail position will be its head position at the time of the\ncall, regardless of where the marker's head is moved. ",
          "description": "Plants the marker's tail at the current head position. After calling\nthe marker's tail position will be its head position at the time of the\ncall, regardless of where the marker's head is moved. "
        },
        {
          "name": "clearTail",
          "sectionName": "Managing the marker's range",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker.coffee#L369",
          "visibility": "Extended",
          "summary": "Removes the marker's tail. After calling the marker's head position\nwill be reported as its current tail position until the tail is planted\nagain. ",
          "description": "Removes the marker's tail. After calling the marker's head position\nwill be reported as its current tail position until the tail is planted\nagain. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Represents a buffer annotation that remains logically stationary\neven as the buffer changes. This is used to represent cursors, folds, snippet\ntargets, misspelled words, and anything else that needs to track a logical\nlocation in the buffer over time.",
      "description": "Represents a buffer annotation that remains logically stationary\neven as the buffer changes. This is used to represent cursors, folds, snippet\ntargets, misspelled words, and anything else that needs to track a logical\nlocation in the buffer over time.\n\n### DisplayMarker Creation\n\nUse {DisplayMarkerLayer::markBufferRange} or {DisplayMarkerLayer::markScreenRange}\nrather than creating Markers directly.\n\n### Head and Tail\n\nMarkers always have a *head* and sometimes have a *tail*. If you think of a\nmarker as an editor selection, the tail is the part that's stationary and the\nhead is the part that moves when the mouse is moved. A marker without a tail\nalways reports an empty range at the head position. A marker with a head position\ngreater than the tail is in a \"normal\" orientation. If the head precedes the\ntail the marker is in a \"reversed\" orientation.\n\n### Validity\n\nMarkers are considered *valid* when they are first created. Depending on the\ninvalidation strategy you choose, certain changes to the buffer can cause a\nmarker to become invalid, for example if the text surrounding the marker is\ndeleted. The strategies, in order of descending fragility:\n\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.\n\nSee {TextBuffer::markRange} for usage. "
    },
    "DisplayMarkerLayer": {
      "name": "DisplayMarkerLayer",
      "filename": "src/display-marker-layer.coffee",
      "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L11",
      "sections": [
        {
          "name": "Lifecycle",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Marker creation",
          "description": ""
        },
        {
          "name": "Querying",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L27",
          "visibility": "Essential",
          "summary": "Destroy this layer. ",
          "description": "Destroy this layer. "
        },
        {
          "name": "clear",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L39",
          "visibility": "Public",
          "summary": "Destroy all markers in this layer. ",
          "description": "Destroy all markers in this layer. "
        },
        {
          "name": "isDestroyed",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L49",
          "visibility": "Essential",
          "summary": "Determine whether this layer has been destroyed.",
          "description": "Determine whether this layer has been destroyed.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L59",
          "visibility": "Public",
          "summary": "Subscribe to be notified synchronously when this layer is destroyed.",
          "description": "Subscribe to be notified synchronously when this layer is destroyed.",
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        },
        {
          "name": "onDidUpdate",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L77",
          "visibility": "Public",
          "summary": "Subscribe to be notified asynchronously whenever markers are\ncreated, updated, or destroyed on this layer. *Prefer this method for\noptimal performance when interacting with layers that could contain large\nnumbers of markers.*",
          "description": "Subscribe to be notified asynchronously whenever markers are\ncreated, updated, or destroyed on this layer. *Prefer this method for\noptimal performance when interacting with layers that could contain large\nnumbers of markers.*\n\nSubscribers are notified once, asynchronously when any number of changes\noccur in a given tick of the event loop. You should re-query the layer\nto determine the state of markers in which you're interested in. It may\nbe counter-intuitive, but this is much more efficient than subscribing to\nevents on individual markers, which are expensive to deliver.",
          "arguments": [
            {
              "name": "callback",
              "description": "A {Function} that will be called with no arguments when changes occur on this layer.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        },
        {
          "name": "onDidCreateMarker",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L91",
          "visibility": "Public",
          "summary": "Subscribe to be notified synchronously whenever markers are created\non this layer. *Avoid this method for optimal performance when interacting\nwith layers that could contain large numbers of markers.*",
          "description": "Subscribe to be notified synchronously whenever markers are created\non this layer. *Avoid this method for optimal performance when interacting\nwith layers that could contain large numbers of markers.*\n\nYou should prefer {::onDidUpdate} when synchronous notifications aren't\nabsolutely necessary.",
          "arguments": [
            {
              "name": "callback",
              "description": "A {Function} that will be called with a {TextEditorMarker} whenever a new marker is created.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        },
        {
          "name": "markScreenRange",
          "sectionName": "Marker creation",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L133",
          "visibility": "Public",
          "summary": "Create a marker with the given screen range.",
          "description": "Create a marker with the given screen range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} Creates the marker in a reversed orientation. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`. Applies to the start and end of the given range.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "markScreenPosition",
          "sectionName": "Marker creation",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L170",
          "visibility": "Public",
          "summary": "Create a marker on this layer with its head at the given screen\nposition and no tail.",
          "description": "Create a marker on this layer with its head at the given screen\nposition and no tail.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "A {Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "markBufferRange",
          "sectionName": "Marker creation",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L204",
          "visibility": "Public",
          "summary": "Create a marker with the given buffer range.",
          "description": "Create a marker with the given buffer range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} Creates the marker in a reversed orientation. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "markBufferPosition",
          "sectionName": "Marker creation",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L235",
          "visibility": "Public",
          "summary": "Create a marker on this layer with its head at the given buffer\nposition and no tail.",
          "description": "Create a marker on this layer with its head at the given buffer\nposition and no tail.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "getMarker",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L245",
          "visibility": "Essential",
          "summary": "Get an existing marker by its id.",
          "description": "Get an existing marker by its id.",
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "getMarkers",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L254",
          "visibility": "Essential",
          "summary": "Get all markers in the layer.",
          "description": "Get all markers in the layer.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {DisplayMarker}s."
            }
          ]
        },
        {
          "name": "getMarkerCount",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L260",
          "visibility": "Public",
          "summary": "Get the number of markers in the marker layer.",
          "description": "Get the number of markers in the marker layer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "findMarkers",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/display-marker-layer.coffee#L298",
          "visibility": "Public",
          "summary": "Find markers in the layer conforming to the given parameters.",
          "description": "Find markers in the layer conforming to the given parameters.\n\nThis method finds markers based on the given properties. Markers can be\nassociated with custom properties that will be compared with basic equality.\nIn addition, there are several special properties that will be compared\nwith the range of the markers rather than their properties.",
          "arguments": [
            {
              "children": [
                {
                  "name": "startBufferPosition",
                  "description": "Only include markers starting at this {Point} in buffer coordinates.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "endBufferPosition",
                  "description": "Only include markers ending at this {Point} in buffer coordinates.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "startScreenPosition",
                  "description": "Only include markers starting at this {Point} in screen coordinates.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "endScreenPosition",
                  "description": "Only include markers ending at this {Point} in screen coordinates.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "startsInBufferRange",
                  "description": "Only include markers starting inside this {Range} in buffer coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "endsInBufferRange",
                  "description": "Only include markers ending inside this {Range} in buffer coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "startsInScreenRange",
                  "description": "Only include markers starting inside this {Range} in screen coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "endsInScreenRange",
                  "description": "Only include markers ending inside this {Range} in screen coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "startBufferRow",
                  "description": "Only include markers starting at this row in buffer coordinates.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "endBufferRow",
                  "description": "Only include markers ending at this row in buffer coordinates.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "startScreenRow",
                  "description": "Only include markers starting at this row in screen coordinates.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "endScreenRow",
                  "description": "Only include markers ending at this row in screen coordinates.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "intersectsBufferRowRange",
                  "description": "Only include markers intersecting this {Array}  of `[startRow, endRow]` in buffer coordinates.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "intersectsScreenRowRange",
                  "description": "Only include markers intersecting this {Array}  of `[startRow, endRow]` in screen coordinates.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "containsBufferRange",
                  "description": "Only include markers containing this {Range} in buffer coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "containsBufferPosition",
                  "description": "Only include markers containing this {Point} in buffer coordinates.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "containedInBufferRange",
                  "description": "Only include markers contained in this {Range} in buffer coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "containedInScreenRange",
                  "description": "Only include markers contained in this {Range} in screen coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "intersectsBufferRange",
                  "description": "Only include markers intersecting this {Range} in buffer coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "intersectsScreenRange",
                  "description": "Only include markers intersecting this {Range} in screen coordinates.",
                  "type": "Range",
                  "isOptional": false
                }
              ],
              "name": "properties",
              "description": "An {Object} containing properties that each returned marker must satisfy. Markers can be associated with custom properties, which are compared with basic equality. In addition, several reserved properties can be used to filter markers based on their current range:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {DisplayMarker}s"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "*Experimental:* A container for a related set of markers at the\n{DisplayLayer} level. Wraps an underlying {MarkerLayer} on the {TextBuffer}.",
      "description": "*Experimental:* A container for a related set of markers at the\n{DisplayLayer} level. Wraps an underlying {MarkerLayer} on the {TextBuffer}.\n\nThis API is experimental and subject to change on any release. "
    },
    "Disposable": {
      "name": "Disposable",
      "superClass": null,
      "filename": "lib/disposable.js",
      "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/disposable.js#L3",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "isDisposable",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/disposable.js#L10",
          "visibility": "Public",
          "summary": "Ensure that `object` correctly implements the `Disposable`\ncontract.",
          "description": "Ensure that `object` correctly implements the `Disposable`\ncontract.",
          "arguments": [
            {
              "name": "object",
              "description": "An {Object} you want to perform the check against.",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether `object` is a valid `Disposable`."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/disposable.js#L22",
          "visibility": "Public",
          "summary": "Construct a Disposable",
          "description": "Construct a Disposable",
          "arguments": [
            {
              "name": "disposalAction",
              "description": "A {Function} to call when {::dispose} is called for the first time.",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "dispose",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/disposable.js#L32",
          "visibility": "Public",
          "summary": "Perform the disposal action, indicating that the resource associated\nwith this disposable is no longer needed.",
          "description": "Perform the disposal action, indicating that the resource associated\nwith this disposable is no longer needed.\n\nYou can call this method more than once, but the disposal action will only\nbe performed the first time."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "A handle to a resource that can be disposed. For example,\n{Emitter::on} returns disposables representing subscriptions.",
      "description": "A handle to a resource that can be disposed. For example,\n{Emitter::on} returns disposables representing subscriptions."
    },
    "Dock": {
      "name": "Dock",
      "superClass": null,
      "filename": "src/dock.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L21",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Pane Items",
          "description": ""
        },
        {
          "name": "Panes",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "activate",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L124",
          "visibility": "Extended",
          "summary": "Show the dock and focus its active {Pane}.",
          "description": "Show the dock and focus its active {Pane}."
        },
        {
          "name": "show",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L129",
          "visibility": "Extended",
          "summary": "Show the dock without focusing it.",
          "description": "Show the dock without focusing it."
        },
        {
          "name": "hide",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L135",
          "visibility": "Extended",
          "summary": "Hide the dock and activate the {WorkspaceCenter} if the dock was\nwas previously focused.",
          "description": "Hide the dock and activate the {WorkspaceCenter} if the dock was\nwas previously focused."
        },
        {
          "name": "toggle",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L141",
          "visibility": "Extended",
          "summary": "Toggle the dock's visibility without changing the {Workspace}'s\nactive pane container.",
          "description": "Toggle the dock's visibility without changing the {Workspace}'s\nactive pane container."
        },
        {
          "name": "isVisible",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L150",
          "visibility": "Extended",
          "summary": "Check if the dock is visible.",
          "description": "Check if the dock is visible.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "onDidChangeVisible",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L480",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the visibility of the dock changes.",
          "description": "Invoke the given callback when the visibility of the dock changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "visible",
                  "description": "{Boolean} Is the dock now visible?",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the visibility changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeVisible",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L490",
          "visibility": "Essential",
          "summary": "Invoke the given callback with the current and all future visibilities of the dock.",
          "description": "Invoke the given callback with the current and all future visibilities of the dock.",
          "arguments": [
            {
              "children": [
                {
                  "name": "visible",
                  "description": "{Boolean} Is the dock now visible?",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the visibility changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observePaneItems",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L503",
          "visibility": "Essential",
          "summary": "Invoke the given callback with all current and future panes items\nin the dock.",
          "description": "Invoke the given callback with all current and future panes items\nin the dock.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "An item that is present in {::getPaneItems} at the time of  subscription or that is added at some later time.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future pane items.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L518",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the active pane item changes.",
          "description": "Invoke the given callback when the active pane item changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method. Consider\n{::onDidStopChangingActivePaneItem} to delay operations until after changes\nstop occurring.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidStopChangingActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L536",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the active pane item stops\nchanging.",
          "description": "Invoke the given callback when the active pane item stops\nchanging.\n\nObservers are called asynchronously 100ms after the last active pane item\nchange. Handling changes here rather than in the synchronous\n{::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly\nchanging or closing tabs and ensures critical UI feedback, like changing the\nhighlighted tab, gets priority over work that can be done asynchronously.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item stopts changing.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L547",
          "visibility": "Essential",
          "summary": "Invoke the given callback with the current active pane item and\nwith all future active pane items in the dock.",
          "description": "Invoke the given callback with the current active pane item and\nwith all future active pane items in the dock.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The current active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L558",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane is added to the dock.",
          "description": "Invoke the given callback when a pane is added to the dock.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The added pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L570",
          "visibility": "Extended",
          "summary": "Invoke the given callback before a pane is destroyed in the\ndock.",
          "description": "Invoke the given callback before a pane is destroyed in the\ndock.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The pane to be destroyed.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before panes are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroyPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L581",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane is destroyed in the dock.",
          "description": "Invoke the given callback when a pane is destroyed in the dock.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The destroyed pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observePanes",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L593",
          "visibility": "Extended",
          "summary": "Invoke the given callback with all current and future panes in the\ndock.",
          "description": "Invoke the given callback with all current and future panes in the\ndock.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is present in {::getPanes} at the time of  subscription or that is added at some later time.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future panes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActivePane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L603",
          "visibility": "Extended",
          "summary": "Invoke the given callback when the active pane changes.",
          "description": "Invoke the given callback when the active pane changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is the current return value of {::getActivePane}.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActivePane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L615",
          "visibility": "Extended",
          "summary": "Invoke the given callback with the current active pane and when\nthe active pane changes.",
          "description": "Invoke the given callback with the current active pane and when\nthe active pane changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is the current return value of {::getActivePane}.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with the current and future active# panes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L628",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is added to the dock.",
          "description": "Invoke the given callback when a pane item is added to the dock.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The added pane item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the added item.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the added item in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when pane items are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L643",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.",
          "description": "Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The item to be destroyed.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the item to be destroyed.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the item to be destroyed in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before pane items are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroyPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L657",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is destroyed.",
          "description": "Invoke the given callback when a pane item is destroyed.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The destroyed item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the destroyed item.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the destroyed item in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when pane items are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeHovered",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L667",
          "visibility": "Extended",
          "summary": "Invoke the given callback when the hovered state of the dock changes.",
          "description": "Invoke the given callback when the hovered state of the dock changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "hovered",
                  "description": "{Boolean} Is the dock now hovered?",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the hovered state changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getPaneItems",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L678",
          "visibility": "Essential",
          "summary": "Get all pane items in the dock.",
          "description": "Get all pane items in the dock.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of items."
            }
          ]
        },
        {
          "name": "getActivePaneItem",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L685",
          "visibility": "Essential",
          "summary": "Get the active {Pane}'s active item.",
          "description": "Get the active {Pane}'s active item.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an pane item {Object}."
            }
          ]
        },
        {
          "name": "getPanes",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L720",
          "visibility": "Extended",
          "summary": "Get all panes in the dock.",
          "description": "Get all panes in the dock.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Pane}s."
            }
          ]
        },
        {
          "name": "getActivePane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L727",
          "visibility": "Extended",
          "summary": "Get the active {Pane}.",
          "description": "Get the active {Pane}.",
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns a {Pane}."
            }
          ]
        },
        {
          "name": "activateNextPane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L732",
          "visibility": "Extended",
          "summary": "Make the next pane active.",
          "description": "Make the next pane active."
        },
        {
          "name": "activatePreviousPane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/dock.js#L737",
          "visibility": "Extended",
          "summary": "Make the previous pane active.",
          "description": "Make the previous pane active."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A container at the edges of the editor window capable of holding items.\nYou should not create a Dock directly. Instead, access one of the three docks of the workspace\nvia {Workspace::getLeftDock}, {Workspace::getRightDock}, and {Workspace::getBottomDock}\nor add an item to a dock via {Workspace::open}.",
      "description": "A container at the edges of the editor window capable of holding items.\nYou should not create a Dock directly. Instead, access one of the three docks of the workspace\nvia {Workspace::getLeftDock}, {Workspace::getRightDock}, and {Workspace::getBottomDock}\nor add an item to a dock via {Workspace::open}."
    },
    "Emitter": {
      "name": "Emitter",
      "superClass": null,
      "filename": "lib/emitter.js",
      "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L31",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Event Emission",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L73",
          "visibility": "Public",
          "summary": "Construct an emitter.",
          "description": "Construct an emitter.\n\n```js\nthis.emitter = new Emitter()\n```"
        },
        {
          "name": "clear",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L79",
          "visibility": "Public",
          "summary": "Clear out any existing subscribers.",
          "description": "Clear out any existing subscribers."
        },
        {
          "name": "dispose",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L88",
          "visibility": "Public",
          "summary": "Unsubscribe all handlers.",
          "description": "Unsubscribe all handlers."
        },
        {
          "name": "on",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L107",
          "visibility": "Public",
          "summary": "Register the given handler function to be invoked whenever events by\nthe given name are emitted via {::emit}.",
          "description": "Register the given handler function to be invoked whenever events by\nthe given name are emitted via {::emit}.",
          "arguments": [
            {
              "name": "eventName",
              "description": "{String} naming the event that you want to invoke the handler when emitted.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "handler",
              "description": "{Function} to invoke when {::emit} is called with the given event name.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "once",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L152",
          "visibility": "Public",
          "summary": "Register the given handler function to be invoked the next time an\nevents with the given name is emitted via {::emit}.",
          "description": "Register the given handler function to be invoked the next time an\nevents with the given name is emitted via {::emit}.",
          "arguments": [
            {
              "name": "eventName",
              "description": "{String} naming the event that you want to invoke the handler when emitted.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "handler",
              "description": "{Function} to invoke when {::emit} is called with the given event name.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "preempt",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L183",
          "visibility": "Public",
          "summary": "Register the given handler function to be invoked *before* all\nother handlers existing at the time of subscription whenever events by the\ngiven name are emitted via {::emit}.",
          "description": "Register the given handler function to be invoked *before* all\nother handlers existing at the time of subscription whenever events by the\ngiven name are emitted via {::emit}.\n\nUse this method when you need to be the first to handle a given event. This\ncould be required when a data structure in a parent object needs to be\nupdated before third-party event handlers registered on a child object via a\npublic API are invoked. Your handler could itself be preempted via\nsubsequent calls to this method, but this can be controlled by keeping\nmethods based on `::preempt` private.",
          "arguments": [
            {
              "name": "eventName",
              "description": "{String} naming the event that you want to invoke the handler when emitted.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "handler",
              "description": "{Function} to invoke when {::emit} is called with the given event name.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "emit",
          "sectionName": "Event Emission",
          "srcUrl": "https://github.com/atom/event-kit/blob/v2.5.3/lib/emitter.js#L214",
          "visibility": "Public",
          "summary": "Invoke handlers registered via {::on} for the given event name.",
          "description": "Invoke handlers registered via {::on} for the given event name.",
          "arguments": [
            {
              "name": "eventName",
              "description": "The name of the event to emit. Handlers registered with {::on} for the same name will be invoked.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "value",
              "description": "Callbacks will be invoked with this value as an argument.",
              "type": null,
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Utility class to be used when implementing event-based APIs that\nallows for handlers registered via `::on` to be invoked with calls to\n`::emit`. Instances of this class are intended to be used internally by\nclasses that expose an event-based API.",
      "description": "Utility class to be used when implementing event-based APIs that\nallows for handlers registered via `::on` to be invoked with calls to\n`::emit`. Instances of this class are intended to be used internally by\nclasses that expose an event-based API.\n\nFor example:\n\n```js\nclass User {\n  constructor() {\n    this.emitter = new Emitter()\n  }\n\n  onDidChangeName(callback) {\n    this.emitter.on('did-change-name', callback)\n  }\n\n  setName(name) {\n    if (name !== this.name) {\n      this.name = name\n      this.emitter.emit('did-change-name', name)\n    }\n\n    return this.name\n  }\n}\n```"
    },
    "File": {
      "name": "File",
      "filename": "src/file.coffee",
      "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L17",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "File Metadata",
          "description": ""
        },
        {
          "name": "Managing Paths",
          "description": ""
        },
        {
          "name": "Traversing",
          "description": ""
        },
        {
          "name": "Reading and Writing",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L30",
          "visibility": "Public",
          "summary": "Configures a new File instance, no files are accessed.",
          "description": "Configures a new File instance, no files are accessed.",
          "arguments": [
            {
              "name": "filePath",
              "description": "A {String} containing the absolute path to the file",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "symlink",
              "description": "A {Boolean} indicating if the path is a symlink (default: false). ",
              "type": "Boolean",
              "isOptional": true
            }
          ]
        },
        {
          "name": "create",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L52",
          "visibility": "Public",
          "summary": "Creates the file on disk that corresponds to `::getPath()` if no\nsuch file already exists.",
          "description": "Creates the file on disk that corresponds to `::getPath()` if no\nsuch file already exists.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves once the file is created on disk. It\nresolves to a boolean value that is true if the file was created or false if\nit already existed."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L70",
          "visibility": "Public",
          "summary": "Invoke the given callback when the file's contents change.",
          "description": "Invoke the given callback when the file's contents change.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the file's contents change.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRename",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L79",
          "visibility": "Public",
          "summary": "Invoke the given callback when the file's path changes.",
          "description": "Invoke the given callback when the file's path changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the file's path changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDelete",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L88",
          "visibility": "Public",
          "summary": "Invoke the given callback when the file is deleted.",
          "description": "Invoke the given callback when the file is deleted.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the file is deleted.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillThrowWatchError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L101",
          "visibility": "Public",
          "summary": "Invoke the given callback when there is an error with the watch.\nWhen your callback has been invoked, the file will have unsubscribed from\nthe file watches.",
          "description": "Invoke the given callback when there is an error with the watch.\nWhen your callback has been invoked, the file will have unsubscribed from\nthe file watches.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "error",
                      "description": "{Object} the error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "handle",
                      "description": "{Function} call this to indicate you have handled the error. The error will not be thrown if this function is called. ",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "errorObject",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} callback",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "isFile",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L123",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always true."
            }
          ]
        },
        {
          "name": "isDirectory",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L126",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always false."
            }
          ]
        },
        {
          "name": "isSymbolicLink",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L129",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether or not this is a symbolic link"
            }
          ]
        },
        {
          "name": "exists",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L134",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a promise that resolves to a {Boolean}, true if the file\nexists, false otherwise."
            }
          ]
        },
        {
          "name": "existsSync",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L139",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, true if the file exists, false otherwise."
            }
          ]
        },
        {
          "name": "getDigest",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L145",
          "visibility": "Public",
          "summary": "Get the SHA-1 digest of this file",
          "description": "Get the SHA-1 digest of this file",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a promise that resolves to a {String}."
            }
          ]
        },
        {
          "name": "getDigestSync",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L154",
          "visibility": "Public",
          "summary": "Get the SHA-1 digest of this file",
          "description": "Get the SHA-1 digest of this file",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "setEncoding",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L164",
          "visibility": "Public",
          "summary": "Sets the file's character set encoding name.",
          "description": "Sets the file's character set encoding name.",
          "arguments": [
            {
              "name": "encoding",
              "description": "The {String} encoding to use (default: 'utf8') ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getEncoding",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L175",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} encoding name for this file (default: 'utf8')."
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L182",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} path for the file."
            }
          ]
        },
        {
          "name": "getRealPathSync",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L189",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns this file's completely resolved {String} path."
            }
          ]
        },
        {
          "name": "getRealPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L198",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a promise that resolves to the file's completely resolved {String} path."
            }
          ]
        },
        {
          "name": "getBaseName",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L210",
          "visibility": "Public",
          "summary": "Return the {String} filename without any directory information. ",
          "description": "Return the {String} filename without any directory information. "
        },
        {
          "name": "getParent",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L218",
          "visibility": "Public",
          "summary": "Return the {Directory} that contains this file. ",
          "description": "Return the {Directory} that contains this file. "
        },
        {
          "name": "read",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L254",
          "visibility": "Public",
          "summary": "Reads the contents of the file.",
          "description": "Reads the contents of the file.",
          "arguments": [
            {
              "name": "flushCache",
              "description": "A {Boolean} indicating whether to require a direct read or if a cached copy is acceptable.",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a promise that resolves to either a {String}, or null if the file does not exist."
            }
          ]
        },
        {
          "name": "createReadStream",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L281",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a stream to read the content of the file."
            },
            {
              "type": "ReadStream",
              "description": "Returns a {ReadStream} object."
            }
          ]
        },
        {
          "name": "write",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L294",
          "visibility": "Public",
          "summary": "Overwrites the file with the given text.",
          "description": "Overwrites the file with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "The {String} text to write to the underlying file.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the file has been written."
            }
          ]
        },
        {
          "name": "createWriteStream",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L305",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a stream to write content to the file."
            },
            {
              "type": "WriteStream",
              "description": "Returns a {WriteStream} object."
            }
          ]
        },
        {
          "name": "writeSync",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v8.1.1/src/file.coffee#L320",
          "visibility": "Public",
          "summary": "Overwrites the file with the given text.",
          "description": "Overwrites the file with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "The {String} text to write to the underlying file.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns undefined."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents an individual file that can be watched, read from, and\nwritten to. ",
      "description": "Represents an individual file that can be watched, read from, and\nwritten to. "
    },
    "GitRepository": {
      "name": "GitRepository",
      "superClass": null,
      "filename": "src/git-repository.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L41",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Repository Details",
          "description": ""
        },
        {
          "name": "Reading Status",
          "description": ""
        },
        {
          "name": "Retrieving Diffs",
          "description": ""
        },
        {
          "name": "Checking Out",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "open",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L64",
          "visibility": "Public",
          "summary": "Creates a new GitRepository instance.",
          "description": "Creates a new GitRepository instance.",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to the Git repository to open.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "refreshOnWindowFocus",
                  "description": "A {Boolean}, `true` to refresh the index and statuses when the window is focused.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An optional {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "GitRepository",
              "description": "Returns a {GitRepository} instance or `null` if the repository could not be opened."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L121",
          "visibility": "Public",
          "summary": "Destroy this {GitRepository} object.",
          "description": "Destroy this {GitRepository} object.\n\nThis destroys any tasks and subscriptions and releases the underlying\nlibgit2 repository handle. This method is idempotent."
        },
        {
          "name": "isDestroyed",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L137",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating if this repository has been destroyed."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L147",
          "visibility": "Public",
          "summary": "Invoke the given callback when this GitRepository's destroy() method\nis invoked.",
          "description": "Invoke the given callback when this GitRepository's destroy() method\nis invoked.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeStatus",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L166",
          "visibility": "Public",
          "summary": "Invoke the given callback when a specific file's status has\nchanged. When a file is updated, reloaded, etc, and the status changes, this\nwill be fired.",
          "description": "Invoke the given callback when a specific file's status has\nchanged. When a file is updated, reloaded, etc, and the status changes, this\nwill be fired.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "path",
                      "description": "{String} the old parameters the decoration used to have",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "pathStatus",
                      "description": "{Number} representing the status. This value can be passed to {::isStatusModified} or {::isStatusNew} to get more information.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeStatuses",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L178",
          "visibility": "Public",
          "summary": "Invoke the given callback when a multiple files' statuses have\nchanged. For example, on window focus, the status of all the paths in the\nrepo is checked. If any of them have changed, this will be fired. Call\n{::getPathStatus} to get the status for your path of choice.",
          "description": "Invoke the given callback when a multiple files' statuses have\nchanged. For example, on window focus, the status of all the paths in the\nrepo is checked. If any of them have changed, this will be fired. Call\n{::getPathStatus} to get the status for your path of choice.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getType",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L190",
          "visibility": "Public",
          "summary": "A {String} indicating the type of version control system used by\nthis repository.",
          "description": "A {String} indicating the type of version control system used by\nthis repository.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns `\"git\"`."
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L195",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} path of the repository."
            }
          ]
        },
        {
          "name": "getWorkingDirectory",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L203",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} working directory path of the repository."
            }
          ]
        },
        {
          "name": "isProjectAtRoot",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L209",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if at the root, false if in a subfolder of the\nrepository."
            }
          ]
        },
        {
          "name": "relativize",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L219",
          "visibility": "Public",
          "summary": "Makes a path relative to the repository's working directory.",
          "description": "Makes a path relative to the repository's working directory."
        },
        {
          "name": "hasBranch",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L224",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the given branch exists."
            }
          ]
        },
        {
          "name": "getShortHead",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L238",
          "visibility": "Public",
          "summary": "Retrieves a shortened version of the HEAD reference value.",
          "description": "Retrieves a shortened version of the HEAD reference value.\n\nThis removes the leading segments of `refs/heads`, `refs/tags`, or\n`refs/remotes`.  It also shortens the SHA-1 of a detached `HEAD` to 7\ncharacters.",
          "arguments": [
            {
              "name": "path",
              "description": "An optional {String} path in the repository to get this information for, only needed if the repository contains submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "isSubmodule",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L247",
          "visibility": "Public",
          "summary": "Is the given path a submodule in the repository?",
          "description": "Is the given path a submodule in the repository?",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getAheadBehindCount",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L268",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "reference",
              "description": "The {String} branch reference name.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "path",
              "description": "The {String} path in the repository to get this information for, only needed if the repository contains submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the number of commits behind the current branch is from the\nits upstream remote branch."
            }
          ]
        },
        {
          "name": "getCachedUpstreamAheadBehindCount",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L281",
          "visibility": "Public",
          "summary": "Get the cached ahead/behind commit counts for the current branch's\nupstream branch.",
          "description": "Get the cached ahead/behind commit counts for the current branch's\nupstream branch.",
          "arguments": [
            {
              "name": "path",
              "description": "An optional {String} path in the repository to get this information for, only needed if the repository has submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with the following keys:\n\n* `ahead`  The {Number} of commits ahead.\n* `behind` The {Number} of commits behind."
            }
          ]
        },
        {
          "name": "getConfigValue",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L290",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "key",
              "description": "The {String} key for the configuration to lookup.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "path",
              "description": "An optional {String} path in the repository to get this information for, only needed if the repository has submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the git configuration value specified by the key."
            }
          ]
        },
        {
          "name": "getOriginURL",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L298",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "path",
              "description": "{String} path in the repository to get this information for, only needed if the repository has submodules.",
              "type": "String",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the origin url of the repository."
            }
          ]
        },
        {
          "name": "getUpstreamBranch",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L309",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "path",
              "description": "An optional {String} path in the repo to get this information for, only needed if the repository contains submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the upstream branch for the current HEAD, or null if there\nis no upstream branch for the current HEAD."
            },
            {
              "type": "String",
              "description": "Returns a {String} branch name such as `refs/remotes/origin/master`."
            }
          ]
        },
        {
          "name": "getReferences",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L322",
          "visibility": "Public",
          "summary": "Gets all the local and remote references.",
          "description": "Gets all the local and remote references.",
          "arguments": [
            {
              "name": "path",
              "description": "An optional {String} path in the repository to get this information for, only needed if the repository has submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with the following keys:\n\n* `heads`   An {Array} of head reference names.\n* `remotes` An {Array} of remote reference names.\n* `tags`    An {Array} of tag reference names."
            }
          ]
        },
        {
          "name": "getReferenceTarget",
          "sectionName": "Repository Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L331",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "reference",
              "description": "The {String} reference to get the target of.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "path",
              "description": "An optional {String} path in the repo to get the reference target for. Only needed if the repository contains submodules.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the current {String} SHA for the given reference."
            }
          ]
        },
        {
          "name": "isPathModified",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L344",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the given path is modified."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that's true if the `path` is modified."
            }
          ]
        },
        {
          "name": "isPathNew",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L353",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the given path is new."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that's true if the `path` is new."
            }
          ]
        },
        {
          "name": "isPathIgnored",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L362",
          "visibility": "Public",
          "summary": "Is the given path ignored?",
          "description": "Is the given path ignored?",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that's true if the `path` is ignored."
            }
          ]
        },
        {
          "name": "getDirectoryStatus",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L372",
          "visibility": "Public",
          "summary": "Get the status of a directory in the repository's working directory.",
          "description": "Get the status of a directory in the repository's working directory.",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the status. This value can be passed to\n{::isStatusModified} or {::isStatusNew} to get more information."
            }
          ]
        },
        {
          "name": "getPathStatus",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L388",
          "visibility": "Public",
          "summary": "Get the status of a single path in the repository.",
          "description": "Get the status of a single path in the repository.",
          "arguments": [
            {
              "name": "path",
              "description": "A {String} repository-relative path.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the status. This value can be passed to\n{::isStatusModified} or {::isStatusNew} to get more information."
            }
          ]
        },
        {
          "name": "getCachedPathStatus",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L411",
          "visibility": "Public",
          "summary": "Get the cached status for the given path.",
          "description": "Get the cached status for the given path.",
          "arguments": [
            {
              "name": "path",
              "description": "A {String} path in the repository, relative or absolute.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a status {Number} or null if the path is not in the cache."
            }
          ]
        },
        {
          "name": "isStatusModified",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L420",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "status",
              "description": "A {Number} representing the status.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the given status indicates modification."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that's true if the `status` indicates modification."
            }
          ]
        },
        {
          "name": "isStatusNew",
          "sectionName": "Reading Status",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L429",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "status",
              "description": "A {Number} representing the status.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the given status indicates a new path."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that's true if the `status` indicates a new path."
            }
          ]
        },
        {
          "name": "getDiffStats",
          "sectionName": "Retrieving Diffs",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L447",
          "visibility": "Public",
          "summary": "Retrieves the number of lines added and removed to a path.",
          "description": "Retrieves the number of lines added and removed to a path.\n\nThis compares the working directory contents of the path to the `HEAD`\nversion.",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with the following keys:\n\n* `added` The {Number} of added lines.\n* `deleted` The {Number} of deleted lines."
            }
          ]
        },
        {
          "name": "getLineDiffs",
          "sectionName": "Retrieving Diffs",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L463",
          "visibility": "Public",
          "summary": "Retrieves the line diffs comparing the `HEAD` version of the given\npath and the given text.",
          "description": "Retrieves the line diffs comparing the `HEAD` version of the given\npath and the given text.",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path relative to the repository.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "text",
              "description": "The {String} to compare against the `HEAD` contents",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of hunk {Object}s with the following keys:\n\n* `oldStart` The line {Number} of the old hunk.\n* `newStart` The line {Number} of the new hunk.\n* `oldLines` The {Number} of lines in the old hunk.\n* `newLines` The {Number} of lines in the new hunk"
            }
          ]
        },
        {
          "name": "checkoutHead",
          "sectionName": "Checking Out",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L488",
          "visibility": "Public",
          "summary": "Restore the contents of a path in the working directory and index\nto the version at `HEAD`.",
          "description": "Restore the contents of a path in the working directory and index\nto the version at `HEAD`.\n\nThis is essentially the same as running:\n\n```sh\n  git reset HEAD -- <path>\n  git checkout HEAD -- <path>\n```",
          "arguments": [
            {
              "name": "path",
              "description": "The {String} path to checkout.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that's true if the method was successful."
            }
          ]
        },
        {
          "name": "checkoutReference",
          "sectionName": "Checking Out",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/git-repository.js#L502",
          "visibility": "Public",
          "summary": "Checks out a branch in your repository.",
          "description": "Checks out a branch in your repository.",
          "arguments": [
            {
              "name": "reference",
              "description": "The {String} reference to checkout.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "create",
              "description": "A {Boolean} value which, if true creates the new reference if it doesn't exist.",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a Boolean that's true if the method was successful."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents the underlying git operations performed by Atom.",
      "description": "Represents the underlying git operations performed by Atom.\n\nThis class shouldn't be instantiated directly but instead by accessing the\n`atom.project` global and calling `getRepositories()`. Note that this will\nonly be available when the project is backed by a Git repository.\n\nThis class handles submodules automatically by taking a `path` argument to many\nof the methods.  This `path` argument will determine which underlying\nrepository is used.\n\nFor a repository with submodules this would have the following outcome:\n\n```coffee\nrepo = atom.project.getRepositories()[0]\nrepo.getShortHead() # 'master'\nrepo.getShortHead('vendor/path/to/a/submodule') # 'dead1234'\n```",
      "examples": [
        {
          "description": "### Logging the URL of the origin remote",
          "lang": "coffee",
          "code": "git = atom.project.getRepositories()[0]\nconsole.log git.getOriginURL()",
          "raw": "```coffee\ngit = atom.project.getRepositories()[0]\nconsole.log git.getOriginURL()\n```"
        },
        {
          "description": "### Requiring in packages",
          "lang": "coffee",
          "code": "{GitRepository} = require 'atom'",
          "raw": "```coffee\n{GitRepository} = require 'atom'\n```"
        }
      ]
    },
    "Grammar": {
      "name": "Grammar",
      "filename": "src/grammar.coffee",
      "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar.coffee#L19",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Tokenizing",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidUpdate",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar.coffee#L64",
          "visibility": "Public",
          "summary": "Invoke the given callback when this grammar is updated due to a\ngrammar it depends on being added or removed from the registry.",
          "description": "Invoke the given callback when this grammar is updated due to a\ngrammar it depends on being added or removed from the registry.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to call when this grammar is updated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "tokenizeLines",
          "sectionName": "Tokenizing",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar.coffee#L76",
          "visibility": "Public",
          "summary": "Tokenize all lines in the given text.",
          "description": "Tokenize all lines in the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} containing one or more lines.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of token arrays for each line tokenized."
            }
          ]
        },
        {
          "name": "tokenizeLine",
          "sectionName": "Tokenizing",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar.coffee#L107",
          "visibility": "Public",
          "summary": "Tokenize the line of text.",
          "description": "Tokenize the line of text.",
          "arguments": [
            {
              "name": "line",
              "description": "A {String} of text to tokenize.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "ruleStack",
              "description": "An optional {Array} of rules previously returned from this method. This should be null when tokenizing the first line in the file.",
              "type": "Array",
              "isOptional": false
            },
            {
              "name": "firstLine",
              "description": "A optional {Boolean} denoting whether this is the first line in the file which defaults to `false`. This should be `true` when tokenizing the first line in the file.",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} containing the following properties:\n\n* `line` The {String} of text that was tokenized.\n* `tags` An {Array} of integer scope ids and strings. Positive ids\n  indicate the beginning of a scope, and negative tags indicate the end.\n  To resolve ids to scope names, call {GrammarRegistry::scopeForId} with the\n  absolute value of the id.\n* `tokens` This is a dynamic property. Invoking it will incur additional\n  overhead, but will automatically translate the `tags` into token objects\n  with `value` and `scopes` properties.\n* `ruleStack` An {Array} of rules representing the tokenized state at the\n  end of the line. These should be passed back into this method when\n  tokenizing the next line in the file."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Grammar that tokenizes lines of text.",
      "description": "Grammar that tokenizes lines of text.\n\nThis class should not be instantiated directly but instead obtained from\na {GrammarRegistry} by calling {GrammarRegistry::loadGrammar}. "
    },
    "GrammarRegistry": {
      "name": "GrammarRegistry",
      "filename": "src/grammar-registry.coffee",
      "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L11",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Managing Grammars",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidAddGrammar",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L39",
          "visibility": "Public",
          "summary": "Invoke the given callback when a grammar is added to the registry.",
          "description": "Invoke the given callback when a grammar is added to the registry.",
          "arguments": [
            {
              "children": [
                {
                  "name": "grammar",
                  "description": "{Grammar} that was added.",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when a grammar is added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidUpdateGrammar",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L49",
          "visibility": "Public",
          "summary": "Invoke the given callback when a grammar is updated due to a grammar\nit depends on being added or removed from the registry.",
          "description": "Invoke the given callback when a grammar is updated due to a grammar\nit depends on being added or removed from the registry.",
          "arguments": [
            {
              "children": [
                {
                  "name": "grammar",
                  "description": "{Grammar} that was updated.",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when a grammar is updated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRemoveGrammar",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L58",
          "visibility": "Public",
          "summary": "Invoke the given callback when a grammar is removed from the registry.",
          "description": "Invoke the given callback when a grammar is removed from the registry.",
          "arguments": [
            {
              "children": [
                {
                  "name": "grammar",
                  "description": "{Grammar} that was removed.",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when a grammar is removed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getGrammars",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L68",
          "visibility": "Public",
          "summary": "Get all the grammars in this registry.",
          "description": "Get all the grammars in this registry.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns a non-empty {Array} of {Grammar} instances."
            }
          ]
        },
        {
          "name": "grammarForScopeName",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L76",
          "visibility": "Public",
          "summary": "Get a grammar with the given scope name.",
          "description": "Get a grammar with the given scope name.",
          "arguments": [
            {
              "name": "scopeName",
              "description": "A {String} such as `\"source.js\"`.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Grammar",
              "description": "Returns a {Grammar} or undefined."
            }
          ]
        },
        {
          "name": "addGrammar",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L88",
          "visibility": "Public",
          "summary": "Add a grammar to this registry.",
          "description": "Add a grammar to this registry.\n\nA 'grammar-added' event is emitted after the grammar is added.",
          "arguments": [
            {
              "name": "grammar",
              "description": "The {Grammar} to add. This should be a value previously returned from {::readGrammar} or {::readGrammarSync}.",
              "type": "Grammar",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\ngrammar."
            }
          ]
        },
        {
          "name": "removeGrammarForScopeName",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L110",
          "visibility": "Public",
          "summary": "Remove the grammar with the given scope name.",
          "description": "Remove the grammar with the given scope name.",
          "arguments": [
            {
              "name": "scopeName",
              "description": "A {String} such as `\"source.js\"`.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Grammar",
              "description": "Returns the removed {Grammar} or undefined."
            }
          ]
        },
        {
          "name": "readGrammarSync",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L120",
          "visibility": "Public",
          "summary": "Read a grammar synchronously but don't add it to the registry.",
          "description": "Read a grammar synchronously but don't add it to the registry.",
          "arguments": [
            {
              "name": "grammarPath",
              "description": "A {String} absolute file path to a grammar file.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Grammar",
              "description": "Returns a {Grammar}."
            }
          ]
        },
        {
          "name": "readGrammar",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L135",
          "visibility": "Public",
          "summary": "Read a grammar asynchronously but don't add it to the registry.",
          "description": "Read a grammar asynchronously but don't add it to the registry.",
          "arguments": [
            {
              "name": "grammarPath",
              "description": "A {String} absolute file path to a grammar file.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "error",
                  "description": "An {Error}, may be null.",
                  "type": "Error",
                  "isOptional": false
                },
                {
                  "name": "grammar",
                  "description": "A {Grammar} or null if an error occured.",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to call when read with the following arguments:",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns undefined."
            }
          ]
        },
        {
          "name": "loadGrammarSync",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L152",
          "visibility": "Public",
          "summary": "Read a grammar synchronously and add it to this registry.",
          "description": "Read a grammar synchronously and add it to this registry.",
          "arguments": [
            {
              "name": "grammarPath",
              "description": "A {String} absolute file path to a grammar file.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Grammar",
              "description": "Returns a {Grammar}."
            }
          ]
        },
        {
          "name": "loadGrammar",
          "sectionName": "Managing Grammars",
          "srcUrl": "https://github.com/atom/first-mate/blob/v7.4.1/src/grammar-registry.coffee#L165",
          "visibility": "Public",
          "summary": "Read a grammar asynchronously and add it to the registry.",
          "description": "Read a grammar asynchronously and add it to the registry.",
          "arguments": [
            {
              "name": "grammarPath",
              "description": "A {String} absolute file path to a grammar file.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "error",
                  "description": "An {Error}, may be null.",
                  "type": "Error",
                  "isOptional": false
                },
                {
                  "name": "grammar",
                  "description": "A {Grammar} or null if an error occured.",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to call when loaded with the following arguments:",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns undefined."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Registry containing one or more grammars. ",
      "description": "Registry containing one or more grammars. "
    },
    "Gutter": {
      "name": "Gutter",
      "superClass": null,
      "filename": "src/gutter.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L8",
      "sections": [
        {
          "name": "Gutter Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Visibility",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": "Gutter Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L30",
          "visibility": "Essential",
          "summary": "Destroys the gutter.",
          "description": "Destroys the gutter."
        },
        {
          "name": "onDidChangeVisible",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L50",
          "visibility": "Essential",
          "summary": "Calls your `callback` when the gutter's visibility changes.",
          "description": "Calls your `callback` when the gutter's visibility changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "gutter",
                  "description": "The gutter whose visibility changed.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L59",
          "visibility": "Essential",
          "summary": "Calls your `callback` when the gutter is destroyed.",
          "description": "Calls your `callback` when the gutter is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "hide",
          "sectionName": "Visibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L68",
          "visibility": "Essential",
          "summary": "Hide the gutter.",
          "description": "Hide the gutter."
        },
        {
          "name": "show",
          "sectionName": "Visibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L77",
          "visibility": "Essential",
          "summary": "Show the gutter.",
          "description": "Show the gutter."
        },
        {
          "name": "isVisible",
          "sectionName": "Visibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L88",
          "visibility": "Essential",
          "summary": "Determine whether the gutter is visible.",
          "description": "Determine whether the gutter is visible.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "decorateMarker",
          "sectionName": "Visibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/gutter.js#L106",
          "visibility": "Essential",
          "summary": "Add a decoration that tracks a {DisplayMarker}. When the marker moves,\nis invalidated, or is destroyed, the decoration will be updated to reflect\nthe marker's state.",
          "description": "Add a decoration that tracks a {DisplayMarker}. When the marker moves,\nis invalidated, or is destroyed, the decoration will be updated to reflect\nthe marker's state.",
          "arguments": [
            {
              "name": "marker",
              "description": "A {DisplayMarker} you want this decoration to follow.",
              "type": "DisplayMarker",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "type",
                  "description": "__Caveat__: set to `'line-number'` if this is the line-number gutter, `'gutter'` otherwise. This cannot be overridden.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "decorationParams",
              "description": "An {Object} representing the decoration. It is passed to {TextEditor::decorateMarker} as its `decorationParams` and so supports all options documented there.",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Decoration",
              "description": "Returns a {Decoration} object"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents a gutter within a {TextEditor}.",
      "description": "Represents a gutter within a {TextEditor}.\n\nSee {TextEditor::addGutter} for information on creating a gutter."
    },
    "HistoryManager": {
      "name": "HistoryManager",
      "superClass": null,
      "filename": "src/history-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/history-manager.js#L8",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "getProjects",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/history-manager.js#L33",
          "visibility": "Public",
          "summary": "Obtain a list of previously opened projects.",
          "description": "Obtain a list of previously opened projects.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {HistoryProject} objects, most recent first."
            }
          ]
        },
        {
          "name": "clearProjects",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/history-manager.js#L44",
          "visibility": "Public",
          "summary": "Clear all projects from the history.",
          "description": "Clear all projects from the history.\n\nNote: This is not a privacy function - other traces will still exist,\ne.g. window state.\n\nReturn a {Promise} that resolves when the history has been successfully\ncleared."
        },
        {
          "name": "onDidChangeProjects",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/history-manager.js#L55",
          "visibility": "Public",
          "summary": "Invoke the given callback when the list of projects changes.",
          "description": "Invoke the given callback when the list of projects changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "History manager for remembering which projects have been opened.",
      "description": "History manager for remembering which projects have been opened.\n\nAn instance of this class is always available as the `atom.history` global.\n\nThe project history is used to enable the 'Reopen Project' menu."
    },
    "KeymapManager": {
      "name": "KeymapManager",
      "filename": "src/keymap-manager.coffee",
      "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L66",
      "sections": [
        {
          "name": "Class Methods",
          "description": ""
        },
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Adding and Removing Bindings",
          "description": ""
        },
        {
          "name": "Accessing Bindings",
          "description": ""
        },
        {
          "name": "Managing Keymap Files",
          "description": ""
        },
        {
          "name": "Managing Keyboard Events",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "buildKeydownEvent",
          "sectionName": "Class Methods",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L83",
          "visibility": "Public",
          "summary": "Create a keydown DOM event for testing purposes.",
          "description": "Create a keydown DOM event for testing purposes.",
          "arguments": [
            {
              "name": "key",
              "description": "The key or keyIdentifier of the event. For example, `'a'`, `'1'`, `'escape'`, `'backspace'`, etc.",
              "type": null,
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "ctrl",
                  "description": "A {Boolean} indicating the ctrl modifier key",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "alt",
                  "description": "A {Boolean} indicating the alt modifier key",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "shift",
                  "description": "A {Boolean} indicating the shift modifier key",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "cmd",
                  "description": "A {Boolean} indicating the cmd modifier key",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "which",
                  "description": "A {Number} indicating `which` value of the event. See the docs for KeyboardEvent for more information.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "target",
                  "description": "The target element of the event. ",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} containing any of the following:",
              "type": "Object",
              "isOptional": true
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L112",
          "visibility": "Public",
          "summary": "Create a new KeymapManager.",
          "description": "Create a new KeymapManager.",
          "arguments": [
            {
              "children": [
                {
                  "name": "defaultTarget",
                  "description": "This will be used as the target of events whose target is `document.body` to allow for a catch-all element when nothing is focused. ",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} containing properties to assign to the keymap.  You can pass custom properties to be used by extension methods. The following properties are also supported:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "clear",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L120",
          "visibility": "Public",
          "summary": "Clear all registered key bindings and enqueued keystrokes. For use\nin tests. ",
          "description": "Clear all registered key bindings and enqueued keystrokes. For use\nin tests. "
        },
        {
          "name": "destroy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L128",
          "visibility": "Public",
          "summary": "Unwatch all watched paths. ",
          "description": "Unwatch all watched paths. "
        },
        {
          "name": "onDidMatchBinding",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L149",
          "visibility": "Public",
          "summary": "Invoke the given callback when one or more keystrokes completely\nmatch a key binding.",
          "description": "Invoke the given callback when one or more keystrokes completely\nmatch a key binding.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "keystrokes",
                      "description": "{String} of keystrokes that matched the binding.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "binding",
                      "description": "{KeyBinding} that the keystrokes matched.",
                      "type": "KeyBinding",
                      "isOptional": false
                    },
                    {
                      "name": "keyboardEventTarget",
                      "description": "DOM element that was the target of the most  recent keyboard event.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when keystrokes match a binding.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidPartiallyMatchBindings",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L165",
          "visibility": "Public",
          "summary": "Invoke the given callback when one or more keystrokes partially\nmatch a binding.",
          "description": "Invoke the given callback when one or more keystrokes partially\nmatch a binding.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "keystrokes",
                      "description": "{String} of keystrokes that matched the binding.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "partiallyMatchedBindings",
                      "description": "{KeyBinding}s that the keystrokes partially matched.",
                      "type": "KeyBinding",
                      "isOptional": false
                    },
                    {
                      "name": "keyboardEventTarget",
                      "description": "DOM element that was the target of the most recent keyboard event.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when keystrokes partially match a binding.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidFailToMatchBinding",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L179",
          "visibility": "Public",
          "summary": "Invoke the given callback when one or more keystrokes fail to match\nany bindings.",
          "description": "Invoke the given callback when one or more keystrokes fail to match\nany bindings.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "keystrokes",
                      "description": "{String} of keystrokes that matched the binding.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "keyboardEventTarget",
                      "description": "DOM element that was the target of the most  recent keyboard event.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when keystrokes fail to match any bindings.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidFailToReadFile",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L210",
          "visibility": "Public",
          "summary": "Invoke the given callback when a keymap file not able to be loaded.",
          "description": "Invoke the given callback when a keymap file not able to be loaded.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "message",
                      "description": "{String} the error message.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "stack",
                      "description": "{String} the error stack trace.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "error",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when a keymap file is unloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "build",
          "sectionName": "Adding and Removing Bindings",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L225",
          "visibility": "Extended",
          "summary": "Construct {KeyBinding}s from an object grouping them by CSS selector.",
          "description": "Construct {KeyBinding}s from an object grouping them by CSS selector.",
          "arguments": [
            {
              "name": "source",
              "description": "A {String} (usually a path) uniquely identifying the given bindings so they can be removed later.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "bindings",
              "description": "An {Object} whose top-level keys point at sub-objects mapping keystroke patterns to commands.",
              "type": "Object",
              "isOptional": false
            },
            {
              "name": "priority",
              "description": "A {Number} used to sort keybindings which have the same specificity. Defaults to `0`. ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "add",
          "sectionName": "Adding and Removing Bindings",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L258",
          "visibility": "Public",
          "summary": "Add sets of key bindings grouped by CSS selector.",
          "description": "Add sets of key bindings grouped by CSS selector.",
          "arguments": [
            {
              "name": "source",
              "description": "A {String} (usually a path) uniquely identifying the given bindings so they can be removed later.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "bindings",
              "description": "An {Object} whose top-level keys point at sub-objects mapping keystroke patterns to commands.",
              "type": "Object",
              "isOptional": false
            },
            {
              "name": "priority",
              "description": "A {Number} used to sort keybindings which have the same specificity. Defaults to `0`. ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getKeyBindings",
          "sectionName": "Accessing Bindings",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L278",
          "visibility": "Public",
          "summary": "Get all current key bindings.",
          "description": "Get all current key bindings.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {KeyBinding}s."
            }
          ]
        },
        {
          "name": "findKeyBindings",
          "sectionName": "Accessing Bindings",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L293",
          "visibility": "Public",
          "summary": "Get the key bindings for a given command and optional target.",
          "description": "Get the key bindings for a given command and optional target.",
          "arguments": [
            {
              "children": [
                {
                  "name": "keystrokes",
                  "description": "A {String} representing one or more keystrokes, such as 'ctrl-x ctrl-s'",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "command",
                  "description": "A {String} representing the name of a command, such as 'editor:backspace'",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "target",
                  "description": "An optional DOM element constraining the search. If this parameter is supplied, the call will only return bindings that can be invoked by a KeyboardEvent originating from the target element.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "An {Object} whose keys constrain the binding search:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of key bindings."
            }
          ]
        },
        {
          "name": "loadKeymap",
          "sectionName": "Managing Keymap Files",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L330",
          "visibility": "Public",
          "summary": "Load the key bindings from the given path.",
          "description": "Load the key bindings from the given path.",
          "arguments": [
            {
              "name": "path",
              "description": "A {String} containing a path to a file or a directory. If the path is a directory, all files inside it will be loaded.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "watch",
                  "description": "If `true`, the keymap will also reload the file at the given path whenever it changes. This option cannot be used with directory paths.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "priority",
                  "description": "A {Number} used to sort keybindings which have the same specificity. ",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} containing the following optional keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "watchKeymap",
          "sectionName": "Managing Keymap Files",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L353",
          "visibility": "Public",
          "summary": "Cause the keymap to reload the key bindings file at the given path\nwhenever it changes.",
          "description": "Cause the keymap to reload the key bindings file at the given path\nwhenever it changes.\n\nThis method doesn't perform the initial load of the key bindings file. If\nthat's what you're looking for, call {::loadKeymap} with `watch: true`.",
          "arguments": [
            {
              "name": "path",
              "description": "A {String} containing a path to a file or a directory. If the path is a directory, all files inside it will be loaded.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "priority",
                  "description": "A {Number} used to sort keybindings which have the same specificity. ",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} containing the following optional keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "handleKeyboardEvent",
          "sectionName": "Managing Keyboard Events",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L425",
          "visibility": "Public",
          "summary": "Dispatch a custom event associated with the matching key binding for\nthe given `KeyboardEvent` if one can be found.",
          "description": "Dispatch a custom event associated with the matching key binding for\nthe given `KeyboardEvent` if one can be found.\n\nIf a matching binding is found on the event's target or one of its\nancestors, `.preventDefault()` is called on the keyboard event and the\nbinding's command is emitted as a custom event on the matching element.\n\nIf the matching binding's command is 'native!', the method will terminate\nwithout calling `.preventDefault()` on the keyboard event, allowing the\nbrowser to handle it as normal.\n\nIf the matching binding's command is 'unset!', the search will continue from\nthe current element's parent.\n\nIf the matching binding's command is 'abort!', the search will terminate\nwithout dispatching a command event.\n\nIf the event's target is `document.body`, it will be treated as if its\ntarget is `.defaultTarget` if that property is assigned on the keymap.",
          "arguments": [
            {
              "name": "event",
              "description": "A `KeyboardEvent` of type 'keydown' ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "keystrokeForKeyboardEvent",
          "sectionName": "Managing Keyboard Events",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L655",
          "visibility": "Public",
          "summary": "Translate a keydown event to a keystroke string.",
          "description": "Translate a keydown event to a keystroke string.",
          "arguments": [
            {
              "name": "event",
              "description": "A `KeyboardEvent` of type 'keydown'",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} describing the keystroke."
            }
          ]
        },
        {
          "name": "addKeystrokeResolver",
          "sectionName": "Managing Keyboard Events",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L676",
          "visibility": "Public",
          "summary": "Customize translation of raw keyboard events to keystroke strings.\nThis API is useful for working around Chrome bugs or changing how Atom\nresolves certain key combinations. If multiple resolvers are installed,\nthe most recently-added resolver returning a string for a given keystroke\ntakes precedence.",
          "description": "Customize translation of raw keyboard events to keystroke strings.\nThis API is useful for working around Chrome bugs or changing how Atom\nresolves certain key combinations. If multiple resolvers are installed,\nthe most recently-added resolver returning a string for a given keystroke\ntakes precedence.",
          "arguments": [
            {
              "children": [
                {
                  "name": "keystroke",
                  "description": "The currently resolved keystroke string. If your function returns a falsy value, this is how Atom will resolve your keystroke.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "event",
                  "description": "The raw DOM 3 `KeyboardEvent` being resolved. See the DOM API documentation for more details.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "layoutName",
                  "description": "The OS-specific name of the current keyboard layout.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "keymap",
                  "description": "An object mapping DOM 3 `KeyboardEvent.code` values to objects with the typed character for that key in each modifier state, based on the current operating system layout.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "resolver",
              "description": "A {Function} that returns a keystroke {String} and is called  with an object containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} that removes the added resolver."
            }
          ]
        },
        {
          "name": "getPartialMatchTimeout",
          "sectionName": "Managing Keyboard Events",
          "srcUrl": "https://github.com/atom/atom-keymap/blob/v8.2.14/src/keymap-manager.coffee#L686",
          "visibility": "Public",
          "summary": "Get the number of milliseconds allowed before pending states caused\nby partial matches of multi-keystroke bindings are terminated.",
          "description": "Get the number of milliseconds allowed before pending states caused\nby partial matches of multi-keystroke bindings are terminated.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Allows commands to be associated with keystrokes in a\ncontext-sensitive way. In Atom, you can access a global instance of this\nobject via `atom.keymaps`.",
      "description": "Allows commands to be associated with keystrokes in a\ncontext-sensitive way. In Atom, you can access a global instance of this\nobject via `atom.keymaps`.\n\nKey bindings are plain JavaScript objects containing **CSS selectors** as\ntheir top level keys, then **keystroke patterns** mapped to commands.\n\n```cson\n'.workspace':\n  'ctrl-l': 'package:do-something'\n  'ctrl-z': 'package:do-something-else'\n'.mini.editor':\n  'enter': 'core:confirm'\n```\n\nWhen a keystroke sequence matches a binding in a given context, a custom DOM\nevent with a type based on the command is dispatched on the target of the\nkeyboard event.\n\nTo match a keystroke sequence, the keymap starts at the target element for the\nkeyboard event. It looks for key bindings associated with selectors that match\nthe target element. If multiple match, the most specific is selected. If there\nis a tie in specificity, the most recently added binding wins. If no bindings\nare found for the events target, the search is repeated again for the target's\nparent node and so on recursively until a binding is found or we traverse off\nthe top of the document.\n\nWhen a binding is found, its command event is always dispatched on the\noriginal target of the keyboard event, even if the matching element is higher\nup in the DOM. In addition, `.preventDefault()` is called on the keyboard\nevent to prevent the browser from taking action. `.preventDefault` is only\ncalled if a matching binding is found.\n\nCommand event objects have a non-standard method called `.abortKeyBinding()`.\nIf your command handler is invoked but you programmatically determine that no\naction can be taken and you want to allow other bindings to be matched, call\n`.abortKeyBinding()` on the event object. An example of where this is useful\nis binding snippet expansion to `tab`. If `snippets:expand` is invoked when\nthe cursor does not follow a valid snippet prefix, we abort the binding and\nallow `tab` to be handled by the default handler, which inserts whitespace.\n\nMulti-keystroke bindings are possible. If a sequence of one or more keystrokes\n*partially* matches a multi-keystroke binding, the keymap enters a pending\nstate. The pending state is terminated on the next keystroke, or after\n{::getPartialMatchTimeout} milliseconds has elapsed. When the pending state is\nterminated via a timeout or a keystroke that leads to no matches, the longest\nambiguous bindings that caused the pending state are temporarily disabled and\nthe previous keystrokes are replayed. If there is ambiguity again during the\nreplay, the next longest bindings are disabled and the keystrokes are replayed\nagain. "
    },
    "LayerDecoration": {
      "name": "LayerDecoration",
      "filename": "src/layer-decoration.coffee",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/layer-decoration.coffee#L7",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/layer-decoration.coffee#L15",
          "visibility": "Essential",
          "summary": "Destroys the decoration. ",
          "description": "Destroys the decoration. "
        },
        {
          "name": "isDestroyed",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/layer-decoration.coffee#L25",
          "visibility": "Essential",
          "summary": "Determine whether this decoration is destroyed.",
          "description": "Determine whether this decoration is destroyed.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getProperties",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/layer-decoration.coffee#L34",
          "visibility": "Essential",
          "summary": "Get this decoration's properties.",
          "description": "Get this decoration's properties.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object}."
            }
          ]
        },
        {
          "name": "setProperties",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/layer-decoration.coffee#L42",
          "visibility": "Essential",
          "summary": "Set this decoration's properties.",
          "description": "Set this decoration's properties.",
          "arguments": [
            {
              "name": "newProperties",
              "description": "See {TextEditor::decorateMarker} for more information on the properties. The `type` of `gutter` and `overlay` are not supported on layer decorations. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "setPropertiesForMarker",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/layer-decoration.coffee#L53",
          "visibility": "Essential",
          "summary": "Override the decoration properties for a specific marker.",
          "description": "Override the decoration properties for a specific marker.",
          "arguments": [
            {
              "name": "marker",
              "description": "The {DisplayMarker} or {Marker} for which to override properties.",
              "type": "DisplayMarker",
              "isOptional": false
            },
            {
              "name": "properties",
              "description": "An {Object} containing properties to apply to this marker. Pass `null` to clear the override. ",
              "type": "Object",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Represents a decoration that applies to every marker on a given\nlayer. Created via {TextEditor::decorateMarkerLayer}. ",
      "description": "Represents a decoration that applies to every marker on a given\nlayer. Created via {TextEditor::decorateMarkerLayer}. "
    },
    "MarkerLayer": {
      "name": "MarkerLayer",
      "filename": "src/marker-layer.coffee",
      "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L15",
      "sections": [
        {
          "name": "Lifecycle",
          "description": ""
        },
        {
          "name": "Querying",
          "description": ""
        },
        {
          "name": "Marker creation",
          "description": ""
        },
        {
          "name": "Event subscription",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "copy",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L51",
          "visibility": "Public",
          "summary": "Create a copy of this layer with markers in the same state and\nlocations. ",
          "description": "Create a copy of this layer with markers in the same state and\nlocations. "
        },
        {
          "name": "destroy",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L59",
          "visibility": "Public",
          "summary": "Destroy this layer. ",
          "description": "Destroy this layer. "
        },
        {
          "name": "clear",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L70",
          "visibility": "Public",
          "summary": "Remove all markers from this layer. ",
          "description": "Remove all markers from this layer. "
        },
        {
          "name": "isDestroyed",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L79",
          "visibility": "Public",
          "summary": "Determine whether this layer has been destroyed. ",
          "description": "Determine whether this layer has been destroyed. "
        },
        {
          "name": "getMarker",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L92",
          "visibility": "Public",
          "summary": "Get an existing marker by its id.",
          "description": "Get an existing marker by its id.",
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "getMarkers",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L98",
          "visibility": "Public",
          "summary": "Get all existing markers on the marker layer.",
          "description": "Get all existing markers on the marker layer.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Marker}s."
            }
          ]
        },
        {
          "name": "getMarkerCount",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L104",
          "visibility": "Public",
          "summary": "Get the number of markers in the marker layer.",
          "description": "Get the number of markers in the marker layer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "findMarkers",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L110",
          "visibility": "Public",
          "summary": "Find markers in the layer conforming to the given parameters.",
          "description": "Find markers in the layer conforming to the given parameters.\n\nSee the documentation for {TextBuffer::findMarkers}. "
        },
        {
          "name": "getRole",
          "sectionName": "Querying",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L162",
          "visibility": "Public",
          "summary": "Get the role of the marker layer e.g. `atom.selection`.",
          "description": "Get the role of the marker layer e.g. `atom.selection`.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "markRange",
          "sectionName": "Marker creation",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L198",
          "visibility": "Public",
          "summary": "Create a marker with the given range.",
          "description": "Create a marker with the given range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} Creates the marker in a reversed orientation. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "markPosition",
          "sectionName": "Marker creation",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L227",
          "visibility": "Public",
          "summary": "Create a marker at with its head at the given position with no tail.",
          "description": "Create a marker at with its head at the given position with no tail.",
          "arguments": [
            {
              "name": "position",
              "description": "{Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "onDidUpdate",
          "sectionName": "Event subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L252",
          "visibility": "Public",
          "summary": "Subscribe to be notified asynchronously whenever markers are\ncreated, updated, or destroyed on this layer. *Prefer this method for\noptimal performance when interacting with layers that could contain large\nnumbers of markers.*",
          "description": "Subscribe to be notified asynchronously whenever markers are\ncreated, updated, or destroyed on this layer. *Prefer this method for\noptimal performance when interacting with layers that could contain large\nnumbers of markers.*\n\nSubscribers are notified once, asynchronously when any number of changes\noccur in a given tick of the event loop. You should re-query the layer\nto determine the state of markers in which you're interested in. It may\nbe counter-intuitive, but this is much more efficient than subscribing to\nevents on individual markers, which are expensive to deliver.",
          "arguments": [
            {
              "name": "callback",
              "description": "A {Function} that will be called with no arguments when changes occur on this layer.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        },
        {
          "name": "onDidCreateMarker",
          "sectionName": "Event subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L266",
          "visibility": "Public",
          "summary": "Subscribe to be notified synchronously whenever markers are created\non this layer. *Avoid this method for optimal performance when interacting\nwith layers that could contain large numbers of markers.*",
          "description": "Subscribe to be notified synchronously whenever markers are created\non this layer. *Avoid this method for optimal performance when interacting\nwith layers that could contain large numbers of markers.*\n\nYou should prefer {::onDidUpdate} when synchronous notifications aren't\nabsolutely necessary.",
          "arguments": [
            {
              "name": "callback",
              "description": "A {Function} that will be called with a {Marker} whenever a new marker is created.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/marker-layer.coffee#L273",
          "visibility": "Public",
          "summary": "Subscribe to be notified synchronously when this layer is destroyed.",
          "description": "Subscribe to be notified synchronously when this layer is destroyed.",
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "*Experimental:* A container for a related set of markers.",
      "description": "*Experimental:* A container for a related set of markers.\n\nThis API is experimental and subject to change on any release. "
    },
    "MenuManager": {
      "name": "MenuManager",
      "filename": "src/menu-manager.coffee",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/menu-manager.coffee#L61",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/menu-manager.coffee#L95",
          "visibility": "Public",
          "summary": "Adds the given items to the application menu.",
          "description": "Adds the given items to the application menu.",
          "arguments": [
            {
              "children": [
                {
                  "name": "label",
                  "description": "The {String} menu label.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "submenu",
                  "description": "An optional {Array} of sub menu items.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "command",
                  "description": "An optional {String} command to trigger when the item is clicked.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "id",
                  "description": "(internal) A {String} containing the menu item's id. Returns a {Disposable} on which `.dispose()` can be called to remove the added menu items. ",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "items",
              "description": "An {Array} of menu item {Object}s containing the keys:",
              "type": "Array",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "coffee",
              "code": "  atom.menu.add [\n    {\n      label: 'Hello'\n      submenu : [{label: 'World!', id: 'World!', command: 'hello:world'}]\n    }\n  ]",
              "raw": "```coffee\n  atom.menu.add [\n    {\n      label: 'Hello'\n      submenu : [{label: 'World!', id: 'World!', command: 'hello:world'}]\n    }\n  ]\n```"
            }
          ]
        },
        {
          "name": "update",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/menu-manager.coffee#L154",
          "visibility": "Public",
          "summary": "Refreshes the currently visible menu. ",
          "description": "Refreshes the currently visible menu. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Provides a registry for menu items that you'd like to appear in the\napplication menu.",
      "description": "Provides a registry for menu items that you'd like to appear in the\napplication menu.\n\nAn instance of this class is always available as the `atom.menu` global.\n\n## Menu CSON Format\n\nHere is an example from the [tree-view](https://github.com/atom/tree-view/blob/master/menus/tree-view.cson):\n\n```coffee\n[\n  {\n    'label': 'View'\n    'submenu': [\n      { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' }\n    ]\n  }\n  {\n    'label': 'Packages'\n    'submenu': [\n      'label': 'Tree View'\n      'submenu': [\n        { 'label': 'Focus', 'command': 'tree-view:toggle-focus' }\n        { 'label': 'Toggle', 'command': 'tree-view:toggle' }\n        { 'label': 'Reveal Active File', 'command': 'tree-view:reveal-active-file' }\n        { 'label': 'Toggle Tree Side', 'command': 'tree-view:toggle-side' }\n      ]\n    ]\n  }\n]\n```\n\nUse in your package's menu `.cson` file requires that you place your menu\nstructure under a `menu` key.\n\n```coffee\n'menu': [\n  {\n    'label': 'View'\n    'submenu': [\n      { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' }\n    ]\n  }\n]\n```\n\nSee {::add} for more info about adding menu's directly. "
    },
    "Notification": {
      "name": "Notification",
      "superClass": null,
      "filename": "src/notification.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification.js#L5",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Methods",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidDismiss",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification.js#L41",
          "visibility": "Public",
          "summary": "Invoke the given callback when the notification is dismissed.",
          "description": "Invoke the given callback when the notification is dismissed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the notification is dismissed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDisplay",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification.js#L50",
          "visibility": "Public",
          "summary": "Invoke the given callback when the notification is displayed.",
          "description": "Invoke the given callback when the notification is displayed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the notification is displayed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getType",
          "sectionName": "Methods",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification.js#L63",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} type."
            }
          ]
        },
        {
          "name": "getMessage",
          "sectionName": "Methods",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification.js#L68",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} message."
            }
          ]
        },
        {
          "name": "dismiss",
          "sectionName": "Methods",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification.js#L90",
          "visibility": "Extended",
          "summary": "Dismisses the notification, removing it from the UI. Calling this\nprogrammatically will call all callbacks added via `onDidDismiss`.",
          "description": "Dismisses the notification, removing it from the UI. Calling this\nprogrammatically will call all callbacks added via `onDidDismiss`."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A notification to the user containing a message and type.",
      "description": "A notification to the user containing a message and type."
    },
    "NotificationManager": {
      "name": "NotificationManager",
      "superClass": null,
      "filename": "src/notification-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L9",
      "sections": [
        {
          "name": "Events",
          "description": ""
        },
        {
          "name": "Adding Notifications",
          "description": ""
        },
        {
          "name": "Getting Notifications",
          "description": ""
        },
        {
          "name": "Managing Notifications",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidAddNotification",
          "sectionName": "Events",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L25",
          "visibility": "Public",
          "summary": "Invoke the given callback after a notification has been added.",
          "description": "Invoke the given callback after a notification has been added.",
          "arguments": [
            {
              "children": [
                {
                  "name": "notification",
                  "description": "The {Notification} that was added.",
                  "type": "Notification",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the notification is added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidClearNotifications",
          "sectionName": "Events",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L34",
          "visibility": "Public",
          "summary": "Invoke the given callback after the notifications have been cleared.",
          "description": "Invoke the given callback after the notifications have been cleared.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after the notifications are cleared.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "addSuccess",
          "sectionName": "Adding Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L66",
          "visibility": "Public",
          "summary": "Add a success notification.",
          "description": "Add a success notification.",
          "arguments": [
            {
              "name": "message",
              "description": "A {String} message",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "className",
                      "description": "{String} a class name to add to the button's default class name (`btn btn-success`).",
                      "type": "String",
                      "isOptional": true
                    },
                    {
                      "name": "onDidClick",
                      "description": "{Function} callback to call when the button has been clicked. The context will be set to the {NotificationElement} instance.",
                      "type": "Function",
                      "isOptional": true
                    },
                    {
                      "name": "text",
                      "description": "{String} inner text for the button",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "buttons",
                  "description": "An {Array} of {Object} where each {Object} has the following options:",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "description",
                  "description": "A Markdown {String} containing a longer description about the notification. By default, this **will not** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "detail",
                  "description": "A plain-text {String} containing additional details about the notification. By default, this **will** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "dismissable",
                  "description": "A {Boolean} indicating whether this notification can be dismissed by the user. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "icon",
                  "description": "A {String} name of an icon from Octicons to display in the notification header. Defaults to `'check'`.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An options {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Notification",
              "description": "Returns the {Notification} that was added."
            }
          ]
        },
        {
          "name": "addInfo",
          "sectionName": "Adding Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L94",
          "visibility": "Public",
          "summary": "Add an informational notification.",
          "description": "Add an informational notification.",
          "arguments": [
            {
              "name": "message",
              "description": "A {String} message",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "className",
                      "description": "{String} a class name to add to the button's default class name (`btn btn-info`).",
                      "type": "String",
                      "isOptional": true
                    },
                    {
                      "name": "onDidClick",
                      "description": "{Function} callback to call when the button has been clicked. The context will be set to the {NotificationElement} instance.",
                      "type": "Function",
                      "isOptional": true
                    },
                    {
                      "name": "text",
                      "description": "{String} inner text for the button",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "buttons",
                  "description": "An {Array} of {Object} where each {Object} has the following options:",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "description",
                  "description": "A Markdown {String} containing a longer description about the notification. By default, this **will not** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "detail",
                  "description": "A plain-text {String} containing additional details about the notification. By default, this **will** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "dismissable",
                  "description": "A {Boolean} indicating whether this notification can be dismissed by the user. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "icon",
                  "description": "A {String} name of an icon from Octicons to display in the notification header. Defaults to `'info'`.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An options {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Notification",
              "description": "Returns the {Notification} that was added."
            }
          ]
        },
        {
          "name": "addWarning",
          "sectionName": "Adding Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L122",
          "visibility": "Public",
          "summary": "Add a warning notification.",
          "description": "Add a warning notification.",
          "arguments": [
            {
              "name": "message",
              "description": "A {String} message",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "className",
                      "description": "{String} a class name to add to the button's default class name (`btn btn-warning`).",
                      "type": "String",
                      "isOptional": true
                    },
                    {
                      "name": "onDidClick",
                      "description": "{Function} callback to call when the button has been clicked. The context will be set to the {NotificationElement} instance.",
                      "type": "Function",
                      "isOptional": true
                    },
                    {
                      "name": "text",
                      "description": "{String} inner text for the button",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "buttons",
                  "description": "An {Array} of {Object} where each {Object} has the following options:",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "description",
                  "description": "A Markdown {String} containing a longer description about the notification. By default, this **will not** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "detail",
                  "description": "A plain-text {String} containing additional details about the notification. By default, this **will** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "dismissable",
                  "description": "A {Boolean} indicating whether this notification can be dismissed by the user. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "icon",
                  "description": "A {String} name of an icon from Octicons to display in the notification header. Defaults to `'alert'`.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An options {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Notification",
              "description": "Returns the {Notification} that was added."
            }
          ]
        },
        {
          "name": "addError",
          "sectionName": "Adding Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L152",
          "visibility": "Public",
          "summary": "Add an error notification.",
          "description": "Add an error notification.",
          "arguments": [
            {
              "name": "message",
              "description": "A {String} message",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "className",
                      "description": "{String} a class name to add to the button's default class name (`btn btn-error`).",
                      "type": "String",
                      "isOptional": true
                    },
                    {
                      "name": "onDidClick",
                      "description": "{Function} callback to call when the button has been clicked. The context will be set to the {NotificationElement} instance.",
                      "type": "Function",
                      "isOptional": true
                    },
                    {
                      "name": "text",
                      "description": "{String} inner text for the button",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "buttons",
                  "description": "An {Array} of {Object} where each {Object} has the following options:",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "description",
                  "description": "A Markdown {String} containing a longer description about the notification. By default, this **will not** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "detail",
                  "description": "A plain-text {String} containing additional details about the notification. By default, this **will** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "dismissable",
                  "description": "A {Boolean} indicating whether this notification can be dismissed by the user. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "icon",
                  "description": "A {String} name of an icon from Octicons to display in the notification header. Defaults to `'flame'`.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "stack",
                  "description": "A preformatted {String} with stack trace information describing the location of the error.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An options {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Notification",
              "description": "Returns the {Notification} that was added."
            }
          ]
        },
        {
          "name": "addFatalError",
          "sectionName": "Adding Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L182",
          "visibility": "Public",
          "summary": "Add a fatal error notification.",
          "description": "Add a fatal error notification.",
          "arguments": [
            {
              "name": "message",
              "description": "A {String} message",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "className",
                      "description": "{String} a class name to add to the button's default class name (`btn btn-error`).",
                      "type": "String",
                      "isOptional": true
                    },
                    {
                      "name": "onDidClick",
                      "description": "{Function} callback to call when the button has been clicked. The context will be set to the {NotificationElement} instance.",
                      "type": "Function",
                      "isOptional": true
                    },
                    {
                      "name": "text",
                      "description": "{String} inner text for the button",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "buttons",
                  "description": "An {Array} of {Object} where each {Object} has the following options:",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "description",
                  "description": "A Markdown {String} containing a longer description about the notification. By default, this **will not** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "detail",
                  "description": "A plain-text {String} containing additional details about the notification. By default, this **will** preserve newlines and whitespace when it is rendered.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "dismissable",
                  "description": "A {Boolean} indicating whether this notification can be dismissed by the user. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "icon",
                  "description": "A {String} name of an icon from Octicons to display in the notification header. Defaults to `'bug'`.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "stack",
                  "description": "A preformatted {String} with stack trace information describing the location of the error.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An options {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Notification",
              "description": "Returns the {Notification} that was added."
            }
          ]
        },
        {
          "name": "getNotifications",
          "sectionName": "Getting Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L203",
          "visibility": "Public",
          "summary": "Get all the notifications.",
          "description": "Get all the notifications.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Notification}s."
            }
          ]
        },
        {
          "name": "clear",
          "sectionName": "Managing Notifications",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/notification-manager.js#L212",
          "visibility": "Public",
          "summary": "Clear all the notifications.",
          "description": "Clear all the notifications."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A notification manager used to create {Notification}s to be shown\nto the user.",
      "description": "A notification manager used to create {Notification}s to be shown\nto the user.\n\nAn instance of this class is always available as the `atom.notifications`\nglobal."
    },
    "Package": {
      "name": "Package",
      "superClass": null,
      "filename": "src/package.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package.js#L15",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Native Module Compatibility",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidDeactivate",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package.js#L60",
          "visibility": "Essential",
          "summary": "Invoke the given callback when all packages have been activated.",
          "description": "Invoke the given callback when all packages have been activated.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "isCompatible",
          "sectionName": "Native Module Compatibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package.js#L1209",
          "visibility": "Extended",
          "summary": "Are all native modules depended on by this package correctly\ncompiled against the current version of Atom?",
          "description": "Are all native modules depended on by this package correctly\ncompiled against the current version of Atom?\n\nIncompatible packages cannot be activated.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, true if compatible, false if incompatible."
            }
          ]
        },
        {
          "name": "rebuild",
          "sectionName": "Native Module Compatibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package.js#L1231",
          "visibility": "Extended",
          "summary": "Rebuild native modules in this package's dependencies for the\ncurrent version of Atom.",
          "description": "Rebuild native modules in this package's dependencies for the\ncurrent version of Atom.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with an object containing `code`,\n`stdout`, and `stderr` properties based on the results of running\n`apm rebuild` on the package."
            }
          ]
        },
        {
          "name": "getBuildFailureOutput",
          "sectionName": "Native Module Compatibility",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package.js#L1257",
          "visibility": "Extended",
          "summary": "If a previous rebuild failed, get the contents of stderr.",
          "description": "If a previous rebuild failed, get the contents of stderr.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} or null if no previous build failure occurred."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Loads and activates a package's main module and resources such as\nstylesheets, keymaps, grammar, editor properties, and menus.",
      "description": "Loads and activates a package's main module and resources such as\nstylesheets, keymaps, grammar, editor properties, and menus."
    },
    "PackageManager": {
      "name": "PackageManager",
      "superClass": null,
      "filename": "src/package-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L30",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Package system data",
          "description": ""
        },
        {
          "name": "General package data",
          "description": ""
        },
        {
          "name": "Enabling and disabling packages",
          "description": ""
        },
        {
          "name": "Accessing active packages",
          "description": ""
        },
        {
          "name": "Accessing loaded packages",
          "description": ""
        },
        {
          "name": "Accessing available packages",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidLoadInitialPackages",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L121",
          "visibility": "Public",
          "summary": "Invoke the given callback when all packages have been loaded.",
          "description": "Invoke the given callback when all packages have been loaded.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidActivateInitialPackages",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L130",
          "visibility": "Public",
          "summary": "Invoke the given callback when all packages have been activated.",
          "description": "Invoke the given callback when all packages have been activated.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidActivatePackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L148",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is activated.",
          "description": "Invoke the given callback when a package is activated.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was activated.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is activated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDeactivatePackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L158",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is deactivated.",
          "description": "Invoke the given callback when a package is deactivated.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was deactivated.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is deactivated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidLoadPackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L168",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is loaded.",
          "description": "Invoke the given callback when a package is loaded.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was loaded.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is loaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidUnloadPackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L178",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is unloaded.",
          "description": "Invoke the given callback when a package is unloaded.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was unloaded.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is unloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getApmPath",
          "sectionName": "Package system data",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L191",
          "visibility": "Public",
          "summary": "Get the path to the apm command.",
          "description": "Get the path to the apm command.\n\nUses the value of the `core.apmPath` config setting if it exists.\n\nReturn a {String} file path to apm."
        },
        {
          "name": "getPackageDirPaths",
          "sectionName": "Package system data",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L215",
          "visibility": "Public",
          "summary": "Get the paths being used to look for packages.",
          "description": "Get the paths being used to look for packages.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String} directory paths."
            }
          ]
        },
        {
          "name": "resolvePackagePath",
          "sectionName": "General package data",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L228",
          "visibility": "Public",
          "summary": "Resolve the given package name to a path on disk.",
          "description": "Resolve the given package name to a path on disk.\n\nReturn a {String} folder path or undefined if it could not be resolved.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "isBundledPackage",
          "sectionName": "General package data",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L251",
          "visibility": "Public",
          "summary": "Is the package with the given name bundled with Atom?",
          "description": "Is the package with the given name bundled with Atom?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "enablePackage",
          "sectionName": "Enabling and disabling packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L287",
          "visibility": "Public",
          "summary": "Enable the package with the given name.",
          "description": "Enable the package with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns the {Package} that was enabled or null if it isn't loaded."
            }
          ]
        },
        {
          "name": "disablePackage",
          "sectionName": "Enabling and disabling packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L300",
          "visibility": "Public",
          "summary": "Disable the package with the given name.",
          "description": "Disable the package with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns the {Package} that was disabled or null if it isn't loaded."
            }
          ]
        },
        {
          "name": "isPackageDisabled",
          "sectionName": "Enabling and disabling packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L313",
          "visibility": "Public",
          "summary": "Is the package with the given name disabled?",
          "description": "Is the package with the given name disabled?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getActivePackages",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L322",
          "visibility": "Public",
          "summary": "Get an {Array} of all the active {Package}s.",
          "description": "Get an {Array} of all the active {Package}s."
        },
        {
          "name": "getActivePackage",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L331",
          "visibility": "Public",
          "summary": "Get the active {Package} with the given name.",
          "description": "Get the active {Package} with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns a {Package} or undefined."
            }
          ]
        },
        {
          "name": "isPackageActive",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L340",
          "visibility": "Public",
          "summary": "Is the {Package} with the given name active?",
          "description": "Is the {Package} with the given name active?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "hasActivatedInitialPackages",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L345",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether package activation has occurred."
            }
          ]
        },
        {
          "name": "getLoadedPackages",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L354",
          "visibility": "Public",
          "summary": "Get an {Array} of all the loaded {Package}s",
          "description": "Get an {Array} of all the loaded {Package}s"
        },
        {
          "name": "getLoadedPackage",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L370",
          "visibility": "Public",
          "summary": "Get the loaded {Package} with the given name.",
          "description": "Get the loaded {Package} with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns a {Package} or undefined."
            }
          ]
        },
        {
          "name": "isPackageLoaded",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L379",
          "visibility": "Public",
          "summary": "Is the package with the given name loaded?",
          "description": "Is the package with the given name loaded?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "hasLoadedInitialPackages",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L384",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether package loading has occurred."
            }
          ]
        },
        {
          "name": "getAvailablePackagePaths",
          "sectionName": "Accessing available packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L393",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s of all the available package paths."
            }
          ]
        },
        {
          "name": "getAvailablePackageNames",
          "sectionName": "Accessing available packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L398",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s of all the available package names."
            }
          ]
        },
        {
          "name": "getAvailablePackageMetadata",
          "sectionName": "Accessing available packages",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/package-manager.js#L403",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s of all the available package metadata."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Package manager for coordinating the lifecycle of Atom packages.",
      "description": "Package manager for coordinating the lifecycle of Atom packages.\n\nAn instance of this class is always available as the `atom.packages` global.\n\nPackages can be loaded, activated, and deactivated, and unloaded:\n\n* Loading a package reads and parses the package's metadata and resources\n  such as keymaps, menus, stylesheets, etc.\n* Activating a package registers the loaded resources and calls `activate()`\n  on the package's main module.\n* Deactivating a package unregisters the package's resources  and calls\n  `deactivate()` on the package's main module.\n* Unloading a package removes it completely from the package manager.\n\nPackages can be enabled/disabled via the `core.disabledPackages` config\nsettings and also by calling `enablePackage()/disablePackage()`."
    },
    "Pane": {
      "name": "Pane",
      "superClass": null,
      "filename": "src/pane.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L20",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Items",
          "description": ""
        },
        {
          "name": "Lifecycle",
          "description": ""
        },
        {
          "name": "Splitting",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangeFlexScale",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L204",
          "visibility": "Public",
          "summary": "Invoke the given callback when the pane resizes",
          "description": "Invoke the given callback when the pane resizes\n\nThe callback will be invoked when pane's flexScale property changes.\nUse {::getFlexScale} to get the current value.",
          "arguments": [
            {
              "children": [
                {
                  "name": "flexScale",
                  "description": "{Number} representing the panes `flex-grow`; ability for a flex item to grow if necessary.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the pane is resized",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which '.dispose()' can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeFlexScale",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L217",
          "visibility": "Public",
          "summary": "Invoke the given callback with the current and future values of\n{::getFlexScale}.",
          "description": "Invoke the given callback with the current and future values of\n{::getFlexScale}.",
          "arguments": [
            {
              "children": [
                {
                  "name": "flexScale",
                  "description": "{Number} representing the panes `flex-grow`; ability for a flex item to grow if necessary.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with the current and future values of the {::getFlexScale} property.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidActivate",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L230",
          "visibility": "Public",
          "summary": "Invoke the given callback when the pane is activated.",
          "description": "Invoke the given callback when the pane is activated.\n\nThe given callback will be invoked whenever {::activate} is called on the\npane, even if it is already active at the time.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the pane is activated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L239",
          "visibility": "Public",
          "summary": "Invoke the given callback before the pane is destroyed.",
          "description": "Invoke the given callback before the pane is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the pane is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L248",
          "visibility": "Public",
          "summary": "Invoke the given callback when the pane is destroyed.",
          "description": "Invoke the given callback when the pane is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the pane is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActive",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L260",
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of the {::isActive}\nproperty changes.",
          "description": "Invoke the given callback when the value of the {::isActive}\nproperty changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "active",
                  "description": "{Boolean} indicating whether the pane is active.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the value of the {::isActive} property changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActive",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L275",
          "visibility": "Public",
          "summary": "Invoke the given callback with the current and future values of the\n{::isActive} property.",
          "description": "Invoke the given callback with the current and future values of the\n{::isActive} property.",
          "arguments": [
            {
              "children": [
                {
                  "name": "active",
                  "description": "{Boolean} indicating whether the pane is active.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with the current and future values of the {::isActive} property.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L288",
          "visibility": "Public",
          "summary": "Invoke the given callback when an item is added to the pane.",
          "description": "Invoke the given callback when an item is added to the pane.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The added pane item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating where the item is located.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when items are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRemoveItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L300",
          "visibility": "Public",
          "summary": "Invoke the given callback when an item is removed from the pane.",
          "description": "Invoke the given callback when an item is removed from the pane.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The removed pane item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating where the item was located.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when items are removed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillRemoveItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L310",
          "visibility": "Public",
          "summary": "Invoke the given callback before an item is removed from the pane.",
          "description": "Invoke the given callback before an item is removed from the pane.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The pane item to be removed.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating where the item is located.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when items are removed.",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onDidMoveItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L323",
          "visibility": "Public",
          "summary": "Invoke the given callback when an item is moved within the pane.",
          "description": "Invoke the given callback when an item is moved within the pane.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The removed pane item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "oldIndex",
                      "description": "{Number} indicating where the item was located.",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "newIndex",
                      "description": "{Number} indicating where the item is now located.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when items are moved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeItems",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L334",
          "visibility": "Public",
          "summary": "Invoke the given callback with all current and future items.",
          "description": "Invoke the given callback with all current and future items.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "An item that is present in {::getItems} at the time of subscription or that is added at some later time.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future items.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActiveItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L348",
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::getActiveItem}\nchanges.",
          "description": "Invoke the given callback when the value of {::getActiveItem}\nchanges.",
          "arguments": [
            {
              "children": [
                {
                  "name": "activeItem",
                  "description": "The current active item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when the active item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onChooseNextMRUItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L360",
          "visibility": "Public",
          "summary": "Invoke the given callback when {::activateNextRecentlyUsedItem}\nhas been called, either initiating or continuing a forward MRU traversal of\npane items.",
          "description": "Invoke the given callback when {::activateNextRecentlyUsedItem}\nhas been called, either initiating or continuing a forward MRU traversal of\npane items.",
          "arguments": [
            {
              "children": [
                {
                  "name": "nextRecentlyUsedItem",
                  "description": "The next MRU item, now being set active",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when the active item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onChooseLastMRUItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L372",
          "visibility": "Public",
          "summary": "Invoke the given callback when {::activatePreviousRecentlyUsedItem}\nhas been called, either initiating or continuing a reverse MRU traversal of\npane items.",
          "description": "Invoke the given callback when {::activatePreviousRecentlyUsedItem}\nhas been called, either initiating or continuing a reverse MRU traversal of\npane items.",
          "arguments": [
            {
              "children": [
                {
                  "name": "previousRecentlyUsedItem",
                  "description": "The previous MRU item, now being set active",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with when the active item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDoneChoosingMRUItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L384",
          "visibility": "Public",
          "summary": "Invoke the given callback when {::moveActiveItemToTopOfStack}\nhas been called, terminating an MRU traversal of pane items and moving the\ncurrent active item to the top of the stack. Typically bound to a modifier\n(e.g. CTRL) key up event.",
          "description": "Invoke the given callback when {::moveActiveItemToTopOfStack}\nhas been called, terminating an MRU traversal of pane items and moving the\ncurrent active item to the top of the stack. Typically bound to a modifier\n(e.g. CTRL) key up event.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called with when the MRU traversal is done.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActiveItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L396",
          "visibility": "Public",
          "summary": "Invoke the given callback with the current and future values of\n{::getActiveItem}.",
          "description": "Invoke the given callback with the current and future values of\n{::getActiveItem}.",
          "arguments": [
            {
              "children": [
                {
                  "name": "activeItem",
                  "description": "The current active item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with the current and future active items.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L410",
          "visibility": "Public",
          "summary": "Invoke the given callback before items are destroyed.",
          "description": "Invoke the given callback before items are destroyed.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The item that will be destroyed.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "The location of the item.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before items are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to\nunsubscribe."
            }
          ]
        },
        {
          "name": "getItems",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L448",
          "visibility": "Public",
          "summary": "Get the items in this pane.",
          "description": "Get the items in this pane.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of items."
            }
          ]
        },
        {
          "name": "getActiveItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L455",
          "visibility": "Public",
          "summary": "Get the active pane item in this pane.",
          "description": "Get the active pane item in this pane.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a pane item."
            }
          ]
        },
        {
          "name": "itemAtIndex",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L507",
          "visibility": "Public",
          "summary": "Return the item at the given index.",
          "description": "Return the item at the given index.",
          "arguments": [
            {
              "name": "index",
              "description": "{Number}",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns an item or `null` if no item exists at the given index."
            }
          ]
        },
        {
          "name": "activateNextItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L549",
          "visibility": "Public",
          "summary": "Makes the next item active.",
          "description": "Makes the next item active."
        },
        {
          "name": "activatePreviousItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L559",
          "visibility": "Public",
          "summary": "Makes the previous item active.",
          "description": "Makes the previous item active."
        },
        {
          "name": "moveItemRight",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L573",
          "visibility": "Public",
          "summary": "Move the active tab to the right.",
          "description": "Move the active tab to the right."
        },
        {
          "name": "moveItemLeft",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L581",
          "visibility": "Public",
          "summary": "Move the active tab to the left",
          "description": "Move the active tab to the left"
        },
        {
          "name": "getActiveItemIndex",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L591",
          "visibility": "Public",
          "summary": "Get the index of the active item.",
          "description": "Get the index of the active item.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "activateItemAtIndex",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L598",
          "visibility": "Public",
          "summary": "Activate the item at the given index.",
          "description": "Activate the item at the given index.",
          "arguments": [
            {
              "name": "index",
              "description": "{Number}",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "activateItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L611",
          "visibility": "Public",
          "summary": "Make the given item *active*, causing it to be displayed by\nthe pane's view.",
          "description": "Make the given item *active*, causing it to be displayed by\nthe pane's view.",
          "arguments": [
            {
              "name": "item",
              "description": "The item to activate",
              "type": null,
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "pending",
                  "description": "{Boolean} indicating that the item should be added in a pending state if it does not yet exist in the pane. Existing pending items in a pane are replaced with new pending items when they are opened.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "addItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L634",
          "visibility": "Public",
          "summary": "Add the given item to the pane.",
          "description": "Add the given item to the pane.",
          "arguments": [
            {
              "name": "item",
              "description": "The item to add. It can be a model with an associated view or a view.",
              "type": null,
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "index",
                  "description": "{Number} indicating the index at which to add the item. If omitted, the item is added after the current active item.",
                  "type": "Number",
                  "isOptional": true
                },
                {
                  "name": "pending",
                  "description": "{Boolean} indicating that the item should be added in a pending state. Existing pending items in a pane are replaced with new pending items when they are opened.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the added item."
            }
          ]
        },
        {
          "name": "addItems",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L729",
          "visibility": "Public",
          "summary": "Add the given items to the pane.",
          "description": "Add the given items to the pane.",
          "arguments": [
            {
              "name": "items",
              "description": "An {Array} of items to add. Items can be views or models with associated views. Any objects that are already present in the pane's current items will not be added again.",
              "type": "Array",
              "isOptional": false
            },
            {
              "name": "index",
              "description": "{Number} index at which to add the items. If omitted, the item is #   added after the current active item.",
              "type": "Number",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of added items."
            }
          ]
        },
        {
          "name": "moveItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L786",
          "visibility": "Public",
          "summary": "Move the given item to the given index.",
          "description": "Move the given item to the given index.",
          "arguments": [
            {
              "name": "item",
              "description": "The item to move.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "index",
              "description": "{Number} indicating the index to which to move the item.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "moveItemToPane",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L799",
          "visibility": "Public",
          "summary": "Move the given item to the given index on another pane.",
          "description": "Move the given item to the given index on another pane.",
          "arguments": [
            {
              "name": "item",
              "description": "The item to move.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "pane",
              "description": "{Pane} to which to move the item.",
              "type": "Pane",
              "isOptional": false
            },
            {
              "name": "index",
              "description": "{Number} indicating the index to which to move the item in the given pane.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "destroyActiveItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L807",
          "visibility": "Public",
          "summary": "Destroy the active item and activate the next item.",
          "description": "Destroy the active item and activate the next item.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the item is destroyed."
            }
          ]
        },
        {
          "name": "destroyItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L823",
          "visibility": "Public",
          "summary": "Destroy the given item.",
          "description": "Destroy the given item.\n\nIf the item is active, the next item will be activated. If the item is the\nlast item, the pane will be destroyed if the `core.destroyEmptyPanes` config\nsetting is `true`.",
          "arguments": [
            {
              "name": "item",
              "description": "Item to destroy",
              "type": null,
              "isOptional": false
            },
            {
              "name": "force",
              "description": "{Boolean} Destroy the item without prompting to save  it, even if the item's `isPermanentDockItem` method returns true.",
              "type": "Boolean",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with a {Boolean} indicating whether or not\nthe item was destroyed."
            }
          ]
        },
        {
          "name": "destroyItems",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L863",
          "visibility": "Public",
          "summary": "Destroy all items.",
          "description": "Destroy all items."
        },
        {
          "name": "destroyInactiveItems",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L868",
          "visibility": "Public",
          "summary": "Destroy all items except for the active item.",
          "description": "Destroy all items except for the active item."
        },
        {
          "name": "saveActiveItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L941",
          "visibility": "Public",
          "summary": "Save the active item.",
          "description": "Save the active item."
        },
        {
          "name": "saveActiveItemAs",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L952",
          "visibility": "Public",
          "summary": "Prompt the user for a location and save the active item with the\npath they select.",
          "description": "Prompt the user for a location and save the active item with the\npath they select.",
          "arguments": [
            {
              "name": "nextAction",
              "description": "{Function} which will be called after the item is successfully saved.",
              "type": "Function",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the save is complete"
            }
          ]
        },
        {
          "name": "saveItem",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L965",
          "visibility": "Public",
          "summary": "Save the given item.",
          "description": "Save the given item.",
          "arguments": [
            {
              "name": "item",
              "description": "The item to save.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "nextAction",
              "description": "{Function} which will be called with no argument after the item is successfully saved, or with the error if it failed. The return value will be that of `nextAction` or `undefined` if it was not provided",
              "type": "Function",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the save is complete"
            }
          ]
        },
        {
          "name": "saveItemAs",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1005",
          "visibility": "Public",
          "summary": "Prompt the user for a location and save the active item with the\npath they select.",
          "description": "Prompt the user for a location and save the active item with the\npath they select.",
          "arguments": [
            {
              "name": "item",
              "description": "The item to save.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "nextAction",
              "description": "{Function} which will be called with no argument after the item is successfully saved, or with the error if it failed. The return value will be that of `nextAction` or `undefined` if it was not provided",
              "type": "Function",
              "isOptional": true
            }
          ]
        },
        {
          "name": "saveItems",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1053",
          "visibility": "Public",
          "summary": "Save all items.",
          "description": "Save all items."
        },
        {
          "name": "itemForURI",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1065",
          "visibility": "Public",
          "summary": "Return the first item that matches the given URI or undefined if\nnone exists.",
          "description": "Return the first item that matches the given URI or undefined if\nnone exists.",
          "arguments": [
            {
              "name": "uri",
              "description": "{String} containing a URI.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "activateItemForURI",
          "sectionName": "Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1080",
          "visibility": "Public",
          "summary": "Activate the first item that matches the given URI.",
          "description": "Activate the first item that matches the given URI.",
          "arguments": [
            {
              "name": "uri",
              "description": "{String} containing a URI.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether an item matching the URI was found."
            }
          ]
        },
        {
          "name": "isActive",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1103",
          "visibility": "Public",
          "summary": "Determine whether the pane is active.",
          "description": "Determine whether the pane is active.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "activate",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1108",
          "visibility": "Public",
          "summary": "Makes this pane the *active* pane, causing it to gain focus.",
          "description": "Makes this pane the *active* pane, causing it to gain focus."
        },
        {
          "name": "destroy",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1120",
          "visibility": "Public",
          "summary": "Close the pane and destroy all its items.",
          "description": "Close the pane and destroy all its items.\n\nIf this is the last pane, all the items will be destroyed but the pane\nitself will not be destroyed."
        },
        {
          "name": "isDestroyed",
          "sectionName": "Lifecycle",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1150",
          "visibility": "Public",
          "summary": "Determine whether this pane has been destroyed.",
          "description": "Determine whether this pane has been destroyed.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "splitLeft",
          "sectionName": "Splitting",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1165",
          "visibility": "Public",
          "summary": "Create a new pane to the left of this pane.",
          "description": "Create a new pane to the left of this pane.",
          "arguments": [
            {
              "children": [
                {
                  "name": "items",
                  "description": "{Array} of items to add to the new pane.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "copyActiveItem",
                  "description": "{Boolean} true will copy the active item into the new split pane",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "params",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns the new {Pane}."
            }
          ]
        },
        {
          "name": "splitRight",
          "sectionName": "Splitting",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1176",
          "visibility": "Public",
          "summary": "Create a new pane to the right of this pane.",
          "description": "Create a new pane to the right of this pane.",
          "arguments": [
            {
              "children": [
                {
                  "name": "items",
                  "description": "{Array} of items to add to the new pane.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "copyActiveItem",
                  "description": "{Boolean} true will copy the active item into the new split pane",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "params",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns the new {Pane}."
            }
          ]
        },
        {
          "name": "splitUp",
          "sectionName": "Splitting",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1187",
          "visibility": "Public",
          "summary": "Creates a new pane above the receiver.",
          "description": "Creates a new pane above the receiver.",
          "arguments": [
            {
              "children": [
                {
                  "name": "items",
                  "description": "{Array} of items to add to the new pane.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "copyActiveItem",
                  "description": "{Boolean} true will copy the active item into the new split pane",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "params",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns the new {Pane}."
            }
          ]
        },
        {
          "name": "splitDown",
          "sectionName": "Splitting",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/pane.js#L1198",
          "visibility": "Public",
          "summary": "Creates a new pane below the receiver.",
          "description": "Creates a new pane below the receiver.",
          "arguments": [
            {
              "children": [
                {
                  "name": "items",
                  "description": "{Array} of items to add to the new pane.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "copyActiveItem",
                  "description": "{Boolean} true will copy the active item into the new split pane",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "params",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns the new {Pane}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A container for presenting content in the center of the workspace.\nPanes can contain multiple items, one of which is *active* at a given time.\nThe view corresponding to the active item is displayed in the interface. In\nthe default configuration, tabs are also displayed for each item.",
      "description": "A container for presenting content in the center of the workspace.\nPanes can contain multiple items, one of which is *active* at a given time.\nThe view corresponding to the active item is displayed in the interface. In\nthe default configuration, tabs are also displayed for each item.\n\nEach pane may also contain one *pending* item. When a pending item is added\nto a pane, it will replace the currently pending item, if any, instead of\nsimply being added. In the default configuration, the text in the tab for\npending items is shown in italics."
    },
    "Panel": {
      "name": "Panel",
      "superClass": null,
      "filename": "src/panel.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L10",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Panel Details",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "destroy",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L27",
          "visibility": "Public",
          "summary": "Destroy and remove this panel from the UI.",
          "description": "Destroy and remove this panel from the UI."
        },
        {
          "name": "onDidChangeVisible",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L57",
          "visibility": "Public",
          "summary": "Invoke the given callback when the pane hidden or shown.",
          "description": "Invoke the given callback when the pane hidden or shown.",
          "arguments": [
            {
              "children": [
                {
                  "name": "visible",
                  "description": "{Boolean} true when the panel has been shown",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the pane is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L67",
          "visibility": "Public",
          "summary": "Invoke the given callback when the pane is destroyed.",
          "description": "Invoke the given callback when the pane is destroyed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "panel",
                  "description": "{Panel} this panel",
                  "type": "Panel",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the pane is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getItem",
          "sectionName": "Panel Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L76",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the panel's item."
            }
          ]
        },
        {
          "name": "getPriority",
          "sectionName": "Panel Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L81",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} indicating this panel's priority."
            }
          ]
        },
        {
          "name": "isVisible",
          "sectionName": "Panel Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L90",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} true when the panel is visible."
            }
          ]
        },
        {
          "name": "hide",
          "sectionName": "Panel Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L95",
          "visibility": "Public",
          "summary": "Hide this panel",
          "description": "Hide this panel"
        },
        {
          "name": "show",
          "sectionName": "Panel Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/panel.js#L103",
          "visibility": "Public",
          "summary": "Show this panel",
          "description": "Show this panel"
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A container representing a panel on the edges of the editor window.\nYou should not create a `Panel` directly, instead use {Workspace::addTopPanel}\nand friends to add panels.",
      "description": "A container representing a panel on the edges of the editor window.\nYou should not create a `Panel` directly, instead use {Workspace::addTopPanel}\nand friends to add panels.\n\nExamples: [status-bar](https://github.com/atom/status-bar)\nand [find-and-replace](https://github.com/atom/find-and-replace) both use\npanels."
    },
    "PathWatcher": {
      "name": "PathWatcher",
      "superClass": null,
      "filename": "src/path-watcher.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/path-watcher.js#L363",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "getStartPromise",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/path-watcher.js#L437",
          "visibility": "Extended",
          "summary": "Return a {Promise} that will resolve when the underlying native watcher is ready to begin sending events.\nWhen testing filesystem watchers, it's important to await this promise before making filesystem changes that you\nintend to assert about because there will be a delay between the instantiation of the watcher and the activation\nof the underlying OS resources that feed its events.",
          "description": "Return a {Promise} that will resolve when the underlying native watcher is ready to begin sending events.\nWhen testing filesystem watchers, it's important to await this promise before making filesystem changes that you\nintend to assert about because there will be a delay between the instantiation of the watcher and the activation\nof the underlying OS resources that feed its events.\n\nPathWatchers acquired through `watchPath` are already started.\n\n```js\nconst {watchPath} = require('atom')\nconst ROOT = path.join(__dirname, 'fixtures')\nconst FILE = path.join(ROOT, 'filename.txt')\n\ndescribe('something', function () {\n  it(\"doesn't miss events\", async function () {\n    const watcher = watchPath(ROOT, {}, events => {})\n    await watcher.getStartPromise()\n    fs.writeFile(FILE, 'contents\\n', err => {\n      // The watcher is listening and the event should be\n      // received asynchronously\n    }\n  })\n})\n```"
        },
        {
          "name": "onDidError",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/path-watcher.js#L475",
          "visibility": "Extended",
          "summary": "Invoke a {Function} when any errors related to this watcher are reported.",
          "description": "Invoke a {Function} when any errors related to this watcher are reported.",
          "arguments": [
            {
              "children": [
                {
                  "name": "err",
                  "description": "An {Error} describing the failure condition.",
                  "type": "Error",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when an error occurs.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}."
            }
          ]
        },
        {
          "name": "dispose",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/path-watcher.js#L577",
          "visibility": "Extended",
          "summary": "Unsubscribe all subscribers from filesystem events. Native resources will be released asynchronously,\nbut this watcher will stop broadcasting events immediately.",
          "description": "Unsubscribe all subscribers from filesystem events. Native resources will be released asynchronously,\nbut this watcher will stop broadcasting events immediately."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Manage a subscription to filesystem events that occur beneath a root directory. Construct these by\ncalling `watchPath`. To watch for events within active project directories, use {Project::onDidChangeFiles}\ninstead.",
      "description": "Manage a subscription to filesystem events that occur beneath a root directory. Construct these by\ncalling `watchPath`. To watch for events within active project directories, use {Project::onDidChangeFiles}\ninstead.\n\nMultiple PathWatchers may be backed by a single native watcher to conserve operation system resources.\n\nCall {::dispose} to stop receiving events and, if possible, release underlying resources. A PathWatcher may be\nadded to a {CompositeDisposable} to manage its lifetime along with other {Disposable} resources like event\nsubscriptions.\n\n```js\nconst {watchPath} = require('atom')\n\nconst disposable = await watchPath('/var/log', {}, events => {\n  console.log(`Received batch of ${events.length} events.`)\n  for (const event of events) {\n    // \"created\", \"modified\", \"deleted\", \"renamed\"\n    console.log(`Event action: ${event.action}`)\n\n    // absolute path to the filesystem entry that was touched\n    console.log(`Event path: ${event.path}`)\n\n    if (event.action === 'renamed') {\n      console.log(`.. renamed from: ${event.oldPath}`)\n    }\n  }\n})\n\n // Immediately stop receiving filesystem events. If this is the last\n // watcher, asynchronously release any OS resources required to\n // subscribe to these events.\n disposable.dispose()\n```\n\n`watchPath` accepts the following arguments:\n\n`rootPath` {String} specifies the absolute path to the root of the filesystem content to watch.\n\n`options` Control the watcher's behavior. Currently a placeholder.\n\n`eventCallback` {Function} to be called each time a batch of filesystem events is observed. Each event object has\nthe keys: `action`, a {String} describing the filesystem action that occurred, one of `\"created\"`, `\"modified\"`,\n`\"deleted\"`, or `\"renamed\"`; `path`, a {String} containing the absolute path to the filesystem entry that was acted\nupon; for rename events only, `oldPath`, a {String} containing the filesystem entry's former absolute path."
    },
    "Point": {
      "name": "Point",
      "filename": "src/point.coffee",
      "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L12",
      "sections": [
        {
          "name": "Properties",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Comparison",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Operations",
          "description": ""
        },
        {
          "name": "Comparison",
          "description": ""
        },
        {
          "name": "Conversion",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "fromObject",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L36",
          "visibility": "Public",
          "summary": "Convert any point-compatible object to a {Point}.",
          "description": "Convert any point-compatible object to a {Point}.",
          "arguments": [
            {
              "name": "object",
              "description": "This can be an object that's already a {Point}, in which case it's simply returned, or an array containing two {Number}s representing the row and column.",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "copy",
              "description": "An optional boolean indicating whether to force the copying of objects that are already points.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns: A {Point} based on the given object."
            }
          ]
        },
        {
          "name": "min",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L55",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "point1",
              "description": "{Point}",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "point2",
              "description": "{Point} ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns the given {Point} that is earlier in the buffer."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L87",
          "visibility": "Public",
          "summary": "Construct a {Point} object",
          "description": "Construct a {Point} object",
          "arguments": [
            {
              "name": "row",
              "description": "{Number} row",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "column",
              "description": "{Number} column ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "copy",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L94",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a new {Point} with the same row and column."
            }
          ]
        },
        {
          "name": "negate",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L98",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a new {Point} with the row and column negated."
            }
          ]
        },
        {
          "name": "freeze",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L108",
          "visibility": "Public",
          "summary": "Makes this point immutable and returns itself.",
          "description": "Makes this point immutable and returns itself.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns an immutable version of this {Point}"
            }
          ]
        },
        {
          "name": "translate",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L118",
          "visibility": "Public",
          "summary": "Build and return a new point by adding the rows and columns of\nthe given point.",
          "description": "Build and return a new point by adding the rows and columns of\nthe given point.",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} whose row and column will be added to this point's row and column to build the returned point.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "traverse",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L142",
          "visibility": "Public",
          "summary": "Build and return a new {Point} by traversing the rows and columns\nspecified by the given point.",
          "description": "Build and return a new {Point} by traversing the rows and columns\nspecified by the given point.\n\nThis method differs from the direct, vector-style addition offered by\n{::translate}. Rather than adding the rows and columns directly, it derives\nthe new point from traversing in \"typewriter space\". At the end of every row\ntraversed, a carriage return occurs that returns the columns to 0 before\ncontinuing the traversal.",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} providing the rows and columns to traverse by.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L181",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns `-1` if this point precedes the argument."
            },
            {
              "type": null,
              "description": "Returns `0` if this point is equivalent to the argument."
            },
            {
              "type": null,
              "description": "Returns `1` if this point follows the argument."
            }
          ]
        },
        {
          "name": "isEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L199",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point has the same row\nand column as the given {Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isLessThan",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L208",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point precedes the given\n{Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isLessThanOrEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L215",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point precedes or is\nequal to the given {Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isGreaterThan",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L222",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point follows the given\n{Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isGreaterThanOrEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L229",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point follows or is\nequal to the given {Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "toArray",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L256",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of this point's row and column."
            }
          ]
        },
        {
          "name": "serialize",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L260",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of this point's row and column."
            }
          ]
        },
        {
          "name": "toString",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L264",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a string representation of the point."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "row",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L18",
          "visibility": "Public",
          "summary": "A zero-indexed {Number} representing the row of the {Point}. ",
          "description": "A zero-indexed {Number} representing the row of the {Point}. "
        },
        {
          "name": "column",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/point.coffee#L21",
          "visibility": "Public",
          "summary": "A zero-indexed {Number} representing the column of the {Point}. ",
          "description": "A zero-indexed {Number} representing the column of the {Point}. "
        }
      ],
      "visibility": "Public",
      "summary": "Represents a point in a buffer in row/column coordinates.",
      "description": "Represents a point in a buffer in row/column coordinates.\n\nEvery public method that takes a point also accepts a *point-compatible*\n{Array}. This means a 2-element array containing {Number}s representing the\nrow and column. So the following are equivalent:\n\n```coffee\nnew Point(1, 2)\n[1, 2] # Point compatible Array\n```"
    },
    "Project": {
      "name": "Project",
      "superClass": "Model",
      "filename": "src/project.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L16",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Accessing the git repository",
          "description": ""
        },
        {
          "name": "Managing Paths",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangePaths",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L188",
          "visibility": "Public",
          "summary": "Invoke the given callback when the project paths change.",
          "description": "Invoke the given callback when the project paths change.",
          "arguments": [
            {
              "children": [
                {
                  "name": "projectPaths",
                  "description": "An {Array} of {String} project paths.",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the project paths change.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddBuffer",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L199",
          "visibility": "Public",
          "summary": "Invoke the given callback when a text buffer is added to the\nproject.",
          "description": "Invoke the given callback when a text buffer is added to the\nproject.",
          "arguments": [
            {
              "children": [
                {
                  "name": "buffer",
                  "description": "A {TextBuffer} item.",
                  "type": "TextBuffer",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when a text buffer is added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeBuffers",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L210",
          "visibility": "Public",
          "summary": "Invoke the given callback with all current and future text\nbuffers in the project.",
          "description": "Invoke the given callback with all current and future text\nbuffers in the project.",
          "arguments": [
            {
              "children": [
                {
                  "name": "buffer",
                  "description": "A {TextBuffer} item.",
                  "type": "TextBuffer",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future text buffers.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeFiles",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L255",
          "visibility": "Extended",
          "summary": "Invoke a callback when a filesystem change occurs within any open\nproject path.",
          "description": "Invoke a callback when a filesystem change occurs within any open\nproject path.\n\n```js\nconst disposable = atom.project.onDidChangeFiles(events => {\n  for (const event of events) {\n    // \"created\", \"modified\", \"deleted\", or \"renamed\"\n    console.log(`Event action: ${event.action}`)\n\n    // absolute path to the filesystem entry that was touched\n    console.log(`Event path: ${event.path}`)\n\n    if (event.action === 'renamed') {\n      console.log(`.. renamed from: ${event.oldPath}`)\n    }\n  }\n})\n\ndisposable.dispose()\n```\n\nTo watch paths outside of open projects, use the `watchPaths` function instead; see {PathWatcher}.\n\nWhen writing tests against functionality that uses this method, be sure to wait for the\n{Promise} returned by {::getWatcherPromise} before manipulating the filesystem to ensure that\nthe watcher is receiving events.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "action",
                      "description": "{String} describing the filesystem action that occurred. One of `\"created\"`, `\"modified\"`, `\"deleted\"`, or `\"renamed\"`.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "path",
                      "description": "{String} containing the absolute path to the filesystem entry that was acted upon.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "oldPath",
                      "description": "For rename events, {String} containing the filesystem entry's former absolute path.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "events",
                  "description": "An {Array} of objects that describe a batch of filesystem events.",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with batches of filesystem events reported by the operating system.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} to manage this event subscription."
            }
          ]
        },
        {
          "name": "observeRepositories",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L269",
          "visibility": "Public",
          "summary": "Invoke the given callback with all current and future\nrepositories in the project.",
          "description": "Invoke the given callback with all current and future\nrepositories in the project.",
          "arguments": [
            {
              "children": [
                {
                  "name": "repository",
                  "description": "A {GitRepository} that is present at the time of subscription or that is added at some later time.",
                  "type": "GitRepository",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future  repositories.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to\nunsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddRepository",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L287",
          "visibility": "Public",
          "summary": "Invoke the given callback when a repository is added to the\nproject.",
          "description": "Invoke the given callback when a repository is added to the\nproject.",
          "arguments": [
            {
              "children": [
                {
                  "name": "repository",
                  "description": "A {GitRepository}.",
                  "type": "GitRepository",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when a repository is added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to\nunsubscribe."
            }
          ]
        },
        {
          "name": "getRepositories",
          "sectionName": "Accessing the git repository",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L305",
          "visibility": "Public",
          "summary": "Get an {Array} of {GitRepository}s associated with the project's\ndirectories.",
          "description": "Get an {Array} of {GitRepository}s associated with the project's\ndirectories.\n\nThis method will be removed in 2.0 because it does synchronous I/O.\nPrefer the following, which evaluates to a {Promise} that resolves to an\n{Array} of {GitRepository} objects:\n\n```\nPromise.all(atom.project.getDirectories().map(\n    atom.project.repositoryForDirectory.bind(atom.project)))\n```"
        },
        {
          "name": "repositoryForDirectory",
          "sectionName": "Accessing the git repository",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L316",
          "visibility": "Public",
          "summary": "Get the repository for a given directory asynchronously.",
          "description": "Get the repository for a given directory asynchronously.",
          "arguments": [
            {
              "name": "directory",
              "description": "{Directory} for which to get a {GitRepository}.",
              "type": "Directory",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with either:\n\n* {GitRepository} if a repository can be created for the given directory\n* `null` if no repository can be created for the given directory."
            }
          ]
        },
        {
          "name": "getPaths",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L352",
          "visibility": "Public",
          "summary": "Get an {Array} of {String}s containing the paths of the project's\ndirectories.",
          "description": "Get an {Array} of {String}s containing the paths of the project's\ndirectories."
        },
        {
          "name": "setPaths",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L370",
          "visibility": "Public",
          "summary": "Set the paths of the project's directories.",
          "description": "Set the paths of the project's directories.",
          "arguments": [
            {
              "name": "projectPaths",
              "description": "{Array} of {String} paths.",
              "type": "Array",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "mustExist",
                  "description": "If `true`, throw an Error if any `projectPaths` do not exist. Any remaining `projectPaths` that do exist will still be added to the project. Default: `false`.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "exact",
                  "description": "If `true`, only add a `projectPath` if it names an existing directory. If `false` and any `projectPath` is a file or does not exist, its parent directory will be added instead. Default: `false`.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An optional {Object} that may contain the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "addPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L418",
          "visibility": "Public",
          "summary": "Add a path to the project's list of root paths",
          "description": "Add a path to the project's list of root paths",
          "arguments": [
            {
              "name": "projectPath",
              "description": "{String} The path to the directory to add.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "mustExist",
                  "description": "If `true`, throw an Error if the `projectPath` does not exist. If `false`, a `projectPath` that does not exist is ignored. Default: `false`.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "exact",
                  "description": "If `true`, only add `projectPath` if it names an existing directory. If `false`, if `projectPath` is a a file or does not exist, its parent directory will be added instead.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An optional {Object} that may contain the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getWatcherPromise",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L520",
          "visibility": "Extended",
          "summary": "Access a {Promise} that resolves when the filesystem watcher associated with a project\nroot directory is ready to begin receiving events.",
          "description": "Access a {Promise} that resolves when the filesystem watcher associated with a project\nroot directory is ready to begin receiving events.\n\nThis is especially useful in test cases, where it's important to know that the watcher is\nready before manipulating the filesystem to produce events.",
          "arguments": [
            {
              "name": "projectPath",
              "description": "{String} One of the project's root directories.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with the {PathWatcher} associated with this project root\nonce it has initialized and is ready to start sending events. The Promise will reject with\nan error instead if `projectPath` is not currently a root directory."
            }
          ]
        },
        {
          "name": "removePath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L530",
          "visibility": "Public",
          "summary": "remove a path from the project's list of root paths.",
          "description": "remove a path from the project's list of root paths.",
          "arguments": [
            {
              "name": "projectPath",
              "description": "{String} The path to remove.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getDirectories",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L563",
          "visibility": "Public",
          "summary": "Get an {Array} of {Directory}s associated with this project.",
          "description": "Get an {Array} of {Directory}s associated with this project."
        },
        {
          "name": "relativizePath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L604",
          "visibility": "Public",
          "summary": "Get the path to the project directory that contains the given path,\nand the relative path from that project directory to the given path.",
          "description": "Get the path to the project directory that contains the given path,\nand the relative path from that project directory to the given path.",
          "arguments": [
            {
              "name": "fullPath",
              "description": "{String} An absolute path.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} with two elements:\n\n* `projectPath` The {String} path to the project directory that contains the\n  given path, or `null` if none is found.\n* `relativePath` {String} The relative path from the project directory to\n  the given path."
            }
          ]
        },
        {
          "name": "contains",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/project.js#L644",
          "visibility": "Public",
          "summary": "Determines whether the given path (real or symbolic) is inside the\nproject's directory.",
          "description": "Determines whether the given path (real or symbolic) is inside the\nproject's directory.\n\nThis method does not actually check if the path exists, it just checks their\nlocations relative to each other.",
          "arguments": [
            {
              "name": "pathToCheck",
              "description": "{String} path",
              "type": "String",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "Basic operation",
              "lang": "coffee",
              "code": "# Project's root directory is /foo/bar\nproject.contains('/foo/bar/baz')        # => true\nproject.contains('/usr/lib/baz')        # => false",
              "raw": "```coffee\n# Project's root directory is /foo/bar\nproject.contains('/foo/bar/baz')        # => true\nproject.contains('/usr/lib/baz')        # => false\n```"
            },
            {
              "description": "Existence of the path is not required",
              "lang": "coffee",
              "code": "# Project's root directory is /foo/bar\nfs.existsSync('/foo/bar/baz')           # => false\nproject.contains('/foo/bar/baz')        # => true",
              "raw": "```coffee\n# Project's root directory is /foo/bar\nfs.existsSync('/foo/bar/baz')           # => false\nproject.contains('/foo/bar/baz')        # => true\n```"
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether the path is inside the project's root directory."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents a project that's opened in Atom.",
      "description": "Represents a project that's opened in Atom.\n\nAn instance of this class is always available as the `atom.project` global."
    },
    "Range": {
      "name": "Range",
      "filename": "src/range.coffee",
      "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L18",
      "sections": [
        {
          "name": "Properties",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Serialization and Deserialization",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Serialization and Deserialization",
          "description": ""
        },
        {
          "name": "Range Details",
          "description": ""
        },
        {
          "name": "Operations",
          "description": ""
        },
        {
          "name": "Comparison",
          "description": ""
        },
        {
          "name": "Conversion",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "fromObject",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L42",
          "visibility": "Public",
          "summary": "Convert any range-compatible object to a {Range}.",
          "description": "Convert any range-compatible object to a {Range}.",
          "arguments": [
            {
              "name": "object",
              "description": "This can be an object that's already a {Range}, in which case it's simply returned, or an array containing two {Point}s or point-compatible arrays.",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "copy",
              "description": "An optional boolean indicating whether to force the copying of objects that are already ranges.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns: A {Range} based on the given object."
            }
          ]
        },
        {
          "name": "deserialize",
          "sectionName": "Serialization and Deserialization",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L102",
          "visibility": "Public",
          "summary": "Call this with the result of {Range::serialize} to construct a new Range.",
          "description": "Call this with the result of {Range::serialize} to construct a new Range.",
          "arguments": [
            {
              "name": "array",
              "description": "{Array} of params to pass to the {::constructor} ",
              "type": "Array",
              "isOptional": false
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L116",
          "visibility": "Public",
          "summary": "Construct a {Range} object",
          "description": "Construct a {Range} object",
          "arguments": [
            {
              "name": "pointA",
              "description": "{Point} or Point compatible {Array} (default: [0,0])",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "pointB",
              "description": "{Point} or Point compatible {Array} (default: [0,0]) ",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "copy",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L131",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a new range with the same start and end positions."
            }
          ]
        },
        {
          "name": "negate",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L135",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a new range with the start and end positions negated."
            }
          ]
        },
        {
          "name": "serialize",
          "sectionName": "Serialization and Deserialization",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L143",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a plain javascript object representation of the range."
            }
          ]
        },
        {
          "name": "isEmpty",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L153",
          "visibility": "Public",
          "summary": "Is the start position of this range equal to the end position?",
          "description": "Is the start position of this range equal to the end position?",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isSingleLine",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L158",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range starts and ends on\nthe same row."
            }
          ]
        },
        {
          "name": "getRowCount",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L164",
          "visibility": "Public",
          "summary": "Get the number of rows in this range.",
          "description": "Get the number of rows in this range.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "getRows",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L168",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of all rows in the range."
            }
          ]
        },
        {
          "name": "freeze",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L179",
          "visibility": "Public",
          "summary": "Freezes the range and its start and end point so it becomes\nimmutable and returns itself.",
          "description": "Freezes the range and its start and end point so it becomes\nimmutable and returns itself.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns an immutable version of this {Range}"
            }
          ]
        },
        {
          "name": "union",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L187",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array} ",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a new range that contains this range and the given range."
            }
          ]
        },
        {
          "name": "translate",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L200",
          "visibility": "Public",
          "summary": "Build and return a new range by translating this range's start and\nend points by the given delta(s).",
          "description": "Build and return a new range by translating this range's start and\nend points by the given delta(s).",
          "arguments": [
            {
              "name": "startDelta",
              "description": "A {Point} by which to translate the start of this range.",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "endDelta",
              "description": "A {Point} to by which to translate the end of this range. If omitted, the `startDelta` will be used instead.",
              "type": "Point",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "traverse",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L212",
          "visibility": "Public",
          "summary": "Build and return a new range by traversing this range's start and\nend points by the given delta.",
          "description": "Build and return a new range by traversing this range's start and\nend points by the given delta.\n\nSee {Point::traverse} for details of how traversal differs from translation.",
          "arguments": [
            {
              "name": "delta",
              "description": "A {Point} containing the rows and columns to traverse to derive the new range.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L226",
          "visibility": "Public",
          "summary": "Compare two Ranges",
          "description": "Compare two Ranges",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns `-1` if this range starts before the argument or contains it."
            },
            {
              "type": null,
              "description": "Returns `0` if this range is equivalent to the argument."
            },
            {
              "type": null,
              "description": "Returns `1` if this range starts after the argument or is contained by it."
            }
          ]
        },
        {
          "name": "isEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L237",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}. ",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range has the same start\nand end points as the given {Range} or range-compatible {Array}."
            }
          ]
        },
        {
          "name": "coversSameRows",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L246",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}. ",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range starts and ends on\nthe same row as the argument."
            }
          ]
        },
        {
          "name": "intersectsWith",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L256",
          "visibility": "Public",
          "summary": "Determines whether this range intersects with the argument.",
          "description": "Determines whether this range intersects with the argument.",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "exclusive",
              "description": "{Boolean} indicating whether to exclude endpoints   when testing for intersection. Defaults to `false`.",
              "type": "Boolean",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "containsRange",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L268",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "exclusive",
              "description": "{Boolean} including that the containment should be exclusive of endpoints. Defaults to false. ",
              "type": "Boolean",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range contains the given\nrange."
            }
          ]
        },
        {
          "name": "containsPoint",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L278",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "point",
              "description": "A {Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "exclusive",
              "description": "{Boolean} including that the containment should be exclusive of endpoints. Defaults to false. ",
              "type": "Boolean",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range contains the given\npoint."
            }
          ]
        },
        {
          "name": "intersectsRow",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L289",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "row",
              "description": "Row {Number} ",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range intersects the\ngiven row {Number}."
            }
          ]
        },
        {
          "name": "intersectsRowRange",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L297",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "startRow",
              "description": "{Number} start row",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "endRow",
              "description": "{Number} end row ",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range intersects the\nrow range indicated by the given startRow and endRow {Number}s."
            }
          ]
        },
        {
          "name": "toString",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L317",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a string representation of the range."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "start",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L24",
          "visibility": "Public",
          "summary": "A {Point} representing the start of the {Range}. ",
          "description": "A {Point} representing the start of the {Range}. "
        },
        {
          "name": "end",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/range.coffee#L27",
          "visibility": "Public",
          "summary": "A {Point} representing the end of the {Range}. ",
          "description": "A {Point} representing the end of the {Range}. "
        }
      ],
      "visibility": "Public",
      "summary": "Represents a region in a buffer in row/column coordinates.",
      "description": "Represents a region in a buffer in row/column coordinates.\n\nEvery public method that takes a range also accepts a *range-compatible*\n{Array}. This means a 2-element array containing {Point}s or point-compatible\narrays. So the following are equivalent:",
      "examples": [
        {
          "description": "",
          "lang": "coffee",
          "code": "new Range(new Point(0, 1), new Point(2, 3))\nnew Range([0, 1], [2, 3])\n[[0, 1], [2, 3]] # Range compatible array",
          "raw": "```coffee\nnew Range(new Point(0, 1), new Point(2, 3))\nnew Range([0, 1], [2, 3])\n[[0, 1], [2, 3]] # Range compatible array\n```"
        }
      ]
    },
    "ScopeDescriptor": {
      "name": "ScopeDescriptor",
      "superClass": null,
      "filename": "src/scope-descriptor.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/scope-descriptor.js#L20",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/scope-descriptor.js#L37",
          "visibility": "Public",
          "summary": "Create a {ScopeDescriptor} object.",
          "description": "Create a {ScopeDescriptor} object.",
          "arguments": [
            {
              "children": [
                {
                  "name": "scopes",
                  "description": "{Array} of {String}s",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "object",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getScopesArray",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/scope-descriptor.js#L42",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Wraps an {Array} of `String`s. The Array describes a path from the\nroot of the syntax tree to a token including _all_ scope names for the entire\npath.",
      "description": "Wraps an {Array} of `String`s. The Array describes a path from the\nroot of the syntax tree to a token including _all_ scope names for the entire\npath.\n\nMethods that take a `ScopeDescriptor` will also accept an {Array} of {String}\nscope names e.g. `['.source.js']`.\n\nYou can use `ScopeDescriptor`s to get language-specific config settings via\n{Config::get}.\n\nYou should not need to create a `ScopeDescriptor` directly.\n\n* {TextEditor::getRootScopeDescriptor} to get the language's descriptor.\n* {TextEditor::scopeDescriptorForBufferPosition} to get the descriptor at a\n  specific position in the buffer.\n* {Cursor::getScopeDescriptor} to get a cursor's descriptor based on position.\n\nSee the [scopes and scope descriptor guide](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)\nfor more information."
    },
    "Selection": {
      "name": "Selection",
      "superClass": null,
      "filename": "src/selection.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L9",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Managing the selection range",
          "description": ""
        },
        {
          "name": "Info about the selection",
          "description": ""
        },
        {
          "name": "Modifying the selected range",
          "description": ""
        },
        {
          "name": "Modifying the selected text",
          "description": ""
        },
        {
          "name": "Managing multiple selections",
          "description": ""
        },
        {
          "name": "Comparing to other selections",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangeRange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L50",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the selection was moved.",
          "description": "Calls your `callback` when the selection was moved.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldBufferRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "oldScreenRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newBufferRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newScreenRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "selection",
                      "description": "{Selection} that triggered the event",
                      "type": "Selection",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L59",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the selection was destroyed",
          "description": "Calls your `callback` when the selection was destroyed",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getScreenRange",
          "sectionName": "Managing the selection range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L68",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the screen {Range} for the selection."
            }
          ]
        },
        {
          "name": "setScreenRange",
          "sectionName": "Managing the selection range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L76",
          "visibility": "Public",
          "summary": "Modifies the screen range for the selection.",
          "description": "Modifies the screen range for the selection.",
          "arguments": [
            {
              "name": "screenRange",
              "description": "The new {Range} to use.",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "{Object} options matching those found in {::setBufferRange}.",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getBufferRange",
          "sectionName": "Managing the selection range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L84",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the buffer {Range} for the selection."
            }
          ]
        },
        {
          "name": "setBufferRange",
          "sectionName": "Managing the selection range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L99",
          "visibility": "Public",
          "summary": "Modifies the buffer {Range} for the selection.",
          "description": "Modifies the buffer {Range} for the selection.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "The new {Range} to select.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} indicating whether to set the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "preserveFolds",
                  "description": "if `true`, the fold settings are preserved after the selection moves.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "autoscroll",
                  "description": "{Boolean} indicating whether to autoscroll to the new range. Defaults to `true` if this is the most recently added selection, `false` otherwise.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getBufferRowRange",
          "sectionName": "Managing the selection range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L125",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the starting and ending buffer rows the selection is\nhighlighting."
            },
            {
              "type": "Array",
              "description": "Returns an {Array} of two {Number}s: the starting row, and the ending row."
            }
          ]
        },
        {
          "name": "isEmpty",
          "sectionName": "Info about the selection",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L154",
          "visibility": "Public",
          "summary": "Determines if the selection contains anything.",
          "description": "Determines if the selection contains anything."
        },
        {
          "name": "isReversed",
          "sectionName": "Info about the selection",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L162",
          "visibility": "Public",
          "summary": "Determines if the ending position of a marker is greater than the\nstarting position.",
          "description": "Determines if the ending position of a marker is greater than the\nstarting position.\n\nThis can happen when, for example, you highlight text \"up\" in a {TextBuffer}."
        },
        {
          "name": "isSingleScreenLine",
          "sectionName": "Info about the selection",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L167",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns whether the selection is a single line or not."
            }
          ]
        },
        {
          "name": "getText",
          "sectionName": "Info about the selection",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L172",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the text in the selection."
            }
          ]
        },
        {
          "name": "intersectsBufferRange",
          "sectionName": "Info about the selection",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L181",
          "visibility": "Public",
          "summary": "Identifies if a selection intersects with a given buffer range.",
          "description": "Identifies if a selection intersects with a given buffer range.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "A {Range} to check against.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}"
            }
          ]
        },
        {
          "name": "intersectsWith",
          "sectionName": "Info about the selection",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L198",
          "visibility": "Public",
          "summary": "Identifies if a selection intersects with another selection.",
          "description": "Identifies if a selection intersects with another selection.",
          "arguments": [
            {
              "name": "otherSelection",
              "description": "A {Selection} to check against.",
              "type": "Selection",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}"
            }
          ]
        },
        {
          "name": "clear",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L215",
          "visibility": "Public",
          "summary": "Clears the selection, moving the marker to the head.",
          "description": "Clears the selection, moving the marker to the head.",
          "arguments": [
            {
              "children": [
                {
                  "name": "autoscroll",
                  "description": "{Boolean} indicating whether to autoscroll to the new range. Defaults to `true` if this is the most recently added selection, `false` otherwise.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectToScreenPosition",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L230",
          "visibility": "Public",
          "summary": "Selects the text from the current cursor position to a given screen\nposition.",
          "description": "Selects the text from the current cursor position to a given screen\nposition.",
          "arguments": [
            {
              "name": "position",
              "description": "An instance of {Point}, with a given `row` and `column`.",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "selectToBufferPosition",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L261",
          "visibility": "Public",
          "summary": "Selects the text from the current cursor position to a given buffer\nposition.",
          "description": "Selects the text from the current cursor position to a given buffer\nposition.",
          "arguments": [
            {
              "name": "position",
              "description": "An instance of {Point}, with a given `row` and `column`.",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "selectRight",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L268",
          "visibility": "Public",
          "summary": "Selects the text one position right of the cursor.",
          "description": "Selects the text one position right of the cursor.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectLeft",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L275",
          "visibility": "Public",
          "summary": "Selects the text one position left of the cursor.",
          "description": "Selects the text one position left of the cursor.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectUp",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L282",
          "visibility": "Public",
          "summary": "Selects all the text one position above the cursor.",
          "description": "Selects all the text one position above the cursor.",
          "arguments": [
            {
              "name": "rowCount",
              "description": "{Number} number of rows to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectDown",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L289",
          "visibility": "Public",
          "summary": "Selects all the text one position below the cursor.",
          "description": "Selects all the text one position below the cursor.",
          "arguments": [
            {
              "name": "rowCount",
              "description": "{Number} number of rows to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectToTop",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L295",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the top of\nthe buffer.",
          "description": "Selects all the text from the current cursor position to the top of\nthe buffer."
        },
        {
          "name": "selectToBottom",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L301",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the bottom\nof the buffer.",
          "description": "Selects all the text from the current cursor position to the bottom\nof the buffer."
        },
        {
          "name": "selectAll",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L306",
          "visibility": "Public",
          "summary": "Selects all the text in the buffer.",
          "description": "Selects all the text in the buffer."
        },
        {
          "name": "selectToBeginningOfLine",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L312",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the\nbeginning of the line.",
          "description": "Selects all the text from the current cursor position to the\nbeginning of the line."
        },
        {
          "name": "selectToFirstCharacterOfLine",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L318",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the first\ncharacter of the line.",
          "description": "Selects all the text from the current cursor position to the first\ncharacter of the line."
        },
        {
          "name": "selectToEndOfLine",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L324",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the end of\nthe screen line.",
          "description": "Selects all the text from the current cursor position to the end of\nthe screen line."
        },
        {
          "name": "selectToEndOfBufferLine",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L330",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the end of\nthe buffer line.",
          "description": "Selects all the text from the current cursor position to the end of\nthe buffer line."
        },
        {
          "name": "selectToBeginningOfWord",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L336",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the\nbeginning of the word.",
          "description": "Selects all the text from the current cursor position to the\nbeginning of the word."
        },
        {
          "name": "selectToEndOfWord",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L342",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the end of\nthe word.",
          "description": "Selects all the text from the current cursor position to the end of\nthe word."
        },
        {
          "name": "selectToBeginningOfNextWord",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L348",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the\nbeginning of the next word.",
          "description": "Selects all the text from the current cursor position to the\nbeginning of the next word."
        },
        {
          "name": "selectToPreviousWordBoundary",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L353",
          "visibility": "Public",
          "summary": "Selects text to the previous word boundary.",
          "description": "Selects text to the previous word boundary."
        },
        {
          "name": "selectToNextWordBoundary",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L358",
          "visibility": "Public",
          "summary": "Selects text to the next word boundary.",
          "description": "Selects text to the next word boundary."
        },
        {
          "name": "selectToPreviousSubwordBoundary",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L363",
          "visibility": "Public",
          "summary": "Selects text to the previous subword boundary.",
          "description": "Selects text to the previous subword boundary."
        },
        {
          "name": "selectToNextSubwordBoundary",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L368",
          "visibility": "Public",
          "summary": "Selects text to the next subword boundary.",
          "description": "Selects text to the next subword boundary."
        },
        {
          "name": "selectToBeginningOfNextParagraph",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L374",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the\nbeginning of the next paragraph.",
          "description": "Selects all the text from the current cursor position to the\nbeginning of the next paragraph."
        },
        {
          "name": "selectToBeginningOfPreviousParagraph",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L380",
          "visibility": "Public",
          "summary": "Selects all the text from the current cursor position to the\nbeginning of the previous paragraph.",
          "description": "Selects all the text from the current cursor position to the\nbeginning of the previous paragraph."
        },
        {
          "name": "selectWord",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L389",
          "visibility": "Public",
          "summary": "Modifies the selection to encompass the current word.",
          "description": "Modifies the selection to encompass the current word.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "expandOverWord",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L405",
          "visibility": "Public",
          "summary": "Expands the newest selection to include the entire word on which\nthe cursors rests.",
          "description": "Expands the newest selection to include the entire word on which\nthe cursors rests."
        },
        {
          "name": "selectLine",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L420",
          "visibility": "Public",
          "summary": "Selects an entire line in the buffer.",
          "description": "Selects an entire line in the buffer.",
          "arguments": [
            {
              "name": "row",
              "description": "The line {Number} to select (default: the row of the cursor).",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "expandOverLine",
          "sectionName": "Modifying the selected range",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L446",
          "visibility": "Public",
          "summary": "Expands the newest selection to include the entire line on which\nthe cursor currently rests.",
          "description": "Expands the newest selection to include the entire line on which\nthe cursor currently rests.\n\nIt also includes the newline character."
        },
        {
          "name": "insertText",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L501",
          "visibility": "Public",
          "summary": "Replaces text at the current selection.",
          "description": "Replaces text at the current selection.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} representing the text to add",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "select",
                  "description": "If `true`, selects the newly added text.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "autoIndent",
                  "description": "If `true`, indents all inserted text appropriately.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "autoIndentNewline",
                  "description": "If `true`, indent newline appropriately.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "autoDecreaseIndent",
                  "description": "If `true`, decreases indent level appropriately (for example, when a closing bracket is inserted).",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "preserveTrailingLineIndentation",
                  "description": "By default, when pasting multiple lines, Atom attempts to preserve the relative indent level between the first line and trailing lines, even if the indent level of the first line has changed from the copied text. If this option is `true`, this behavior is suppressed. level between the first lines and the trailing lines.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "*Deprecated* If `skip`, skips the undo stack for this operation. This property is deprecated. Call groupLastChanges() on the {TextBuffer} afterward instead.",
                  "type": "TextBuffer",
                  "isOptional": false
                },
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object} with keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "backspace",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L594",
          "visibility": "Public",
          "summary": "Removes the first character before the selection if the selection\nis empty otherwise it deletes the selection.",
          "description": "Removes the first character before the selection if the selection\nis empty otherwise it deletes the selection.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToPreviousWordBoundary",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L606",
          "visibility": "Public",
          "summary": "Removes the selection or, if nothing is selected, then all\ncharacters from the start of the selection back to the previous word\nboundary.",
          "description": "Removes the selection or, if nothing is selected, then all\ncharacters from the start of the selection back to the previous word\nboundary.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToNextWordBoundary",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L618",
          "visibility": "Public",
          "summary": "Removes the selection or, if nothing is selected, then all\ncharacters from the start of the selection up to the next word\nboundary.",
          "description": "Removes the selection or, if nothing is selected, then all\ncharacters from the start of the selection up to the next word\nboundary.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToBeginningOfWord",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L629",
          "visibility": "Public",
          "summary": "Removes from the start of the selection to the beginning of the\ncurrent word if the selection is empty otherwise it deletes the selection.",
          "description": "Removes from the start of the selection to the beginning of the\ncurrent word if the selection is empty otherwise it deletes the selection.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToBeginningOfLine",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L640",
          "visibility": "Public",
          "summary": "Removes from the beginning of the line which the selection begins on\nall the way through to the end of the selection.",
          "description": "Removes from the beginning of the line which the selection begins on\nall the way through to the end of the selection.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "delete",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L655",
          "visibility": "Public",
          "summary": "Removes the selection or the next character after the start of the\nselection if the selection is empty.",
          "description": "Removes the selection or the next character after the start of the\nselection if the selection is empty.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToEndOfLine",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L668",
          "visibility": "Public",
          "summary": "If the selection is empty, removes all text from the cursor to the\nend of the line. If the cursor is already at the end of the line, it\nremoves the following newline. If the selection isn't empty, only deletes\nthe contents of the selection.",
          "description": "If the selection is empty, removes all text from the cursor to the\nend of the line. If the cursor is already at the end of the line, it\nremoves the following newline. If the selection isn't empty, only deletes\nthe contents of the selection.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToEndOfWord",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L685",
          "visibility": "Public",
          "summary": "Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected.",
          "description": "Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToBeginningOfSubword",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L696",
          "visibility": "Public",
          "summary": "Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected.",
          "description": "Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToEndOfSubword",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L707",
          "visibility": "Public",
          "summary": "Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected.",
          "description": "Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteSelectedText",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L717",
          "visibility": "Public",
          "summary": "Removes only the selected text.",
          "description": "Removes only the selected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteLine",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L730",
          "visibility": "Public",
          "summary": "Removes the line at the beginning of the selection if the selection\nis empty unless the selection spans multiple lines in which case all lines\nare removed.",
          "description": "Removes the line at the beginning of the selection if the selection\nis empty unless the selection spans multiple lines in which case all lines\nare removed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "joinLines",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L761",
          "visibility": "Public",
          "summary": "Joins the current line with the one below it. Lines will\nbe separated by a single space.",
          "description": "Joins the current line with the one below it. Lines will\nbe separated by a single space.\n\nIf there selection spans more than one line, all the lines are joined together.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "outdentSelectedRows",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L820",
          "visibility": "Public",
          "summary": "Removes one level of indent from the currently selected rows.",
          "description": "Removes one level of indent from the currently selected rows.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "autoIndentSelectedRows",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L840",
          "visibility": "Public",
          "summary": "Sets the indentation level of all selected rows to values suggested\nby the relevant grammars.",
          "description": "Sets the indentation level of all selected rows to values suggested\nby the relevant grammars.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "toggleLineComments",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L853",
          "visibility": "Public",
          "summary": "Wraps the selected lines in comments if they aren't currently part\nof a comment.",
          "description": "Wraps the selected lines in comments if they aren't currently part\nof a comment.\n\nRemoves the comment if they are currently wrapped in a comment.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "cutToEndOfLine",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L867",
          "visibility": "Public",
          "summary": "Cuts the selection until the end of the screen line.",
          "description": "Cuts the selection until the end of the screen line.",
          "arguments": [
            {
              "name": "maintainClipboard",
              "description": "{Boolean}",
              "type": "Boolean",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "cutToEndOfBufferLine",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L878",
          "visibility": "Public",
          "summary": "Cuts the selection until the end of the buffer line.",
          "description": "Cuts the selection until the end of the buffer line.",
          "arguments": [
            {
              "name": "maintainClipboard",
              "description": "{Boolean}",
              "type": "Boolean",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "cut",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L889",
          "visibility": "Public",
          "summary": "Copies the selection to the clipboard and then deletes it.",
          "description": "Copies the selection to the clipboard and then deletes it.",
          "arguments": [
            {
              "name": "maintainClipboard",
              "description": "{Boolean} (default: false) See {::copy}",
              "type": "Boolean",
              "isOptional": false
            },
            {
              "name": "fullLine",
              "description": "{Boolean} (default: false) See {::copy}",
              "type": "Boolean",
              "isOptional": false
            },
            {
              "name": "bypassReadOnly",
              "description": "{Boolean} (default: false) Must be `true` to modify text within a read-only editor.",
              "type": "Boolean",
              "isOptional": false
            }
          ]
        },
        {
          "name": "copy",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L904",
          "visibility": "Public",
          "summary": "Copies the current selection to the clipboard.",
          "description": "Copies the current selection to the clipboard.",
          "arguments": [
            {
              "name": "maintainClipboard",
              "description": "{Boolean} if `true`, a specific metadata property is created to store each content copied to the clipboard. The clipboard `text` still contains the concatenation of the clipboard with the current selection. (default: false)",
              "type": "Boolean",
              "isOptional": false
            },
            {
              "name": "fullLine",
              "description": "{Boolean} if `true`, the copied text will always be pasted at the beginning of the line containing the cursor, regardless of the cursor's horizontal position. (default: false)",
              "type": "Boolean",
              "isOptional": false
            }
          ]
        },
        {
          "name": "fold",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L944",
          "visibility": "Public",
          "summary": "Creates a fold containing the current selection.",
          "description": "Creates a fold containing the current selection."
        },
        {
          "name": "indentSelectedRows",
          "sectionName": "Modifying the selected text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L1011",
          "visibility": "Public",
          "summary": "If the selection spans multiple rows, indent all of them.",
          "description": "If the selection spans multiple rows, indent all of them.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify text within a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object} with the keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "addSelectionBelow",
          "sectionName": "Managing multiple selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L1026",
          "visibility": "Public",
          "summary": "Moves the selection down one row.",
          "description": "Moves the selection down one row."
        },
        {
          "name": "addSelectionAbove",
          "sectionName": "Managing multiple selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L1060",
          "visibility": "Public",
          "summary": "Moves the selection up one row.",
          "description": "Moves the selection up one row."
        },
        {
          "name": "merge",
          "sectionName": "Managing multiple selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L1094",
          "visibility": "Public",
          "summary": "Combines the given selection into this selection and then destroys\nthe given selection.",
          "description": "Combines the given selection into this selection and then destroys\nthe given selection.",
          "arguments": [
            {
              "name": "otherSelection",
              "description": "A {Selection} to merge with.",
              "type": "Selection",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "{Object} options matching those found in {::setBufferRange}.",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparing to other selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/selection.js#L1124",
          "visibility": "Public",
          "summary": "Compare this selection's buffer range to another selection's buffer\nrange.",
          "description": "Compare this selection's buffer range to another selection's buffer\nrange.\n\nSee {Range::compare} for more details.",
          "arguments": [
            {
              "name": "otherSelection",
              "description": "A {Selection} to compare against",
              "type": "Selection",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents a selection in the {TextEditor}.",
      "description": "Represents a selection in the {TextEditor}."
    },
    "StyleManager": {
      "name": "StyleManager",
      "superClass": null,
      "filename": "src/style-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L15",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Reading Style Elements",
          "description": ""
        },
        {
          "name": "Paths",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "observeStyleElements",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L53",
          "visibility": "Extended",
          "summary": "Invoke `callback` for all current and future style elements.",
          "description": "Invoke `callback` for all current and future style elements.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "sourcePath",
                      "description": "A {String} containing the path from which the style element was loaded.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "context",
                      "description": "A {String} indicating the target context of the style element.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it. The style element will also have the following non-standard properties:",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "onDidAddStyleElement",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L76",
          "visibility": "Extended",
          "summary": "Invoke `callback` when a style element is added.",
          "description": "Invoke `callback` when a style element is added.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "sourcePath",
                      "description": "A {String} containing the path from which the style element was loaded.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "context",
                      "description": "A {String} indicating the target context of the style element.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it. The style element will also have the following non-standard properties:",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "onDidRemoveStyleElement",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L87",
          "visibility": "Extended",
          "summary": "Invoke `callback` when a style element is removed.",
          "description": "Invoke `callback` when a style element is removed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "onDidUpdateStyleElement",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L104",
          "visibility": "Extended",
          "summary": "Invoke `callback` when an existing style element is updated.",
          "description": "Invoke `callback` when an existing style element is updated.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "sourcePath",
                      "description": "A {String} containing the path from which the style element was loaded.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "context",
                      "description": "A {String} indicating the target context of the style element.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance. The `.sheet` property  will be null because this element isn't attached to the DOM. The style  element will also have the following non-standard properties:",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "getStyleElements",
          "sectionName": "Reading Style Elements",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L117",
          "visibility": "Extended",
          "summary": "Get all loaded style elements.",
          "description": "Get all loaded style elements."
        },
        {
          "name": "getUserStyleSheetPath",
          "sectionName": "Paths",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/style-manager.js#L269",
          "visibility": "Extended",
          "summary": "Get the path of the user style sheet in `~/.atom`.",
          "description": "Get the path of the user style sheet in `~/.atom`.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A singleton instance of this class available via `atom.styles`,\nwhich you can use to globally query and observe the set of active style\nsheets. The `StyleManager` doesn't add any style elements to the DOM on its\nown, but is instead subscribed to by individual `<atom-styles>` elements,\nwhich clone and attach style elements in different contexts.",
      "description": "A singleton instance of this class available via `atom.styles`,\nwhich you can use to globally query and observe the set of active style\nsheets. The `StyleManager` doesn't add any style elements to the DOM on its\nown, but is instead subscribed to by individual `<atom-styles>` elements,\nwhich clone and attach style elements in different contexts."
    },
    "Task": {
      "name": "Task",
      "filename": "src/task.coffee",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L40",
      "sections": [],
      "classMethods": [
        {
          "name": "once",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L48",
          "visibility": "Public",
          "summary": "A helper method to easily launch and run a task once.",
          "description": "A helper method to easily launch and run a task once.",
          "arguments": [
            {
              "name": "taskPath",
              "description": "The {String} path to the CoffeeScript/JavaScript file which exports a single {Function} to execute.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "args",
              "description": "The arguments to pass to the exported function.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Task",
              "description": "Returns the created {Task}."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L66",
          "visibility": "Public",
          "summary": "Creates a task. You should probably use {.once}",
          "description": "Creates a task. You should probably use {.once}",
          "arguments": [
            {
              "name": "taskPath",
              "description": "The {String} path to the CoffeeScript/JavaScript file that exports a single {Function} to execute. ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "start",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L107",
          "visibility": "Public",
          "summary": "Starts the task.",
          "description": "Starts the task.\n\nThrows an error if this task has already been terminated or if sending a\nmessage to the child process fails.",
          "arguments": [
            {
              "name": "args",
              "description": "The arguments to pass to the function exported by this task's script.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "callback",
              "description": "A {Function} to call when the task completes. ",
              "type": "Function",
              "isOptional": true
            }
          ]
        },
        {
          "name": "send",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L124",
          "visibility": "Public",
          "summary": "Send message to the task.",
          "description": "Send message to the task.\n\nThrows an error if this task has already been terminated or if sending a\nmessage to the child process fails.",
          "arguments": [
            {
              "name": "message",
              "description": "The message to send to the task. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "on",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L137",
          "visibility": "Public",
          "summary": "Call a function when an event is emitted by the child process",
          "description": "Call a function when an event is emitted by the child process",
          "arguments": [
            {
              "name": "eventName",
              "description": "The {String} name of the event to handle.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "callback",
              "description": "The {Function} to call when the event is emitted.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} that can be used to stop listening for the event."
            }
          ]
        },
        {
          "name": "once",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L139",
          "visibility": "Public",
          "summary": "A helper method to easily launch and run a task once.",
          "description": "A helper method to easily launch and run a task once.",
          "arguments": [
            {
              "name": "taskPath",
              "description": "The {String} path to the CoffeeScript/JavaScript file which exports a single {Function} to execute.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "args",
              "description": "The arguments to pass to the exported function.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Task",
              "description": "Returns the created {Task}."
            }
          ]
        },
        {
          "name": "terminate",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L147",
          "visibility": "Public",
          "summary": "Forcefully stop the running task.",
          "description": "Forcefully stop the running task.\n\nNo more events are emitted once this method is called. "
        },
        {
          "name": "cancel",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/task.coffee#L161",
          "visibility": "Public",
          "summary": "Cancel the running task and emit an event if it was canceled.",
          "description": "Cancel the running task and emit an event if it was canceled.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the task was terminated."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Run a node script in a separate process.",
      "description": "Run a node script in a separate process.\n\nUsed by the fuzzy-finder and [find in project](https://github.com/atom/atom/blob/master/src/scan-handler.coffee).\n\nFor a real-world example, see the [scan-handler](https://github.com/atom/atom/blob/master/src/scan-handler.coffee)\nand the [instantiation of the task](https://github.com/atom/atom/blob/4a20f13162f65afc816b512ad7201e528c3443d7/src/project.coffee#L245).",
      "examples": [
        {
          "description": "In your package code:",
          "lang": "coffee",
          "code": "{Task} = require 'atom'\n\ntask = Task.once '/path/to/task-file.coffee', parameter1, parameter2, ->\n  console.log 'task has finished'\n\ntask.on 'some-event-from-the-task', (data) =>\n  console.log data.someString # prints 'yep this is it'",
          "raw": "```coffee\n{Task} = require 'atom'\n\ntask = Task.once '/path/to/task-file.coffee', parameter1, parameter2, ->\n  console.log 'task has finished'\n\ntask.on 'some-event-from-the-task', (data) =>\n  console.log data.someString # prints 'yep this is it'\n```"
        },
        {
          "description": "In `'/path/to/task-file.coffee'`:",
          "lang": "coffee",
          "code": "module.exports = (parameter1, parameter2) ->\n  # Indicates that this task will be async.\n  # Call the `callback` to finish the task\n  callback = @async()\n\n  emit('some-event-from-the-task', {someString: 'yep this is it'})\n\n  callback()",
          "raw": "```coffee\nmodule.exports = (parameter1, parameter2) ->\n  # Indicates that this task will be async.\n  # Call the `callback` to finish the task\n  callback = @async()\n\n  emit('some-event-from-the-task', {someString: 'yep this is it'})\n\n  callback()\n```"
        }
      ]
    },
    "TextBuffer": {
      "name": "TextBuffer",
      "superClass": null,
      "filename": "src/text-buffer.js",
      "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L62",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "File Details",
          "description": ""
        },
        {
          "name": "Reading Text",
          "description": ""
        },
        {
          "name": "Mutating Text",
          "description": ""
        },
        {
          "name": "Markers",
          "description": ""
        },
        {
          "name": "History",
          "description": ""
        },
        {
          "name": "Search And Replace",
          "description": ""
        },
        {
          "name": "Buffer Range Details",
          "description": ""
        },
        {
          "name": "Buffer Operations",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "load",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L142",
          "visibility": "Public",
          "summary": "Create a new buffer backed by the given file path.",
          "description": "Create a new buffer backed by the given file path.",
          "arguments": [
            {
              "name": "source",
              "description": "Either a {String} path to a local file or (experimentally) a file {Object} as described by the {::setFile} method.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "encoding",
                  "description": "{String} The file's encoding.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "shouldDestroyOnFileDelete",
                  "description": "A {Function} that returns a {Boolean} indicating whether the buffer should be destroyed if its file is deleted.",
                  "type": "Function",
                  "isOptional": true
                }
              ],
              "name": "params",
              "description": "An {Object} with the following properties:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with a {TextBuffer} instance."
            }
          ]
        },
        {
          "name": "loadSync",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L169",
          "visibility": "Public",
          "summary": "Create a new buffer backed by the given file path. For better\nperformance, use {TextBuffer.load} instead.",
          "description": "Create a new buffer backed by the given file path. For better\nperformance, use {TextBuffer.load} instead.",
          "arguments": [
            {
              "name": "filePath",
              "description": "The {String} file path.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "encoding",
                  "description": "{String} The file's encoding.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "shouldDestroyOnFileDelete",
                  "description": "A {Function} that returns a {Boolean} indicating whether the buffer should be destroyed if its file is deleted.",
                  "type": "Function",
                  "isOptional": true
                }
              ],
              "name": "params",
              "description": "An {Object} with the following properties:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "TextBuffer",
              "description": "Returns a {TextBuffer} instance."
            }
          ]
        },
        {
          "name": "deserialize",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L187",
          "visibility": "Public",
          "summary": "Restore a {TextBuffer} based on an earlier state created using\nthe {TextBuffer::serialize} method.",
          "description": "Restore a {TextBuffer} based on an earlier state created using\nthe {TextBuffer::serialize} method.",
          "arguments": [
            {
              "name": "params",
              "description": "An {Object} returned from {TextBuffer::serialize}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with a {TextBuffer} instance."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L74",
          "visibility": "Public",
          "summary": "Create a new buffer with the given params.",
          "description": "Create a new buffer with the given params.",
          "arguments": [
            {
              "children": [
                {
                  "name": "text",
                  "description": "The initial {String} text of the buffer.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "shouldDestroyOnFileDelete",
                  "description": "A {Function} that returns a {Boolean} indicating whether the buffer should be destroyed if its file is deleted.",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "{Object} or {String} of text",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onWillChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L303",
          "visibility": "Public",
          "summary": "Invoke the given callback synchronously _before_ the content of the\nbuffer changes.",
          "description": "Invoke the given callback synchronously _before_ the content of the\nbuffer changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the buffer changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L327",
          "visibility": "Public",
          "summary": "Invoke the given callback synchronously when a transaction finishes\nwith a list of all the changes in the transaction.",
          "description": "Invoke the given callback synchronously when a transaction finishes\nwith a list of all the changes in the transaction.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldRange",
                      "description": "The smallest combined {Range} containing all of the old text.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newRange",
                      "description": "The smallest combined {Range} containing all of the new text.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "children": [
                        {
                          "name": "oldRange",
                          "description": "The {Range} of the deleted text in the contents of the buffer as it existed *before* the batch of changes reported by this event.",
                          "type": "Range",
                          "isOptional": false
                        },
                        {
                          "name": "newRange",
                          "description": "The {Range} of the inserted text in the current contents of the buffer.",
                          "type": "Range",
                          "isOptional": false
                        },
                        {
                          "name": "oldText",
                          "description": "A {String} representing the deleted text.",
                          "type": "String",
                          "isOptional": false
                        },
                        {
                          "name": "newText",
                          "description": "A {String} representing the inserted text.",
                          "type": "String",
                          "isOptional": false
                        }
                      ],
                      "name": "changes",
                      "description": "{Array} of {Object}s summarizing the aggregated changes that occurred during the transaction. See *Working With Aggregated Changes* in the description of the {TextBuffer} class for details.",
                      "type": "Array",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when a transaction in which textual changes occurred is completed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeText",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L332",
          "visibility": "Public",
          "summary": "This is now identical to {::onDidChange}.",
          "description": "This is now identical to {::onDidChange}."
        },
        {
          "name": "onDidStopChanging",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L358",
          "visibility": "Public",
          "summary": "Invoke the given callback asynchronously following one or more\nchanges after {::getStoppedChangingDelay} milliseconds elapse without an\nadditional change.",
          "description": "Invoke the given callback asynchronously following one or more\nchanges after {::getStoppedChangingDelay} milliseconds elapse without an\nadditional change.\n\nThis method can be used to perform potentially expensive operations that\ndon't need to be performed synchronously. If you need to run your callback\nsynchronously, use {::onDidChange} instead.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "name": "oldRange",
                          "description": "The {Range} of the deleted text in the contents of the buffer as it existed *before* the batch of changes reported by this event.",
                          "type": "Range",
                          "isOptional": false
                        },
                        {
                          "name": "newRange",
                          "description": "The {Range} of the inserted text in the current contents of the buffer.",
                          "type": "Range",
                          "isOptional": false
                        },
                        {
                          "name": "oldText",
                          "description": "A {String} representing the deleted text.",
                          "type": "String",
                          "isOptional": false
                        },
                        {
                          "name": "newText",
                          "description": "A {String} representing the inserted text.",
                          "type": "String",
                          "isOptional": false
                        }
                      ],
                      "name": "changes",
                      "description": "An {Array} containing {Object}s summarizing the aggregated changes. See *Working With Aggregated Changes* in the description of the {TextBuffer} class for details.",
                      "type": "Array",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the buffer stops changing.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidConflict",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L368",
          "visibility": "Public",
          "summary": "Invoke the given callback when the in-memory contents of the\nbuffer become in conflict with the contents of the file on disk.",
          "description": "Invoke the given callback when the in-memory contents of the\nbuffer become in conflict with the contents of the file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the buffer enters conflict.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeModified",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L378",
          "visibility": "Public",
          "summary": "Invoke the given callback if the value of {::isModified} changes.",
          "description": "Invoke the given callback if the value of {::isModified} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "modified",
                  "description": "{Boolean} indicating whether the buffer is modified.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when {::isModified} changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidUpdateMarkers",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L400",
          "visibility": "Public",
          "summary": "Invoke the given callback when all marker `::onDidChange`\nobservers have been notified following a change to the buffer.",
          "description": "Invoke the given callback when all marker `::onDidChange`\nobservers have been notified following a change to the buffer.\n\nThe order of events following a buffer change is as follows:\n\n* The text of the buffer is changed\n* All markers are updated accordingly, but their `::onDidChange` observers\n  are not notified.\n* `TextBuffer::onDidChange` observers are notified.\n* `Marker::onDidChange` observers are notified.\n* `TextBuffer::onDidUpdateMarkers` observers are notified.\n\nBasically, this method gives you a way to take action after both a buffer\nchange and all associated marker changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after markers are updated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidCreateMarker",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L410",
          "visibility": "Public",
          "summary": "Invoke the given callback when a marker is created.",
          "description": "Invoke the given callback when a marker is created.",
          "arguments": [
            {
              "children": [
                {
                  "name": "marker",
                  "description": "{Marker} that was created.",
                  "type": "Marker",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when a marker is created.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangePath",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L420",
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::getPath} changes.",
          "description": "Invoke the given callback when the value of {::getPath} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "path",
                  "description": "{String} representing the buffer's current path on disk.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the path changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeEncoding",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L430",
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::getEncoding} changes.",
          "description": "Invoke the given callback when the value of {::getEncoding} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "encoding",
                  "description": "{String} character set encoding of the buffer.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the encoding changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillSave",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L440",
          "visibility": "Public",
          "summary": "Invoke the given callback before the buffer is saved to disk.",
          "description": "Invoke the given callback before the buffer is saved to disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the buffer is saved. If this function returns a {Promise}, then the buffer will not be saved until the promise resolves.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidSave",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L451",
          "visibility": "Public",
          "summary": "Invoke the given callback after the buffer is saved to disk.",
          "description": "Invoke the given callback after the buffer is saved to disk.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "path",
                      "description": "The path to which the buffer was saved.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the buffer is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDelete",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L461",
          "visibility": "Public",
          "summary": "Invoke the given callback after the file backing the buffer is\ndeleted.",
          "description": "Invoke the given callback after the file backing the buffer is\ndeleted.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after the buffer is deleted.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillReload",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L471",
          "visibility": "Public",
          "summary": "Invoke the given callback before the buffer is reloaded from the\ncontents of its file on disk.",
          "description": "Invoke the given callback before the buffer is reloaded from the\ncontents of its file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the buffer is reloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidReload",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L481",
          "visibility": "Public",
          "summary": "Invoke the given callback after the buffer is reloaded from the\ncontents of its file on disk.",
          "description": "Invoke the given callback after the buffer is reloaded from the\ncontents of its file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after the buffer is reloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L490",
          "visibility": "Public",
          "summary": "Invoke the given callback when the buffer is destroyed.",
          "description": "Invoke the given callback when the buffer is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the buffer is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillThrowWatchError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L504",
          "visibility": "Public",
          "summary": "Invoke the given callback when there is an error in watching the\nfile.",
          "description": "Invoke the given callback when there is an error in watching the\nfile.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "error",
                      "description": "{Object} the error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "handle",
                      "description": "{Function} call this to indicate you have handled the error. The error will not be thrown if this function is called.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "errorObject",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} callback",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getStoppedChangingDelay",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L512",
          "visibility": "Public",
          "summary": "Get the number of milliseconds that will elapse without a change\nbefore {::onDidStopChanging} observers are invoked following a change.",
          "description": "Get the number of milliseconds that will elapse without a change\nbefore {::onDidStopChanging} observers are invoked following a change.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "isModified",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L526",
          "visibility": "Public",
          "summary": "Determine if the in-memory contents of the buffer differ from its\ncontents on disk.",
          "description": "Determine if the in-memory contents of the buffer differ from its\ncontents on disk.\n\nIf the buffer is unsaved, always returns `true` unless the buffer is empty.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isInConflict",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L538",
          "visibility": "Public",
          "summary": "Determine if the in-memory contents of the buffer conflict with the\non-disk contents of its associated file.",
          "description": "Determine if the in-memory contents of the buffer conflict with the\non-disk contents of its associated file.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L545",
          "visibility": "Public",
          "summary": "Get the path of the associated file.",
          "description": "Get the path of the associated file.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "setPath",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L552",
          "visibility": "Public",
          "summary": "Set the path for the buffer's associated file.",
          "description": "Set the path for the buffer's associated file.",
          "arguments": [
            {
              "name": "filePath",
              "description": "A {String} representing the new file path",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "setEncoding",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L593",
          "visibility": "Public",
          "summary": "Sets the character set encoding for this buffer.",
          "description": "Sets the character set encoding for this buffer.",
          "arguments": [
            {
              "name": "encoding",
              "description": "The {String} encoding to use (default: 'utf8').",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getEncoding",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L611",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} encoding of this buffer."
            }
          ]
        },
        {
          "name": "getUri",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L626",
          "visibility": "Public",
          "summary": "Get the path of the associated file.",
          "description": "Get the path of the associated file.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "isEmpty",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L647",
          "visibility": "Public",
          "summary": "Determine whether the buffer is empty.",
          "description": "Determine whether the buffer is empty.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getText",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L655",
          "visibility": "Public",
          "summary": "Get the entire text of the buffer. Avoid using this unless you know that the\nbuffer's text is reasonably short.",
          "description": "Get the entire text of the buffer. Avoid using this unless you know that the\nbuffer's text is reasonably short.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "getTextInRange",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L669",
          "visibility": "Public",
          "summary": "Get the text in a range.",
          "description": "Get the text in a range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range}",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}"
            }
          ]
        },
        {
          "name": "getLines",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L676",
          "visibility": "Public",
          "summary": "Get the text of all lines in the buffer, without their line endings.",
          "description": "Get the text of all lines in the buffer, without their line endings.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s."
            }
          ]
        },
        {
          "name": "getLastLine",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L684",
          "visibility": "Public",
          "summary": "Get the text of the last line of the buffer, without its line\nending.",
          "description": "Get the text of the last line of the buffer, without its line\nending.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "lineForRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L694",
          "visibility": "Public",
          "summary": "Get the text of the line at the given 0-indexed row, without its\nline ending.",
          "description": "Get the text of the line at the given 0-indexed row, without its\nline ending.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing the row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "lineEndingForRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L705",
          "visibility": "Public",
          "summary": "Get the line ending for the given 0-indexed row.",
          "description": "Get the line ending for the given 0-indexed row.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} indicating the row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}. The returned newline is represented as a literal string:\n`'\\n'`, `'\\r\\n'`, or `''` for the last line of the buffer, which\ndoesn't end in a newline."
            }
          ]
        },
        {
          "name": "lineLengthForRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L715",
          "visibility": "Public",
          "summary": "Get the length of the line for the given 0-indexed row, without its\nline ending.",
          "description": "Get the length of the line for the given 0-indexed row, without its\nline ending.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} indicating the row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "isRowBlank",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L724",
          "visibility": "Public",
          "summary": "Determine if the given row contains only whitespace.",
          "description": "Determine if the given row contains only whitespace.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing a 0-indexed row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "previousNonBlankRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L733",
          "visibility": "Public",
          "summary": "Given a row, find the first preceding row that's not blank.",
          "description": "Given a row, find the first preceding row that's not blank.",
          "arguments": [
            {
              "name": "startRow",
              "description": "A {Number} identifying the row to start checking at.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} or `null` if there's no preceding non-blank row."
            }
          ]
        },
        {
          "name": "nextNonBlankRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L747",
          "visibility": "Public",
          "summary": "Given a row, find the next row that's not blank.",
          "description": "Given a row, find the next row that's not blank.",
          "arguments": [
            {
              "name": "startRow",
              "description": "A {Number} identifying the row to start checking at.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} or `null` if there's no next non-blank row."
            }
          ]
        },
        {
          "name": "hasAstral",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L761",
          "visibility": "Extended",
          "summary": "Return true if the buffer contains any astral-plane Unicode characters that\nare encoded as surrogate pairs.",
          "description": "Return true if the buffer contains any astral-plane Unicode characters that\nare encoded as surrogate pairs.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "setText",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L779",
          "visibility": "Public",
          "summary": "Replace the entire contents of the buffer with the given text.",
          "description": "Replace the entire contents of the buffer with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String}",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range} spanning the new buffer contents."
            }
          ]
        },
        {
          "name": "setTextViaDiff",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L787",
          "visibility": "Public",
          "summary": "Replace the current buffer contents by applying a diff based on the\ngiven text.",
          "description": "Replace the current buffer contents by applying a diff based on the\ngiven text.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} containing the new buffer contents.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "setTextInRange",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L841",
          "visibility": "Public",
          "summary": "Set the text in the given range.",
          "description": "Set the text in the given range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range}",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "text",
              "description": "A {String}",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "*Deprecated* {String} 'skip' will cause this change to be grouped with the preceding change for the purposes of undo and redo. This property is deprecated. Call groupLastChanges() on the buffer after instead.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the inserted text."
            }
          ]
        },
        {
          "name": "insert",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L892",
          "visibility": "Public",
          "summary": "Insert text at the given position.",
          "description": "Insert text at the given position.",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} representing the insertion location. The position is clipped before insertion.",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "text",
              "description": "A {String} representing the text to insert.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "*Deprecated* {String} 'skip' will skip the undo system. This property is deprecated. Call groupLastChanges() on the {TextBuffer} afterward instead.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the inserted text."
            }
          ]
        },
        {
          "name": "append",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L906",
          "visibility": "Public",
          "summary": "Append text to the end of the buffer.",
          "description": "Append text to the end of the buffer.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} representing the text text to append.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "*Deprecated* {String} 'skip' will skip the undo system. This property is deprecated. Call groupLastChanges() on the {TextBuffer} afterward instead.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the inserted text"
            }
          ]
        },
        {
          "name": "delete",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L968",
          "visibility": "Public",
          "summary": "Delete the text in the given range.",
          "description": "Delete the text in the given range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} in which to delete. The range is clipped before deleting.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns an empty {Range} starting at the start of deleted range."
            }
          ]
        },
        {
          "name": "deleteRow",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L977",
          "visibility": "Public",
          "summary": "Delete the line associated with a specified 0-indexed row.",
          "description": "Delete the line associated with a specified 0-indexed row.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing the row to delete.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the deleted text."
            }
          ]
        },
        {
          "name": "deleteRows",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L990",
          "visibility": "Public",
          "summary": "Delete the lines associated with the specified 0-indexed row range.",
          "description": "Delete the lines associated with the specified 0-indexed row range.\n\nIf the row range is out of bounds, it will be clipped. If the `startRow` is\ngreater than the `endRow`, they will be reordered.",
          "arguments": [
            {
              "name": "startRow",
              "description": "A {Number} representing the first row to delete.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "endRow",
              "description": "A {Number} representing the last row to delete, inclusive.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the deleted text."
            }
          ]
        },
        {
          "name": "addMarkerLayer",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1040",
          "visibility": "Public",
          "summary": "Create a layer to contain a set of related markers.",
          "description": "Create a layer to contain a set of related markers.",
          "arguments": [
            {
              "children": [
                {
                  "name": "maintainHistory",
                  "description": "A {Boolean} indicating whether or not the state of this layer should be restored on undo/redo operations. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "persistent",
                  "description": "A {Boolean} indicating whether or not this marker layer should be serialized and deserialized along with the rest of the buffer. Defaults to `false`. If `true`, the marker layer's id will be maintained across the serialization boundary, allowing you to retrieve it via {::getMarkerLayer}.",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "role",
                  "description": "A {String} indicating role of this marker layer",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An {Object} contaning the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "MarkerLayer",
              "description": "Returns a {MarkerLayer}."
            }
          ]
        },
        {
          "name": "getMarkerLayer",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1052",
          "visibility": "Public",
          "summary": "Get a {MarkerLayer} by id.",
          "description": "Get a {MarkerLayer} by id.",
          "arguments": [
            {
              "name": "id",
              "description": "The id of the marker layer to retrieve.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "MarkerLayer",
              "description": "Returns a {MarkerLayer} or `undefined` if no layer exists with the given\nid."
            }
          ]
        },
        {
          "name": "getDefaultMarkerLayer",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1062",
          "visibility": "Public",
          "summary": "Get the default {MarkerLayer}.",
          "description": "Get the default {MarkerLayer}.\n\nAll {Marker} APIs not tied to an explicit layer interact with this default\nlayer.",
          "returnValues": [
            {
              "type": "MarkerLayer",
              "description": "Returns a {MarkerLayer}."
            }
          ]
        },
        {
          "name": "markRange",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1099",
          "visibility": "Public",
          "summary": "Create a {Marker} with the given range in the default {MarkerLayer}.\nThis marker will maintain its logical location as the buffer is changed,\nso if you mark a particular word, the marker will remain over that word\neven if the word's location in the buffer changes.",
          "description": "Create a {Marker} with the given range in the default {MarkerLayer}.\nThis marker will maintain its logical location as the buffer is changed,\nso if you mark a particular word, the marker will remain over that word\neven if the word's location in the buffer changes.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "{Boolean} Creates the marker in a reversed orientation. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "properties",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "markPosition",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1130",
          "visibility": "Public",
          "summary": "Create a {Marker} at the given position with no tail in the default\nmarker layer.",
          "description": "Create a {Marker} at the given position with no tail in the default\nmarker layer.",
          "arguments": [
            {
              "name": "position",
              "description": "{Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "exclusive",
                  "description": "{Boolean} indicating whether insertions at the start or end of the marked range should be interpreted as happening *outside* the marker. Defaults to `false`, except when using the `inside` invalidation strategy or when when the marker has no tail, in which case it defaults to true. Explicitly assigning this option overrides behavior in all circumstances.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "getMarkers",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1137",
          "visibility": "Public",
          "summary": "Get all existing markers on the default marker layer.",
          "description": "Get all existing markers on the default marker layer.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Marker}s."
            }
          ]
        },
        {
          "name": "getMarker",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1146",
          "visibility": "Public",
          "summary": "Get an existing marker by its id from the default marker layer.",
          "description": "Get an existing marker by its id from the default marker layer.",
          "arguments": [
            {
              "name": "id",
              "description": "{Number} id of the marker to retrieve",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "findMarkers",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1171",
          "visibility": "Public",
          "summary": "Find markers conforming to the given parameters in the default\nmarker layer.",
          "description": "Find markers conforming to the given parameters in the default\nmarker layer.\n\nMarkers are sorted based on their position in the buffer. If two markers\nstart at the same position, the larger marker comes first.",
          "arguments": [
            {
              "children": [
                {
                  "name": "startPosition",
                  "description": "Only include markers that start at the given {Point}.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "endPosition",
                  "description": "Only include markers that end at the given {Point}.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "startsInRange",
                  "description": "Only include markers that start inside the given {Range}.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "endsInRange",
                  "description": "Only include markers that end inside the given {Range}.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "containsPoint",
                  "description": "Only include markers that contain the given {Point}, inclusive.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "containsRange",
                  "description": "Only include markers that contain the given {Range}, inclusive.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "startRow",
                  "description": "Only include markers that start at the given row {Number}.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "endRow",
                  "description": "Only include markers that end at the given row {Number}.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "intersectsRow",
                  "description": "Only include markers that intersect the given row {Number}.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "A hash of key-value pairs constraining the set of returned markers. You can query against custom marker properties by listing the desired key-value pairs here. In addition, the following keys are reserved and have special semantics:",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Marker}s."
            }
          ]
        },
        {
          "name": "getMarkerCount",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1178",
          "visibility": "Public",
          "summary": "Get the number of markers in the default marker layer.",
          "description": "Get the number of markers in the default marker layer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "undo",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1235",
          "visibility": "Public",
          "summary": "Undo the last operation. If a transaction is in progress, aborts it.",
          "description": "Undo the last operation. If a transaction is in progress, aborts it.",
          "arguments": [
            {
              "children": [
                {
                  "name": "selectionsMarkerLayer",
                  "description": "Restore snapshot of selections marker layer to given selectionsMarkerLayer.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} of whether or not a change was made."
            }
          ]
        },
        {
          "name": "redo",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1261",
          "visibility": "Public",
          "summary": "Redo the last operation",
          "description": "Redo the last operation",
          "arguments": [
            {
              "children": [
                {
                  "name": "selectionsMarkerLayer",
                  "description": "Restore snapshot of selections marker layer to given selectionsMarkerLayer.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} of whether or not a change was made."
            }
          ]
        },
        {
          "name": "transact",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1301",
          "visibility": "Public",
          "summary": "Batch multiple operations as a single undo/redo step.",
          "description": "Batch multiple operations as a single undo/redo step.\n\nAny group of operations that are logically grouped from the perspective of\nundoing and redoing should be performed in a transaction. If you want to\nabort the transaction, call {::abortTransaction} to terminate the function's\nexecution and revert any changes performed up to the abortion.",
          "arguments": [
            {
              "children": [
                {
                  "name": "groupingInterval",
                  "description": "The {Number} of milliseconds for which this transaction should be considered 'open for grouping' after it begins. If a transaction with a positive `groupingInterval` is committed while the previous transaction is still open for grouping, the two transactions are merged with respect to undo and redo.",
                  "type": "Number",
                  "isOptional": true
                },
                {
                  "name": "selectionsMarkerLayer",
                  "description": "When provided, skip taking snapshot for other selections markerLayers except given one.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "name": "groupingInterval",
              "description": "The {Number} of milliseconds for which this transaction should be considered 'open for grouping' after it begins. If a transaction with a positive `groupingInterval` is committed while the previous transaction is still open for grouping, the two transactions are merged with respect to undo and redo.",
              "type": "Number",
              "isOptional": true
            },
            {
              "name": "fn",
              "description": "A {Function} to call inside the transaction.",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "abortTransaction",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1345",
          "visibility": "Public",
          "summary": "Abort the currently running transaction",
          "description": "Abort the currently running transaction\n\nOnly intended to be called within the `fn` option to {::transact}"
        },
        {
          "name": "clearUndoStack",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1350",
          "visibility": "Public",
          "summary": "Clear the undo stack.",
          "description": "Clear the undo stack."
        },
        {
          "name": "createCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1362",
          "visibility": "Public",
          "summary": "Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "description": "Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "arguments": [
            {
              "children": [
                {
                  "name": "selectionsMarkerLayer",
                  "description": "When provided, skip taking snapshot for other selections markerLayers except given one.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a checkpoint id value."
            }
          ]
        },
        {
          "name": "revertToCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1380",
          "visibility": "Public",
          "summary": "Revert the buffer to the state it was in when the given\ncheckpoint was created.",
          "description": "Revert the buffer to the state it was in when the given\ncheckpoint was created.\n\nThe redo stack will be empty following this operation, so changes since the\ncheckpoint will be lost. If the given checkpoint is no longer present in the\nundo history, no changes will be made to the buffer and this method will\nreturn `false`.",
          "arguments": [
            {
              "name": "checkpoint",
              "description": "{Number} id of the checkpoint to revert to.",
              "type": "Number",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "selectionsMarkerLayer",
                  "description": "Restore snapshot of selections marker layer to given selectionsMarkerLayer.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "groupChangesSinceCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1411",
          "visibility": "Public",
          "summary": "Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.",
          "description": "Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.\n\nIf the given checkpoint is no longer present in the undo history, no\ngrouping will be performed and this method will return `false`.",
          "arguments": [
            {
              "name": "checkpoint",
              "description": "{Number} id of the checkpoint to group changes since.",
              "type": "Number",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "selectionsMarkerLayer",
                  "description": "When provided, skip taking snapshot for other selections markerLayers except given one.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "groupLastChanges",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1424",
          "visibility": "Public",
          "summary": "Group the last two text changes for purposes of undo/redo.",
          "description": "Group the last two text changes for purposes of undo/redo.\n\nThis operation will only succeed if there are two changes on the undo\nstack. It will not group past the beginning of an open transaction.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "getChangesSinceCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1443",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nIf the given checkpoint is no longer present in the undo history, this\nmethod will return an empty {Array}.",
          "arguments": [
            {
              "name": "checkpoint",
              "description": "{Number} id of the checkpoint to get changes since.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a list of changes since the given checkpoint."
            },
            {
              "type": "Array",
              "description": "Returns an {Array} of {Object}s with the following fields that summarize\n the aggregated changes since the checkpoint. See *Working With Aggregated\nChanges* in the description of the {TextBuffer} class for details.\n\n* `oldRange` The {Range} of the deleted text in the text as it existed when\n  the checkpoint was created.\n* `newRange`: The {Range} of the inserted text in the current text.\n* `oldText`: A {String} representing the deleted text.\n* `newText`: A {String} representing the inserted text."
            }
          ]
        },
        {
          "name": "scan",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1477",
          "visibility": "Public",
          "summary": "Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.",
          "description": "Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.\n\nIf you're programmatically modifying the results, you may want to try\n{::backwardsScan} to avoid tripping over your own changes.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "leadingContextLineCount",
                  "description": "{Number} default `0`; The number of lines before the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLineCount",
                  "description": "{Number} default `0`; The number of lines after the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "leadingContextLines",
                  "description": "An {Array} with `leadingContextLineCount` lines before the match.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLines",
                  "description": "An {Array} with `trailingContextLineCount` lines after the match.",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "backwardsScan",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1504",
          "visibility": "Public",
          "summary": "Scan regular expression matches in the entire buffer in reverse\norder, calling the given iterator function on each match.",
          "description": "Scan regular expression matches in the entire buffer in reverse\norder, calling the given iterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "leadingContextLineCount",
                  "description": "{Number} default `0`; The number of lines before the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLineCount",
                  "description": "{Number} default `0`; The number of lines after the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "leadingContextLines",
                  "description": "An {Array} with `leadingContextLineCount` lines before the match.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLines",
                  "description": "An {Array} with `trailingContextLineCount` lines after the match.",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "scanInRange",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1532",
          "visibility": "Public",
          "summary": "Scan regular expression matches in a given range , calling the given\niterator function on each match.",
          "description": "Scan regular expression matches in a given range , calling the given\niterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "A {Range} in which to search.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "leadingContextLineCount",
                  "description": "{Number} default `0`; The number of lines before the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLineCount",
                  "description": "{Number} default `0`; The number of lines after the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "leadingContextLines",
                  "description": "An {Array} with `leadingContextLineCount` lines before the match.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLines",
                  "description": "An {Array} with `trailingContextLineCount` lines after the match.",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "backwardsScanInRange",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1591",
          "visibility": "Public",
          "summary": "Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.",
          "description": "Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "A {Range} in which to search.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "leadingContextLineCount",
                  "description": "{Number} default `0`; The number of lines before the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLineCount",
                  "description": "{Number} default `0`; The number of lines after the  matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match.",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "replace",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1606",
          "visibility": "Public",
          "summary": "Replace all regular expression matches in the entire buffer.",
          "description": "Replace all regular expression matches in the entire buffer.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} representing the matches to be replaced.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "replacementText",
              "description": "A {String} representing the text to replace each match.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the number of replacements made."
            }
          ]
        },
        {
          "name": "getRange",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1751",
          "visibility": "Public",
          "summary": "Get the range spanning from `[0, 0]` to {::getEndPosition}.",
          "description": "Get the range spanning from `[0, 0]` to {::getEndPosition}.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getLineCount",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1758",
          "visibility": "Public",
          "summary": "Get the number of lines in the buffer.",
          "description": "Get the number of lines in the buffer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "getLastRow",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1763",
          "visibility": "Public",
          "summary": "Get the last 0-indexed row in the buffer.",
          "description": "Get the last 0-indexed row in the buffer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "getFirstPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1770",
          "visibility": "Public",
          "summary": "Get the first position in the buffer, which is always `[0, 0]`.",
          "description": "Get the first position in the buffer, which is always `[0, 0]`.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getEndPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1778",
          "visibility": "Public",
          "summary": "Get the maximal position in the buffer, where new text would be\nappended.",
          "description": "Get the maximal position in the buffer, where new text would be\nappended.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getLength",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1781",
          "visibility": "Public",
          "summary": "Get the length of the buffer's text.",
          "description": "Get the length of the buffer's text."
        },
        {
          "name": "getMaxCharacterIndex",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1786",
          "visibility": "Public",
          "summary": "Get the length of the buffer in characters.",
          "description": "Get the length of the buffer in characters.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "rangeForRow",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1798",
          "visibility": "Public",
          "summary": "Get the range for the given row",
          "description": "Get the range for the given row",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing a 0-indexed row.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "includeNewline",
              "description": "A {Boolean} indicating whether or not to include the newline, which results in a range that extends to the start of the next line. (default: `false`)",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "characterIndexForPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1816",
          "visibility": "Public",
          "summary": "Convert a position in the buffer in row/column coordinates to an\nabsolute character offset, inclusive of line ending characters.",
          "description": "Convert a position in the buffer in row/column coordinates to an\nabsolute character offset, inclusive of line ending characters.\n\nThe position is clipped prior to translating.",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} or point-compatible {Array}.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "positionForCharacterIndex",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1828",
          "visibility": "Public",
          "summary": "Convert an absolute character offset, inclusive of newlines, to a\nposition in the buffer in row/column coordinates.",
          "description": "Convert an absolute character offset, inclusive of newlines, to a\nposition in the buffer in row/column coordinates.\n\nThe offset is clipped prior to translating.",
          "arguments": [
            {
              "name": "offset",
              "description": "A {Number}.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "clipRange",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1841",
          "visibility": "Public",
          "summary": "Clip the given range so it starts and ends at valid positions.",
          "description": "Clip the given range so it starts and ends at valid positions.\n\nFor example, the position `[1, 100]` is out of bounds if the line at row 1 is\nonly 10 characters long, and it would be clipped to `(1, 10)`.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array} to clip.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the given {Range} if it is already in bounds, or a new clipped\n{Range} if the given range is out-of-bounds."
            }
          ]
        },
        {
          "name": "clipPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1861",
          "visibility": "Public",
          "summary": "Clip the given point so it is at a valid position in the buffer.",
          "description": "Clip the given point so it is at a valid position in the buffer.\n\nFor example, the position (1, 100) is out of bounds if the line at row 1 is\nonly 10 characters long, and it would be clipped to (1, 10)",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} or point-compatible {Array}.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a new {Point} if the given position is invalid, otherwise returns\nthe given position."
            }
          ]
        },
        {
          "name": "save",
          "sectionName": "Buffer Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1890",
          "visibility": "Public",
          "summary": "Save the buffer.",
          "description": "Save the buffer.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the save has completed."
            }
          ]
        },
        {
          "name": "saveAs",
          "sectionName": "Buffer Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1899",
          "visibility": "Public",
          "summary": "Save the buffer at a specific path.",
          "description": "Save the buffer at a specific path.",
          "arguments": [
            {
              "name": "filePath",
              "description": "The path to save at.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the save has completed."
            }
          ]
        },
        {
          "name": "reload",
          "sectionName": "Buffer Operations",
          "srcUrl": "https://github.com/atom/text-buffer/blob/v13.18.5/src/text-buffer.js#L1970",
          "visibility": "Public",
          "summary": "Reload the file's content from disk.",
          "description": "Reload the file's content from disk.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the load is complete."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A mutable text container with undo/redo support and the ability to\nannotate logical regions in the text.",
      "description": "A mutable text container with undo/redo support and the ability to\nannotate logical regions in the text.\n\n## Observing Changes\n\nYou can observe changes in a {TextBuffer} using methods like {::onDidChange},\n{::onDidStopChanging}, and {::getChangesSinceCheckpoint}. These methods report\naggregated buffer updates as arrays of change objects containing the following\nfields: `oldRange`, `newRange`, `oldText`, and `newText`. The `oldText`,\n`newText`, and `newRange` fields are self-explanatory, but the interepretation\nof `oldRange` is more nuanced:\n\nThe reported `oldRange` is the range of the replaced text in the original\ncontents of the buffer *irrespective of the spatial impact of any other\nreported change*. So, for example, if you wanted to apply all the changes made\nin a transaction to a clone of the observed buffer, the easiest approach would\nbe to apply the changes in reverse:\n\n```js\nbuffer1.onDidChange(({changes}) => {\n  for (const {oldRange, newText} of changes.reverse()) {\n    buffer2.setTextInRange(oldRange, newText)\n  }\n})\n```\n\nIf you needed to apply the changes in the forwards order, you would need to\nincorporate the impact of preceding changes into the range passed to\n{::setTextInRange}, as follows:\n\n```js\nbuffer1.onDidChange(({changes}) => {\n  for (const {oldRange, newRange, newText} of changes) {\n    const rangeToReplace = Range(\n      newRange.start,\n      newRange.start.traverse(oldRange.getExtent())\n    )\n    buffer2.setTextInRange(rangeToReplace, newText)\n  }\n})\n```"
    },
    "TextEditor": {
      "name": "TextEditor",
      "superClass": null,
      "filename": "src/text-editor.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L73",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Buffer",
          "description": ""
        },
        {
          "name": "File Details",
          "description": ""
        },
        {
          "name": "File Operations",
          "description": ""
        },
        {
          "name": "Reading Text",
          "description": ""
        },
        {
          "name": "Mutating Text",
          "description": ""
        },
        {
          "name": "History",
          "description": ""
        },
        {
          "name": "TextEditor Coordinates",
          "description": ""
        },
        {
          "name": "Decorations",
          "description": ""
        },
        {
          "name": "Markers",
          "description": ""
        },
        {
          "name": "Cursors",
          "description": ""
        },
        {
          "name": "Selections",
          "description": ""
        },
        {
          "name": "Searching and Replacing",
          "description": ""
        },
        {
          "name": "Tab Behavior",
          "description": ""
        },
        {
          "name": "Soft Wrap Behavior",
          "description": ""
        },
        {
          "name": "Indentation",
          "description": ""
        },
        {
          "name": "Grammars",
          "description": ""
        },
        {
          "name": "Managing Syntax Scopes",
          "description": ""
        },
        {
          "name": "Clipboard Operations",
          "description": ""
        },
        {
          "name": "Folds",
          "description": ""
        },
        {
          "name": "Gutters",
          "description": ""
        },
        {
          "name": "Scrolling the TextEditor",
          "description": ""
        },
        {
          "name": "TextEditor Rendering",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangeTitle",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L911",
          "visibility": "Essential",
          "summary": "Calls your `callback` when the buffer's title has changed.",
          "description": "Calls your `callback` when the buffer's title has changed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangePath",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L920",
          "visibility": "Essential",
          "summary": "Calls your `callback` when the buffer's path, and therefore title, has changed.",
          "description": "Calls your `callback` when the buffer's path, and therefore title, has changed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L934",
          "visibility": "Essential",
          "summary": "Invoke the given callback synchronously when the content of the\nbuffer changes.",
          "description": "Invoke the given callback synchronously when the content of the\nbuffer changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method. Consider {::onDidStopChanging} to\ndelay expensive operations until after changes stop occurring.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidStopChanging",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L945",
          "visibility": "Essential",
          "summary": "Invoke `callback` when the buffer's contents change. It is\nemit asynchronously 300ms after the last buffer change. This is a good place\nto handle changes to the buffer without compromising typing performance.",
          "description": "Invoke `callback` when the buffer's contents change. It is\nemit asynchronously 300ms after the last buffer change. This is a good place\nto handle changes to the buffer without compromising typing performance.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeCursorPosition",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L962",
          "visibility": "Essential",
          "summary": "Calls your `callback` when a {Cursor} is moved. If there are\nmultiple cursors, your callback will be called for each cursor.",
          "description": "Calls your `callback` when a {Cursor} is moved. If there are\nmultiple cursors, your callback will be called for each cursor.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldBufferPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "oldScreenPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newBufferPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "newScreenPosition",
                      "description": "{Point}",
                      "type": "Point",
                      "isOptional": false
                    },
                    {
                      "name": "textChanged",
                      "description": "{Boolean}",
                      "type": "Boolean",
                      "isOptional": false
                    },
                    {
                      "name": "cursor",
                      "description": "{Cursor} that triggered the event",
                      "type": "Cursor",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeSelectionRange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L977",
          "visibility": "Essential",
          "summary": "Calls your `callback` when a selection's screen range changes.",
          "description": "Calls your `callback` when a selection's screen range changes.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldBufferRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "oldScreenRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newBufferRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newScreenRange",
                      "description": "{Range}",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "selection",
                      "description": "{Selection} that triggered the event",
                      "type": "Selection",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeSoftWrapped",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L986",
          "visibility": "Extended",
          "summary": "Calls your `callback` when soft wrap was enabled or disabled.",
          "description": "Calls your `callback` when soft wrap was enabled or disabled.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeEncoding",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L995",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the buffer's encoding has changed.",
          "description": "Calls your `callback` when the buffer's encoding has changed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeGrammar",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1007",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the grammar that interprets and\ncolorizes the text has been changed. Immediately calls your callback with\nthe current grammar.",
          "description": "Calls your `callback` when the grammar that interprets and\ncolorizes the text has been changed. Immediately calls your callback with\nthe current grammar.",
          "arguments": [
            {
              "children": [
                {
                  "name": "grammar",
                  "description": "{Grammar}",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeGrammar",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1019",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the grammar that interprets and\ncolorizes the text has been changed.",
          "description": "Calls your `callback` when the grammar that interprets and\ncolorizes the text has been changed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "grammar",
                  "description": "{Grammar}",
                  "type": "Grammar",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeModified",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1030",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the result of {::isModified} changes.",
          "description": "Calls your `callback` when the result of {::isModified} changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidConflict",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1040",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the buffer's underlying file changes on\ndisk at a moment when the result of {::isModified} is true.",
          "description": "Calls your `callback` when the buffer's underlying file changes on\ndisk at a moment when the result of {::isModified} is true.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillInsertText",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1052",
          "visibility": "Extended",
          "summary": "Calls your `callback` before text has been inserted.",
          "description": "Calls your `callback` before text has been inserted.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "text",
                      "description": "{String} text to be inserted",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "cancel",
                      "description": "{Function} Call to prevent the text from being inserted",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "event {Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidInsertText",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1063",
          "visibility": "Extended",
          "summary": "Calls your `callback` after text has been inserted.",
          "description": "Calls your `callback` after text has been inserted.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "text",
                      "description": "{String} text to be inserted",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "event {Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidSave",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1074",
          "visibility": "Essential",
          "summary": "Invoke the given callback after the buffer is saved to disk.",
          "description": "Invoke the given callback after the buffer is saved to disk.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "path",
                      "description": "The path to which the buffer was saved.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the buffer is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1083",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the editor is destroyed.",
          "description": "Invoke the given callback when the editor is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the editor is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeCursors",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1094",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Cursor} is added to the editor.\nImmediately calls your callback for each existing cursor.",
          "description": "Calls your `callback` when a {Cursor} is added to the editor.\nImmediately calls your callback for each existing cursor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "cursor",
                  "description": "{Cursor} that was added",
                  "type": "Cursor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddCursor",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1105",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Cursor} is added to the editor.",
          "description": "Calls your `callback` when a {Cursor} is added to the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "cursor",
                  "description": "{Cursor} that was added",
                  "type": "Cursor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRemoveCursor",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1115",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Cursor} is removed from the editor.",
          "description": "Calls your `callback` when a {Cursor} is removed from the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "cursor",
                  "description": "{Cursor} that was removed",
                  "type": "Cursor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeSelections",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1126",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Selection} is added to the editor.\nImmediately calls your callback for each existing selection.",
          "description": "Calls your `callback` when a {Selection} is added to the editor.\nImmediately calls your callback for each existing selection.",
          "arguments": [
            {
              "children": [
                {
                  "name": "selection",
                  "description": "{Selection} that was added",
                  "type": "Selection",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddSelection",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1137",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Selection} is added to the editor.",
          "description": "Calls your `callback` when a {Selection} is added to the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "selection",
                  "description": "{Selection} that was added",
                  "type": "Selection",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRemoveSelection",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1147",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Selection} is removed from the editor.",
          "description": "Calls your `callback` when a {Selection} is removed from the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "selection",
                  "description": "{Selection} that was removed",
                  "type": "Selection",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeDecorations",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1158",
          "visibility": "Extended",
          "summary": "Calls your `callback` with each {Decoration} added to the editor.\nCalls your `callback` immediately for any existing decorations.",
          "description": "Calls your `callback` with each {Decoration} added to the editor.\nCalls your `callback` immediately for any existing decorations.",
          "arguments": [
            {
              "children": [
                {
                  "name": "decoration",
                  "description": "{Decoration}",
                  "type": "Decoration",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddDecoration",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1168",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Decoration} is added to the editor.",
          "description": "Calls your `callback` when a {Decoration} is added to the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "decoration",
                  "description": "{Decoration} that was added",
                  "type": "Decoration",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRemoveDecoration",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1178",
          "visibility": "Extended",
          "summary": "Calls your `callback` when a {Decoration} is removed from the editor.",
          "description": "Calls your `callback` when a {Decoration} is removed from the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "decoration",
                  "description": "{Decoration} that was removed",
                  "type": "Decoration",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangePlaceholderText",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1195",
          "visibility": "Extended",
          "summary": "Calls your `callback` when the placeholder text is changed.",
          "description": "Calls your `callback` when the placeholder text is changed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "placeholderText",
                  "description": "{String} new text",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeGutters",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1316",
          "visibility": "Essential",
          "summary": "Calls your `callback` when a {Gutter} is added to the editor.\nImmediately calls your callback for each existing gutter.",
          "description": "Calls your `callback` when a {Gutter} is added to the editor.\nImmediately calls your callback for each existing gutter.",
          "arguments": [
            {
              "children": [
                {
                  "name": "gutter",
                  "description": "{Gutter} that currently exists/was added.",
                  "type": "Gutter",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddGutter",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1326",
          "visibility": "Essential",
          "summary": "Calls your `callback` when a {Gutter} is added to the editor.",
          "description": "Calls your `callback` when a {Gutter} is added to the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "gutter",
                  "description": "{Gutter} that was added.",
                  "type": "Gutter",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRemoveGutter",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1336",
          "visibility": "Essential",
          "summary": "Calls your `callback` when a {Gutter} is removed from the editor.",
          "description": "Calls your `callback` when a {Gutter} is removed from the editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "name",
                  "description": "The name of the {Gutter} that was removed.",
                  "type": "Gutter",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getBuffer",
          "sectionName": "Buffer",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1363",
          "visibility": "Essential",
          "summary": "Retrieves the current {TextBuffer}.",
          "description": "Retrieves the current {TextBuffer}."
        },
        {
          "name": "getTitle",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1378",
          "visibility": "Essential",
          "summary": "Get the editor's title for display in other parts of the\nUI such as the tabs.",
          "description": "Get the editor's title for display in other parts of the\nUI such as the tabs.\n\nIf the editor's buffer is saved, its title is the file name. If it is\nunsaved, its title is \"untitled\".",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "getLongTitle",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1392",
          "visibility": "Essential",
          "summary": "Get unique title for display in other parts of the UI, such as\nthe window title.",
          "description": "Get unique title for display in other parts of the UI, such as\nthe window title.\n\nIf the editor's buffer is unsaved, its title is \"untitled\"\nIf the editor's buffer is saved, its unique title is formatted as one\nof the following,\n\n* \"<filename>\" when it is the only editing buffer with this file name.\n* \"<filename> — <unique-dir-prefix>\" when other buffers have this file name.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}"
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1437",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} path of this editor's text buffer."
            }
          ]
        },
        {
          "name": "getEncoding",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1453",
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} character set encoding of this editor's text\nbuffer."
            }
          ]
        },
        {
          "name": "setEncoding",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1461",
          "visibility": "Extended",
          "summary": "Set the character set encoding to use in this editor's text\nbuffer.",
          "description": "Set the character set encoding to use in this editor's text\nbuffer.",
          "arguments": [
            {
              "name": "encoding",
              "description": "The {String} character set encoding name such as 'utf8'",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "isModified",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1466",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean} `true` if this editor has been modified."
            }
          ]
        },
        {
          "name": "isEmpty",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1471",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean} `true` if this editor has no content."
            }
          ]
        },
        {
          "name": "save",
          "sectionName": "File Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1482",
          "visibility": "Essential",
          "summary": "Saves the editor's text buffer.",
          "description": "Saves the editor's text buffer.\n\nSee {TextBuffer::save} for more details."
        },
        {
          "name": "saveAs",
          "sectionName": "File Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1491",
          "visibility": "Essential",
          "summary": "Saves the editor's text buffer as the given path.",
          "description": "Saves the editor's text buffer as the given path.\n\nSee {TextBuffer::saveAs} for more details.",
          "arguments": [
            {
              "name": "filePath",
              "description": "A {String} path.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getText",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1520",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} representing the entire contents of the editor."
            }
          ]
        },
        {
          "name": "getTextInBufferRange",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1529",
          "visibility": "Essential",
          "summary": "Get the text in the given {Range} in buffer coordinates.",
          "description": "Get the text in the given {Range} in buffer coordinates.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "getLineCount",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1534",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the number of lines in the buffer."
            }
          ]
        },
        {
          "name": "getScreenLineCount",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1540",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the number of screen lines in the\neditor. This accounts for folds."
            }
          ]
        },
        {
          "name": "getLastBufferRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1550",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the last zero-indexed buffer row\nnumber of the editor."
            }
          ]
        },
        {
          "name": "getLastScreenRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1556",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the last zero-indexed screen row\nnumber of the editor."
            }
          ]
        },
        {
          "name": "lineTextForBufferRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1564",
          "visibility": "Essential",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number} representing a zero-indexed buffer row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} representing the contents of the line at the\ngiven buffer row."
            }
          ]
        },
        {
          "name": "lineTextForScreenRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1572",
          "visibility": "Essential",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "screenRow",
              "description": "A {Number} representing a zero-indexed screen row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} representing the contents of the line at the\ngiven screen row."
            }
          ]
        },
        {
          "name": "getCurrentParagraphBufferRange",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1684",
          "visibility": "Essential",
          "summary": "Get the {Range} of the paragraph surrounding the most recently added\ncursor.",
          "description": "Get the {Range} of the paragraph surrounding the most recently added\ncursor.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "setText",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1697",
          "visibility": "Essential",
          "summary": "Replaces the entire contents of the buffer with the given {String}.",
          "description": "Replaces the entire contents of the buffer with the given {String}.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} to replace with",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "setTextInBufferRange",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1712",
          "visibility": "Essential",
          "summary": "Set the text in the given {Range} in buffer coordinates.",
          "description": "Set the text in the given {Range} in buffer coordinates.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "text",
              "description": "A {String}",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "*Deprecated* {String} 'skip' will skip the undo system. This property is deprecated. Call groupLastChanges() on the {TextBuffer} afterward instead.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the newly-inserted text."
            }
          ]
        },
        {
          "name": "insertText",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1723",
          "visibility": "Essential",
          "summary": "For each selection, replace the selected text with the given text.",
          "description": "For each selection, replace the selected text with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} representing the text to insert.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "See {Selection::insertText}.",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range} when the text has been inserted."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} `false` when the text has not been inserted."
            }
          ]
        },
        {
          "name": "insertNewline",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1753",
          "visibility": "Essential",
          "summary": "For each selection, replace the selected text with a newline.",
          "description": "For each selection, replace the selected text with a newline.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "delete",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1762",
          "visibility": "Essential",
          "summary": "For each selection, if the selection is empty, delete the character\nfollowing the cursor. Otherwise delete the selected text.",
          "description": "For each selection, if the selection is empty, delete the character\nfollowing the cursor. Otherwise delete the selected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "backspace",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1772",
          "visibility": "Essential",
          "summary": "For each selection, if the selection is empty, delete the character\npreceding the cursor. Otherwise delete the selected text.",
          "description": "For each selection, if the selection is empty, delete the character\npreceding the cursor. Otherwise delete the selected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "mutateSelectedText",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L1785",
          "visibility": "Extended",
          "summary": "Mutate the text of all the selections in a single transaction.",
          "description": "Mutate the text of all the selections in a single transaction.\n\nAll the changes made inside the given {Function} can be reverted with a\nsingle call to {::undo}.",
          "arguments": [
            {
              "name": "fn",
              "description": "A {Function} that will be called once for each {Selection}. The first    argument will be a {Selection} and the second argument will be the    {Number} index of that selection.",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "transpose",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2163",
          "visibility": "Extended",
          "summary": "For each selection, transpose the selected text.",
          "description": "For each selection, transpose the selected text.\n\nIf the selection is empty, the characters preceding and following the cursor\nare swapped. Otherwise, the selected characters are reversed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "upperCase",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2191",
          "visibility": "Extended",
          "summary": "Convert the selected text to upper case.",
          "description": "Convert the selected text to upper case.\n\nFor each selection, if the selection is empty, converts the containing word\nto upper case. Otherwise convert the selected text to upper case.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "lowerCase",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2205",
          "visibility": "Extended",
          "summary": "Convert the selected text to lower case.",
          "description": "Convert the selected text to lower case.\n\nFor each selection, if the selection is empty, converts the containing word\nto upper case. Otherwise convert the selected text to upper case.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "toggleLineCommentsInSelection",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2218",
          "visibility": "Extended",
          "summary": "Toggle line comments for rows intersecting selections.",
          "description": "Toggle line comments for rows intersecting selections.\n\nIf the current grammar doesn't support comments, does nothing.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "insertNewlineBelow",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2243",
          "visibility": "Extended",
          "summary": "For each cursor, insert a newline at beginning the following line.",
          "description": "For each cursor, insert a newline at beginning the following line.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "insertNewlineAbove",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2255",
          "visibility": "Extended",
          "summary": "For each cursor, insert a newline at the end of the preceding line.",
          "description": "For each cursor, insert a newline at the end of the preceding line.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToBeginningOfWord",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2286",
          "visibility": "Extended",
          "summary": "For each selection, if the selection is empty, delete all characters\nof the containing word that precede the cursor. Otherwise delete the\nselected text.",
          "description": "For each selection, if the selection is empty, delete all characters\nof the containing word that precede the cursor. Otherwise delete the\nselected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToPreviousWordBoundary",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2298",
          "visibility": "Extended",
          "summary": "Similar to {::deleteToBeginningOfWord}, but deletes only back to the\nprevious word boundary.",
          "description": "Similar to {::deleteToBeginningOfWord}, but deletes only back to the\nprevious word boundary.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToNextWordBoundary",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2310",
          "visibility": "Extended",
          "summary": "Similar to {::deleteToEndOfWord}, but deletes only up to the\nnext word boundary.",
          "description": "Similar to {::deleteToEndOfWord}, but deletes only up to the\nnext word boundary.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToBeginningOfSubword",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2323",
          "visibility": "Extended",
          "summary": "For each selection, if the selection is empty, delete all characters\nof the containing subword following the cursor. Otherwise delete the selected\ntext.",
          "description": "For each selection, if the selection is empty, delete all characters\nof the containing subword following the cursor. Otherwise delete the selected\ntext.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToEndOfSubword",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2336",
          "visibility": "Extended",
          "summary": "For each selection, if the selection is empty, delete all characters\nof the containing subword following the cursor. Otherwise delete the selected\ntext.",
          "description": "For each selection, if the selection is empty, delete all characters\nof the containing subword following the cursor. Otherwise delete the selected\ntext.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToBeginningOfLine",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2349",
          "visibility": "Extended",
          "summary": "For each selection, if the selection is empty, delete all characters\nof the containing line that precede the cursor. Otherwise delete the\nselected text.",
          "description": "For each selection, if the selection is empty, delete all characters\nof the containing line that precede the cursor. Otherwise delete the\nselected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToEndOfLine",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2363",
          "visibility": "Extended",
          "summary": "For each selection, if the selection is not empty, deletes the\nselection; otherwise, deletes all characters of the containing line\nfollowing the cursor. If the cursor is already at the end of the line,\ndeletes the following newline.",
          "description": "For each selection, if the selection is not empty, deletes the\nselection; otherwise, deletes all characters of the containing line\nfollowing the cursor. If the cursor is already at the end of the line,\ndeletes the following newline.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteToEndOfWord",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2374",
          "visibility": "Extended",
          "summary": "For each selection, if the selection is empty, delete all characters\nof the containing word following the cursor. Otherwise delete the selected\ntext.",
          "description": "For each selection, if the selection is empty, delete all characters\nof the containing word following the cursor. Otherwise delete the selected\ntext.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "deleteLine",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2383",
          "visibility": "Extended",
          "summary": "Delete all lines intersecting selections.",
          "description": "Delete all lines intersecting selections.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "undo",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2416",
          "visibility": "Essential",
          "summary": "Undo the last change.",
          "description": "Undo the last change.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "redo",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2428",
          "visibility": "Essential",
          "summary": "Redo the last change.",
          "description": "Redo the last change.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "transact",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2448",
          "visibility": "Extended",
          "summary": "Batch multiple operations as a single undo/redo step.",
          "description": "Batch multiple operations as a single undo/redo step.\n\nAny group of operations that are logically grouped from the perspective of\nundoing and redoing should be performed in a transaction. If you want to\nabort the transaction, call {::abortTransaction} to terminate the function's\nexecution and revert any changes performed up to the abortion.",
          "arguments": [
            {
              "name": "groupingInterval",
              "description": "The {Number} of milliseconds for which this transaction should be considered 'groupable' after it begins. If a transaction with a positive `groupingInterval` is committed while the previous transaction is still 'groupable', the two transactions are merged with respect to undo and redo.",
              "type": "Number",
              "isOptional": true
            },
            {
              "name": "fn",
              "description": "A {Function} to call inside the transaction.",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "abortTransaction",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2460",
          "visibility": "Extended",
          "summary": "Abort an open transaction, undoing any operations performed so far\nwithin the transaction.",
          "description": "Abort an open transaction, undoing any operations performed so far\nwithin the transaction."
        },
        {
          "name": "createCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2468",
          "visibility": "Extended",
          "summary": "Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "description": "Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a checkpoint value."
            }
          ]
        },
        {
          "name": "revertToCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2485",
          "visibility": "Extended",
          "summary": "Revert the buffer to the state it was in when the given\ncheckpoint was created.",
          "description": "Revert the buffer to the state it was in when the given\ncheckpoint was created.\n\nThe redo stack will be empty following this operation, so changes since the\ncheckpoint will be lost. If the given checkpoint is no longer present in the\nundo history, no changes will be made to the buffer and this method will\nreturn `false`.",
          "arguments": [
            {
              "name": "checkpoint",
              "description": "The checkpoint to revert to.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "groupChangesSinceCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2498",
          "visibility": "Extended",
          "summary": "Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.",
          "description": "Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.\n\nIf the given checkpoint is no longer present in the undo history, no\ngrouping will be performed and this method will return `false`.",
          "arguments": [
            {
              "name": "checkpoint",
              "description": "The checkpoint from which to group changes.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "screenPositionForBufferPosition",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2518",
          "visibility": "Essential",
          "summary": "Convert a position in buffer-coordinates to screen-coordinates.",
          "description": "Convert a position in buffer-coordinates to screen-coordinates.\n\nThe position is clipped via {::clipBufferPosition} prior to the conversion.\nThe position is also clipped via {::clipScreenPosition} following the\nconversion, which only makes a difference when `options` are supplied.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or {Array} of [row, column].",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "An options hash for {::clipScreenPosition}.",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "bufferPositionForScreenPosition",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2555",
          "visibility": "Essential",
          "summary": "Convert a position in screen-coordinates to buffer-coordinates.",
          "description": "Convert a position in screen-coordinates to buffer-coordinates.\n\nThe position is clipped via {::clipScreenPosition} prior to the conversion.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or {Array} of [row, column].",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "An options hash for {::clipScreenPosition}.",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "screenRangeForBufferRange",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2589",
          "visibility": "Essential",
          "summary": "Convert a range in buffer-coordinates to screen-coordinates.",
          "description": "Convert a range in buffer-coordinates to screen-coordinates.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "{Range} in buffer coordinates to translate into screen coordinates.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "bufferRangeForScreenRange",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2604",
          "visibility": "Essential",
          "summary": "Convert a range in screen-coordinates to buffer-coordinates.",
          "description": "Convert a range in screen-coordinates to buffer-coordinates.",
          "arguments": [
            {
              "name": "screenRange",
              "description": "{Range} in screen coordinates to translate into buffer coordinates.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "clipBufferPosition",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2630",
          "visibility": "Extended",
          "summary": "Clip the given {Point} to a valid position in the buffer.",
          "description": "Clip the given {Point} to a valid position in the buffer.\n\nIf the given {Point} describes a position that is actually reachable by the\ncursor based on the current contents of the buffer, it is returned\nunchanged. If the {Point} does not describe a valid position, the closest\nvalid position is returned instead.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "The {Point} representing the position to clip.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "js",
              "code": "editor.clipBufferPosition([-1, -1]) // -> `[0, 0]`\n\n// When the line at buffer row 2 is 10 characters long\neditor.clipBufferPosition([2, Infinity]) // -> `[2, 10]`",
              "raw": "```js\neditor.clipBufferPosition([-1, -1]) // -> `[0, 0]`\n\n// When the line at buffer row 2 is 10 characters long\neditor.clipBufferPosition([2, Infinity]) // -> `[2, 10]`\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "clipBufferRange",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2640",
          "visibility": "Extended",
          "summary": "Clip the start and end of the given range to valid positions in the\nbuffer. See {::clipBufferPosition} for more information.",
          "description": "Clip the start and end of the given range to valid positions in the\nbuffer. See {::clipBufferPosition} for more information.",
          "arguments": [
            {
              "name": "range",
              "description": "The {Range} to clip.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "clipScreenPosition",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2669",
          "visibility": "Extended",
          "summary": "Clip the given {Point} to a valid position on screen.",
          "description": "Clip the given {Point} to a valid position on screen.\n\nIf the given {Point} describes a position that is actually reachable by the\ncursor based on the current contents of the screen, it is returned\nunchanged. If the {Point} does not describe a valid position, the closest\nvalid position is returned instead.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "The {Point} representing the position to clip.",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "js",
              "code": "editor.clipScreenPosition([-1, -1]) // -> `[0, 0]`\n\n// When the line at screen row 2 is 10 characters long\neditor.clipScreenPosition([2, Infinity]) // -> `[2, 10]`",
              "raw": "```js\neditor.clipScreenPosition([-1, -1]) // -> `[0, 0]`\n\n// When the line at screen row 2 is 10 characters long\neditor.clipScreenPosition([2, Infinity]) // -> `[2, 10]`\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "clipScreenRange",
          "sectionName": "TextEditor Coordinates",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2705",
          "visibility": "Extended",
          "summary": "Clip the start and end of the given range to valid positions on screen.\nSee {::clipScreenPosition} for more information.",
          "description": "Clip the start and end of the given range to valid positions on screen.\nSee {::clipScreenPosition} for more information.",
          "arguments": [
            {
              "name": "range",
              "description": "The {Range} to clip.",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "See {::clipScreenPosition} `options`.",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "decorateMarker",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2796",
          "visibility": "Essential",
          "summary": "Add a decoration that tracks a {DisplayMarker}. When the\nmarker moves, is invalidated, or is destroyed, the decoration will be\nupdated to reflect the marker's state.",
          "description": "Add a decoration that tracks a {DisplayMarker}. When the\nmarker moves, is invalidated, or is destroyed, the decoration will be\nupdated to reflect the marker's state.\n\nThe following are the supported decorations types:\n\n* __line__: Adds the given CSS `class` to the lines overlapping the rows\n    spanned by the marker.\n* __line-number__: Adds the given CSS `class` to the line numbers overlapping\n    the rows spanned by the marker\n* __text__: Injects spans into all text overlapping the marked range, then adds\n    the given `class` or `style` to these spans. Use this to manipulate the foreground\n    color or styling of text in a range.\n* __highlight__: Creates an absolutely-positioned `.highlight` div to the editor\n    containing nested divs that cover the marked region. For example, when the user\n    selects text, the selection is implemented with a highlight decoration. The structure\n    of this highlight will be:\n  ```html\n    <div class=\"highlight <your-class>\">\n      <!-- Will be one region for each row in the range. Spans 2 lines? There will be 2 regions. -->\n      <div class=\"region\"></div>\n    </div>\n  ```\n* __overlay__: Positions the view associated with the given item at the head\n    or tail of the given `DisplayMarker`, depending on the `position` property.\n* __gutter__: Tracks a {DisplayMarker} in a {Gutter}. Gutter decorations are created\n    by calling {Gutter::decorateMarker} on the desired `Gutter` instance.\n* __block__: Positions the view associated with the given item before or\n    after the row of the given {DisplayMarker}, depending on the `position` property.\n    Block decorations at the same screen row are ordered by their `order` property.\n* __cursor__: Render a cursor at the head of the {DisplayMarker}. If multiple cursor decorations\n    are created for the same marker, their class strings and style objects are combined\n    into a single cursor. This decoration type may be used to style existing cursors\n    by passing in their markers or to render artificial cursors that don't actually\n    exist in the model by passing a marker that isn't associated with a real cursor.",
          "arguments": [
            {
              "name": "marker",
              "description": "A {DisplayMarker} you want this decoration to follow.",
              "type": "DisplayMarker",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "type",
                  "description": "Determines the behavior and appearance of this {Decoration}. Supported decoration types and their uses are listed above.",
                  "type": "Decoration",
                  "isOptional": false
                },
                {
                  "name": "class",
                  "description": "This CSS class will be applied to the decorated line number, line, text spans, highlight regions, cursors, or overlay.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "style",
                  "description": "An {Object} containing CSS style properties to apply to the relevant DOM node. Currently this only works with a `type` of `cursor` or `text`.",
                  "type": "Object",
                  "isOptional": false
                },
                {
                  "name": "item",
                  "description": "An {HTMLElement} or a model {Object} with a corresponding view registered. Only applicable to the `gutter`, `overlay` and `block` decoration types.",
                  "type": "HTMLElement",
                  "isOptional": true
                },
                {
                  "name": "onlyHead",
                  "description": "If `true`, the decoration will only be applied to the head of the `DisplayMarker`. Only applicable to the `line` and `line-number` decoration types.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "onlyEmpty",
                  "description": "If `true`, the decoration will only be applied if the associated `DisplayMarker` is empty. Only applicable to the `gutter`, `line`, and `line-number` decoration types.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "onlyNonEmpty",
                  "description": "If `true`, the decoration will only be applied if the associated `DisplayMarker` is non-empty. Only applicable to the `gutter`, `line`, and `line-number` decoration types.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "omitEmptyLastRow",
                  "description": "If `false`, the decoration will be applied to the last row of a non-empty range, even if it ends at column 0. Defaults to `true`. Only applicable to the `gutter`, `line`, and `line-number` decoration types.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "position",
                  "description": "Only applicable to decorations of type `overlay` and `block`. Controls where the view is positioned relative to the `TextEditorMarker`. Values can be `'head'` (the default) or `'tail'` for overlay decorations, and `'before'` (the default) or `'after'` for block decorations.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "order",
                  "description": "Only applicable to decorations of type `block`. Controls  where the view is positioned relative to other block decorations at the  same screen row. If unspecified, block decorations render oldest to newest.",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "avoidOverflow",
                  "description": "Only applicable to decorations of type  `overlay`. Determines whether the decoration adjusts its horizontal or  vertical position to remain fully visible when it would otherwise  overflow the editor. Defaults to `true`.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "decorationParams",
              "description": "An {Object} representing the decoration e.g. `{type: 'line-number', class: 'linter-error'}`",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Decoration",
              "description": "Returns the created {Decoration} object."
            }
          ]
        },
        {
          "name": "decorateMarkerLayer",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2809",
          "visibility": "Essential",
          "summary": "Add a decoration to every marker in the given marker layer. Can\nbe used to decorate a large number of markers without having to create and\nmanage many individual decorations.",
          "description": "Add a decoration to every marker in the given marker layer. Can\nbe used to decorate a large number of markers without having to create and\nmanage many individual decorations.",
          "arguments": [
            {
              "name": "markerLayer",
              "description": "A {DisplayMarkerLayer} or {MarkerLayer} to decorate.",
              "type": "DisplayMarkerLayer",
              "isOptional": false
            },
            {
              "name": "decorationParams",
              "description": "The same parameters that are passed to {TextEditor::decorateMarker}, except the `type` cannot be `overlay` or `gutter`.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "LayerDecoration",
              "description": "Returns a {LayerDecoration}."
            }
          ]
        },
        {
          "name": "getDecorations",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2847",
          "visibility": "Extended",
          "summary": "Get all decorations.",
          "description": "Get all decorations.",
          "arguments": [
            {
              "name": "propertyFilter",
              "description": "An {Object} containing key value pairs that the returned decorations' properties must match.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Decoration}s."
            }
          ]
        },
        {
          "name": "getLineDecorations",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2857",
          "visibility": "Extended",
          "summary": "Get all decorations of type 'line'.",
          "description": "Get all decorations of type 'line'.",
          "arguments": [
            {
              "name": "propertyFilter",
              "description": "An {Object} containing key value pairs that the returned decorations' properties must match.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Decoration}s."
            }
          ]
        },
        {
          "name": "getLineNumberDecorations",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2867",
          "visibility": "Extended",
          "summary": "Get all decorations of type 'line-number'.",
          "description": "Get all decorations of type 'line-number'.",
          "arguments": [
            {
              "name": "propertyFilter",
              "description": "An {Object} containing key value pairs that the returned decorations' properties must match.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Decoration}s."
            }
          ]
        },
        {
          "name": "getHighlightDecorations",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2877",
          "visibility": "Extended",
          "summary": "Get all decorations of type 'highlight'.",
          "description": "Get all decorations of type 'highlight'.",
          "arguments": [
            {
              "name": "propertyFilter",
              "description": "An {Object} containing key value pairs that the returned decorations' properties must match.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Decoration}s."
            }
          ]
        },
        {
          "name": "getOverlayDecorations",
          "sectionName": "Decorations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2887",
          "visibility": "Extended",
          "summary": "Get all decorations of type 'overlay'.",
          "description": "Get all decorations of type 'overlay'.",
          "arguments": [
            {
              "name": "propertyFilter",
              "description": "An {Object} containing key value pairs that the returned decorations' properties must match.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Decoration}s."
            }
          ]
        },
        {
          "name": "markBufferRange",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2925",
          "visibility": "Essential",
          "summary": "Create a marker on the default marker layer with the given range\nin buffer coordinates. This marker will maintain its logical location as the\nbuffer is changed, so if you mark a particular word, the marker will remain\nover that word even if the word's location in the buffer changes.",
          "description": "Create a marker on the default marker layer with the given range\nin buffer coordinates. This marker will maintain its logical location as the\nbuffer is changed, so if you mark a particular word, the marker will remain\nover that word even if the word's location in the buffer changes.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "maintainHistory",
                  "description": "{Boolean} Whether to store this marker's range before and after each change in the undo history. This allows the marker's position to be restored more accurately for certain undo/redo operations, but uses more time and memory. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "reversed",
                  "description": "{Boolean} Creates the marker in a reversed orientation. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "properties",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "markScreenRange",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2959",
          "visibility": "Essential",
          "summary": "Create a marker on the default marker layer with the given range\nin screen coordinates. This marker will maintain its logical location as the\nbuffer is changed, so if you mark a particular word, the marker will remain\nover that word even if the word's location in the buffer changes.",
          "description": "Create a marker on the default marker layer with the given range\nin screen coordinates. This marker will maintain its logical location as the\nbuffer is changed, so if you mark a particular word, the marker will remain\nover that word even if the word's location in the buffer changes.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "maintainHistory",
                  "description": "{Boolean} Whether to store this marker's range before and after each change in the undo history. This allows the marker's position to be restored more accurately for certain undo/redo operations, but uses more time and memory. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "reversed",
                  "description": "{Boolean} Creates the marker in a reversed orientation. (default: false)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "properties",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "markBufferPosition",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L2985",
          "visibility": "Essential",
          "summary": "Create a marker on the default marker layer with the given buffer\nposition and no tail. To group multiple markers together in their own\nprivate layer, see {::addMarkerLayer}.",
          "description": "Create a marker on the default marker layer with the given buffer\nposition and no tail. To group multiple markers together in their own\nprivate layer, see {::addMarkerLayer}.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "markScreenPosition",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3016",
          "visibility": "Essential",
          "summary": "Create a marker on the default marker layer with the given screen\nposition and no tail. To group multiple markers together in their own\nprivate layer, see {::addMarkerLayer}.",
          "description": "Create a marker on the default marker layer with the given screen\nposition and no tail. To group multiple markers together in their own\nprivate layer, see {::addMarkerLayer}.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "A {Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "invalidate",
                  "description": "{String} Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility:\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "clipDirection",
                  "description": "{String} If `'backward'`, returns the first valid position preceding an invalid position. If `'forward'`, returns the first valid position following an invalid position. If `'closest'`, returns the first valid position closest to an invalid position. Defaults to `'closest'`.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarker",
              "description": "Returns a {DisplayMarker}."
            }
          ]
        },
        {
          "name": "findMarkers",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3042",
          "visibility": "Essential",
          "summary": "Find all {DisplayMarker}s on the default marker layer that\nmatch the given properties.",
          "description": "Find all {DisplayMarker}s on the default marker layer that\nmatch the given properties.\n\nThis method finds markers based on the given properties. Markers can be\nassociated with custom properties that will be compared with basic equality.\nIn addition, there are several special properties that will be compared\nwith the range of the markers rather than their properties.",
          "arguments": [
            {
              "children": [
                {
                  "name": "startBufferRow",
                  "description": "Only include markers starting at this row in buffer   coordinates.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "endBufferRow",
                  "description": "Only include markers ending at this row in buffer   coordinates.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "containsBufferRange",
                  "description": "Only include markers containing this {Range} or   in range-compatible {Array} in buffer coordinates.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "containsBufferPosition",
                  "description": "Only include markers containing this {Point}   or {Array} of `[row, column]` in buffer coordinates.",
                  "type": "Point",
                  "isOptional": false
                }
              ],
              "name": "properties",
              "description": "An {Object} containing properties that each returned marker must satisfy. Markers can be associated with custom properties, which are compared with basic equality. In addition, several reserved properties can be used to filter markers based on their current range:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {DisplayMarker}s"
            }
          ]
        },
        {
          "name": "getMarker",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3050",
          "visibility": "Extended",
          "summary": "Get the {DisplayMarker} on the default layer for the given\nmarker id.",
          "description": "Get the {DisplayMarker} on the default layer for the given\nmarker id.",
          "arguments": [
            {
              "name": "id",
              "description": "{Number} id of the marker",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getMarkers",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3056",
          "visibility": "Extended",
          "summary": "Get all {DisplayMarker}s on the default marker layer. Consider\nusing {::findMarkers}",
          "description": "Get all {DisplayMarker}s on the default marker layer. Consider\nusing {::findMarkers}"
        },
        {
          "name": "getMarkerCount",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3063",
          "visibility": "Extended",
          "summary": "Get the number of markers in the default marker layer.",
          "description": "Get the number of markers in the default marker layer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "addMarkerLayer",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3084",
          "visibility": "Essential",
          "summary": "Create a marker layer to group related markers.",
          "description": "Create a marker layer to group related markers.",
          "arguments": [
            {
              "children": [
                {
                  "name": "maintainHistory",
                  "description": "A {Boolean} indicating whether marker state should be restored on undo/redo. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "persistent",
                  "description": "A {Boolean} indicating whether or not this marker layer should be serialized and deserialized along with the rest of the buffer. Defaults to `false`. If `true`, the marker layer's id will be maintained across the serialization boundary, allowing you to retrieve it via {::getMarkerLayer}.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} containing the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarkerLayer",
              "description": "Returns a {DisplayMarkerLayer}."
            }
          ]
        },
        {
          "name": "getMarkerLayer",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3094",
          "visibility": "Essential",
          "summary": "Get a {DisplayMarkerLayer} by id.",
          "description": "Get a {DisplayMarkerLayer} by id.",
          "arguments": [
            {
              "name": "id",
              "description": "The id of the marker layer to retrieve.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "DisplayMarkerLayer",
              "description": "Returns a {DisplayMarkerLayer} or `undefined` if no layer exists with the\ngiven id."
            }
          ]
        },
        {
          "name": "getDefaultMarkerLayer",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3104",
          "visibility": "Essential",
          "summary": "Get the default {DisplayMarkerLayer}.",
          "description": "Get the default {DisplayMarkerLayer}.\n\nAll marker APIs not tied to an explicit layer interact with this default\nlayer.",
          "returnValues": [
            {
              "type": "DisplayMarkerLayer",
              "description": "Returns a {DisplayMarkerLayer}."
            }
          ]
        },
        {
          "name": "getCursorBufferPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3116",
          "visibility": "Essential",
          "summary": "Get the position of the most recently added cursor in buffer\ncoordinates.",
          "description": "Get the position of the most recently added cursor in buffer\ncoordinates.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}"
            }
          ]
        },
        {
          "name": "getCursorBufferPositions",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3123",
          "visibility": "Essential",
          "summary": "Get the position of all the cursor positions in buffer coordinates.",
          "description": "Get the position of all the cursor positions in buffer coordinates.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns {Array} of {Point}s in the order they were added"
            }
          ]
        },
        {
          "name": "setCursorBufferPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3135",
          "visibility": "Essential",
          "summary": "Move the cursor to the given position in buffer coordinates.",
          "description": "Move the cursor to the given position in buffer coordinates.\n\nIf there are multiple cursors, they will be consolidated to a single cursor.",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} or {Array} of `[row, column]`",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "autoscroll",
                  "description": "Determines whether the editor scrolls to the new cursor's position. Defaults to true.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} containing the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getCursorAtScreenPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3146",
          "visibility": "Essential",
          "summary": "Get a {Cursor} at given screen coordinates {Point}",
          "description": "Get a {Cursor} at given screen coordinates {Point}",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} or {Array} of `[row, column]`",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Cursor",
              "description": "Returns the first matched {Cursor} or undefined"
            }
          ]
        },
        {
          "name": "getCursorScreenPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3157",
          "visibility": "Essential",
          "summary": "Get the position of the most recently added cursor in screen\ncoordinates.",
          "description": "Get the position of the most recently added cursor in screen\ncoordinates.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getCursorScreenPositions",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3164",
          "visibility": "Essential",
          "summary": "Get the position of all the cursor positions in screen coordinates.",
          "description": "Get the position of all the cursor positions in screen coordinates.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns {Array} of {Point}s in the order the cursors were added"
            }
          ]
        },
        {
          "name": "setCursorScreenPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3176",
          "visibility": "Essential",
          "summary": "Move the cursor to the given position in screen coordinates.",
          "description": "Move the cursor to the given position in screen coordinates.\n\nIf there are multiple cursors, they will be consolidated to a single cursor.",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} or {Array} of `[row, column]`",
              "type": "Point",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "autoscroll",
                  "description": "Determines whether the editor scrolls to the new cursor's position. Defaults to true.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} combining options for {::clipScreenPosition} with:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "addCursorAtBufferPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3212",
          "visibility": "Essential",
          "summary": "Add a cursor at the given position in buffer coordinates.",
          "description": "Add a cursor at the given position in buffer coordinates.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or {Array} of `[row, column]`",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Cursor",
              "description": "Returns a {Cursor}."
            }
          ]
        },
        {
          "name": "addCursorAtScreenPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3226",
          "visibility": "Essential",
          "summary": "Add a cursor at the position in screen coordinates.",
          "description": "Add a cursor at the position in screen coordinates.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "A {Point} or {Array} of `[row, column]`",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Cursor",
              "description": "Returns a {Cursor}."
            }
          ]
        },
        {
          "name": "hasMultipleCursors",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3236",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean} indicating whether or not there are multiple cursors."
            }
          ]
        },
        {
          "name": "moveUp",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3243",
          "visibility": "Essential",
          "summary": "Move every cursor up one row in screen coordinates.",
          "description": "Move every cursor up one row in screen coordinates.",
          "arguments": [
            {
              "name": "lineCount",
              "description": "{Number} number of lines to move",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveDown",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3252",
          "visibility": "Essential",
          "summary": "Move every cursor down one row in screen coordinates.",
          "description": "Move every cursor down one row in screen coordinates.",
          "arguments": [
            {
              "name": "lineCount",
              "description": "{Number} number of lines to move",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveLeft",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3261",
          "visibility": "Essential",
          "summary": "Move every cursor left one column.",
          "description": "Move every cursor left one column.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to move (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveRight",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3270",
          "visibility": "Essential",
          "summary": "Move every cursor right one column.",
          "description": "Move every cursor right one column.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to move (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "moveToBeginningOfLine",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3277",
          "visibility": "Essential",
          "summary": "Move every cursor to the beginning of its line in buffer coordinates.",
          "description": "Move every cursor to the beginning of its line in buffer coordinates."
        },
        {
          "name": "moveToBeginningOfScreenLine",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3282",
          "visibility": "Essential",
          "summary": "Move every cursor to the beginning of its line in screen coordinates.",
          "description": "Move every cursor to the beginning of its line in screen coordinates."
        },
        {
          "name": "moveToFirstCharacterOfLine",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3287",
          "visibility": "Essential",
          "summary": "Move every cursor to the first non-whitespace character of its line.",
          "description": "Move every cursor to the first non-whitespace character of its line."
        },
        {
          "name": "moveToEndOfLine",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3292",
          "visibility": "Essential",
          "summary": "Move every cursor to the end of its line in buffer coordinates.",
          "description": "Move every cursor to the end of its line in buffer coordinates."
        },
        {
          "name": "moveToEndOfScreenLine",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3297",
          "visibility": "Essential",
          "summary": "Move every cursor to the end of its line in screen coordinates.",
          "description": "Move every cursor to the end of its line in screen coordinates."
        },
        {
          "name": "moveToBeginningOfWord",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3302",
          "visibility": "Essential",
          "summary": "Move every cursor to the beginning of its surrounding word.",
          "description": "Move every cursor to the beginning of its surrounding word."
        },
        {
          "name": "moveToEndOfWord",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3307",
          "visibility": "Essential",
          "summary": "Move every cursor to the end of its surrounding word.",
          "description": "Move every cursor to the end of its surrounding word."
        },
        {
          "name": "moveToTop",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3316",
          "visibility": "Extended",
          "summary": "Move every cursor to the top of the buffer.",
          "description": "Move every cursor to the top of the buffer.\n\nIf there are multiple cursors, they will be merged into a single cursor."
        },
        {
          "name": "moveToBottom",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3323",
          "visibility": "Extended",
          "summary": "Move every cursor to the bottom of the buffer.",
          "description": "Move every cursor to the bottom of the buffer.\n\nIf there are multiple cursors, they will be merged into a single cursor."
        },
        {
          "name": "moveToBeginningOfNextWord",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3328",
          "visibility": "Extended",
          "summary": "Move every cursor to the beginning of the next word.",
          "description": "Move every cursor to the beginning of the next word."
        },
        {
          "name": "moveToPreviousWordBoundary",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3333",
          "visibility": "Extended",
          "summary": "Move every cursor to the previous word boundary.",
          "description": "Move every cursor to the previous word boundary."
        },
        {
          "name": "moveToNextWordBoundary",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3338",
          "visibility": "Extended",
          "summary": "Move every cursor to the next word boundary.",
          "description": "Move every cursor to the next word boundary."
        },
        {
          "name": "moveToPreviousSubwordBoundary",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3343",
          "visibility": "Extended",
          "summary": "Move every cursor to the previous subword boundary.",
          "description": "Move every cursor to the previous subword boundary."
        },
        {
          "name": "moveToNextSubwordBoundary",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3348",
          "visibility": "Extended",
          "summary": "Move every cursor to the next subword boundary.",
          "description": "Move every cursor to the next subword boundary."
        },
        {
          "name": "moveToBeginningOfNextParagraph",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3353",
          "visibility": "Extended",
          "summary": "Move every cursor to the beginning of the next paragraph.",
          "description": "Move every cursor to the beginning of the next paragraph."
        },
        {
          "name": "moveToBeginningOfPreviousParagraph",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3358",
          "visibility": "Extended",
          "summary": "Move every cursor to the beginning of the previous paragraph.",
          "description": "Move every cursor to the beginning of the previous paragraph."
        },
        {
          "name": "getLastCursor",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3365",
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Cursor",
              "description": "Returns the most recently added {Cursor}"
            }
          ]
        },
        {
          "name": "getWordUnderCursor",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3373",
          "visibility": "Extended",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "options",
              "description": "See {Cursor::getBeginningOfCurrentWordBufferPosition}.",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the word surrounding the most recently added cursor."
            }
          ]
        },
        {
          "name": "getCursors",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3380",
          "visibility": "Extended",
          "summary": "Get an Array of all {Cursor}s.",
          "description": "Get an Array of all {Cursor}s."
        },
        {
          "name": "getCursorsOrderedByBufferPosition",
          "sectionName": "Cursors",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3389",
          "visibility": "Extended",
          "summary": "Get all {Cursor}s, ordered by their position in the buffer\ninstead of the order in which they were added.",
          "description": "Get all {Cursor}s, ordered by their position in the buffer\ninstead of the order in which they were added.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Selection}s."
            }
          ]
        },
        {
          "name": "getSelectedText",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3447",
          "visibility": "Essential",
          "summary": "Get the selected text of the most recently added selection.",
          "description": "Get the selected text of the most recently added selection.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "getSelectedBufferRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3455",
          "visibility": "Essential",
          "summary": "Get the {Range} of the most recently added selection in buffer\ncoordinates.",
          "description": "Get the {Range} of the most recently added selection in buffer\ncoordinates.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getSelectedBufferRanges",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3464",
          "visibility": "Essential",
          "summary": "Get the {Range}s of all selections in buffer coordinates.",
          "description": "Get the {Range}s of all selections in buffer coordinates.\n\nThe ranges are sorted by when the selections were added. Most recent at the end.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Range}s."
            }
          ]
        },
        {
          "name": "setSelectedBufferRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3477",
          "visibility": "Essential",
          "summary": "Set the selected range in buffer coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.",
          "description": "Set the selected range in buffer coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "A {Boolean} indicating whether to create the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "preserveFolds",
                  "description": "A {Boolean}, which if `true` preserves the fold settings after the selection is set.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An options {Object}:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "setSelectedBufferRanges",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3490",
          "visibility": "Essential",
          "summary": "Set the selected ranges in buffer coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.",
          "description": "Set the selected ranges in buffer coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.",
          "arguments": [
            {
              "name": "bufferRanges",
              "description": "An {Array} of {Range}s or range-compatible {Array}s.",
              "type": "Array",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "A {Boolean} indicating whether to create the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "preserveFolds",
                  "description": "A {Boolean}, which if `true` preserves the fold settings after the selection is set.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An options {Object}:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getSelectedScreenRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3516",
          "visibility": "Essential",
          "summary": "Get the {Range} of the most recently added selection in screen\ncoordinates.",
          "description": "Get the {Range} of the most recently added selection in screen\ncoordinates.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getSelectedScreenRanges",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3525",
          "visibility": "Essential",
          "summary": "Get the {Range}s of all selections in screen coordinates.",
          "description": "Get the {Range}s of all selections in screen coordinates.\n\nThe ranges are sorted by when the selections were added. Most recent at the end.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Range}s."
            }
          ]
        },
        {
          "name": "setSelectedScreenRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3536",
          "visibility": "Essential",
          "summary": "Set the selected range in screen coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.",
          "description": "Set the selected range in screen coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.",
          "arguments": [
            {
              "name": "screenRange",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "A {Boolean} indicating whether to create the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An options {Object}:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "setSelectedScreenRanges",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3550",
          "visibility": "Essential",
          "summary": "Set the selected ranges in screen coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.",
          "description": "Set the selected ranges in screen coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.",
          "arguments": [
            {
              "name": "screenRanges",
              "description": "An {Array} of {Range}s or range-compatible {Array}s.",
              "type": "Array",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "A {Boolean} indicating whether to create the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An options {Object}:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "addSelectionForBufferRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3582",
          "visibility": "Essential",
          "summary": "Add a selection for the given range in buffer coordinates.",
          "description": "Add a selection for the given range in buffer coordinates.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "A {Range}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "A {Boolean} indicating whether to create the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "preserveFolds",
                  "description": "A {Boolean}, which if `true` preserves the fold settings after the selection is set.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An options {Object}:",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Selection",
              "description": "Returns the added {Selection}."
            }
          ]
        },
        {
          "name": "addSelectionForScreenRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3607",
          "visibility": "Essential",
          "summary": "Add a selection for the given range in screen coordinates.",
          "description": "Add a selection for the given range in screen coordinates.",
          "arguments": [
            {
              "name": "screenRange",
              "description": "A {Range}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "A {Boolean} indicating whether to create the selection in a reversed orientation.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "preserveFolds",
                  "description": "A {Boolean}, which if `true` preserves the fold settings after the selection is set. Returns the added {Selection}.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An options {Object}:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectToBufferPosition",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3620",
          "visibility": "Essential",
          "summary": "Select from the current cursor position to the given position in\nbuffer coordinates.",
          "description": "Select from the current cursor position to the given position in\nbuffer coordinates.\n\nThis method may merge selections that end up intersecting.",
          "arguments": [
            {
              "name": "position",
              "description": "An instance of {Point}, with a given `row` and `column`.",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "selectToScreenPosition",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3634",
          "visibility": "Essential",
          "summary": "Select from the current cursor position to the given position in\nscreen coordinates.",
          "description": "Select from the current cursor position to the given position in\nscreen coordinates.\n\nThis method may merge selections that end up intersecting.",
          "arguments": [
            {
              "name": "position",
              "description": "An instance of {Point}, with a given `row` and `column`.",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "selectUp",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3650",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection one character upward while\npreserving the selection's tail position.",
          "description": "Move the cursor of each selection one character upward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intersecting.",
          "arguments": [
            {
              "name": "rowCount",
              "description": "{Number} number of rows to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectDown",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3662",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection one character downward while\npreserving the selection's tail position.",
          "description": "Move the cursor of each selection one character downward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intersecting.",
          "arguments": [
            {
              "name": "rowCount",
              "description": "{Number} number of rows to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectLeft",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3674",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection one character leftward while\npreserving the selection's tail position.",
          "description": "Move the cursor of each selection one character leftward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intersecting.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectRight",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3686",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection one character rightward while\npreserving the selection's tail position.",
          "description": "Move the cursor of each selection one character rightward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intersecting.",
          "arguments": [
            {
              "name": "columnCount",
              "description": "{Number} number of columns to select (default: 1)",
              "type": "Number",
              "isOptional": true
            }
          ]
        },
        {
          "name": "selectToTop",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3696",
          "visibility": "Essential",
          "summary": "Select from the top of the buffer to the end of the last selection\nin the buffer.",
          "description": "Select from the top of the buffer to the end of the last selection\nin the buffer.\n\nThis method merges multiple selections into a single selection."
        },
        {
          "name": "selectToBottom",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3704",
          "visibility": "Essential",
          "summary": "Selects from the top of the first selection in the buffer to the end\nof the buffer.",
          "description": "Selects from the top of the first selection in the buffer to the end\nof the buffer.\n\nThis method merges multiple selections into a single selection."
        },
        {
          "name": "selectAll",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3713",
          "visibility": "Essential",
          "summary": "Select all text in the buffer.",
          "description": "Select all text in the buffer.\n\nThis method merges multiple selections into a single selection."
        },
        {
          "name": "selectToBeginningOfLine",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3721",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection to the beginning of its line\nwhile preserving the selection's tail position.",
          "description": "Move the cursor of each selection to the beginning of its line\nwhile preserving the selection's tail position.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectToFirstCharacterOfLine",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3733",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection to the first non-whitespace\ncharacter of its line while preserving the selection's tail position. If the\ncursor is already on the first character of the line, move it to the\nbeginning of the line.",
          "description": "Move the cursor of each selection to the first non-whitespace\ncharacter of its line while preserving the selection's tail position. If the\ncursor is already on the first character of the line, move it to the\nbeginning of the line.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectToEndOfLine",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3743",
          "visibility": "Essential",
          "summary": "Move the cursor of each selection to the end of its line while\npreserving the selection's tail position.",
          "description": "Move the cursor of each selection to the end of its line while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectToBeginningOfWord",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3753",
          "visibility": "Essential",
          "summary": "Expand selections to the beginning of their containing word.",
          "description": "Expand selections to the beginning of their containing word.\n\nOperates on all selections. Moves the cursor to the beginning of the\ncontaining word while preserving the selection's tail position."
        },
        {
          "name": "selectToEndOfWord",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3763",
          "visibility": "Essential",
          "summary": "Expand selections to the end of their containing word.",
          "description": "Expand selections to the end of their containing word.\n\nOperates on all selections. Moves the cursor to the end of the containing\nword while preserving the selection's tail position."
        },
        {
          "name": "selectToPreviousSubwordBoundary",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3773",
          "visibility": "Extended",
          "summary": "For each selection, move its cursor to the preceding subword\nboundary while maintaining the selection's tail position.",
          "description": "For each selection, move its cursor to the preceding subword\nboundary while maintaining the selection's tail position.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectToNextSubwordBoundary",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3783",
          "visibility": "Extended",
          "summary": "For each selection, move its cursor to the next subword boundary\nwhile maintaining the selection's tail position.",
          "description": "For each selection, move its cursor to the next subword boundary\nwhile maintaining the selection's tail position.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectLinesContainingCursors",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3792",
          "visibility": "Essential",
          "summary": "For each cursor, select the containing line.",
          "description": "For each cursor, select the containing line.\n\nThis method merges selections on successive lines."
        },
        {
          "name": "selectWordsContainingCursors",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3797",
          "visibility": "Essential",
          "summary": "Select the word surrounding each cursor.",
          "description": "Select the word surrounding each cursor."
        },
        {
          "name": "selectToPreviousWordBoundary",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3807",
          "visibility": "Extended",
          "summary": "For each selection, move its cursor to the preceding word boundary\nwhile maintaining the selection's tail position.",
          "description": "For each selection, move its cursor to the preceding word boundary\nwhile maintaining the selection's tail position.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectToNextWordBoundary",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3817",
          "visibility": "Extended",
          "summary": "For each selection, move its cursor to the next word boundary while\nmaintaining the selection's tail position.",
          "description": "For each selection, move its cursor to the next word boundary while\nmaintaining the selection's tail position.\n\nThis method may merge selections that end up intersecting."
        },
        {
          "name": "selectToBeginningOfNextWord",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3827",
          "visibility": "Extended",
          "summary": "Expand selections to the beginning of the next word.",
          "description": "Expand selections to the beginning of the next word.\n\nOperates on all selections. Moves the cursor to the beginning of the next\nword while preserving the selection's tail position."
        },
        {
          "name": "selectToBeginningOfNextParagraph",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3837",
          "visibility": "Extended",
          "summary": "Expand selections to the beginning of the next paragraph.",
          "description": "Expand selections to the beginning of the next paragraph.\n\nOperates on all selections. Moves the cursor to the beginning of the next\nparagraph while preserving the selection's tail position."
        },
        {
          "name": "selectToBeginningOfPreviousParagraph",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3847",
          "visibility": "Extended",
          "summary": "Expand selections to the beginning of the next paragraph.",
          "description": "Expand selections to the beginning of the next paragraph.\n\nOperates on all selections. Moves the cursor to the beginning of the next\nparagraph while preserving the selection's tail position."
        },
        {
          "name": "selectLargerSyntaxNode",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3855",
          "visibility": "Extended",
          "summary": "For each selection, select the syntax node that contains\nthat selection.",
          "description": "For each selection, select the syntax node that contains\nthat selection."
        },
        {
          "name": "selectSmallerSyntaxNode",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3873",
          "visibility": "Extended",
          "summary": "Undo the effect a preceding call to {::selectLargerSyntaxNode}.",
          "description": "Undo the effect a preceding call to {::selectLargerSyntaxNode}."
        },
        {
          "name": "selectMarker",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3891",
          "visibility": "Extended",
          "summary": "Select the range of the given marker if it is valid.",
          "description": "Select the range of the given marker if it is valid.",
          "arguments": [
            {
              "name": "marker",
              "description": "A {DisplayMarker}",
              "type": "DisplayMarker",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the selected {Range} or `undefined` if the marker is invalid."
            }
          ]
        },
        {
          "name": "getLastSelection",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3902",
          "visibility": "Extended",
          "summary": "Get the most recently added {Selection}.",
          "description": "Get the most recently added {Selection}.",
          "returnValues": [
            {
              "type": "Selection",
              "description": "Returns a {Selection}."
            }
          ]
        },
        {
          "name": "getSelections",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3918",
          "visibility": "Extended",
          "summary": "Get current {Selection}s.",
          "description": "Get current {Selection}s.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns: An {Array} of {Selection}s."
            }
          ]
        },
        {
          "name": "getSelectionsOrderedByBufferPosition",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3927",
          "visibility": "Extended",
          "summary": "Get all {Selection}s, ordered by their position in the buffer\ninstead of the order in which they were added.",
          "description": "Get all {Selection}s, ordered by their position in the buffer\ninstead of the order in which they were added.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Selection}s."
            }
          ]
        },
        {
          "name": "selectionIntersectsBufferRange",
          "sectionName": "Selections",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L3937",
          "visibility": "Extended",
          "summary": "Determine if a given range in buffer coordinates intersects a\nselection.",
          "description": "Determine if a given range in buffer coordinates intersects a\nselection.",
          "arguments": [
            {
              "name": "bufferRange",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "scan",
          "sectionName": "Searching and Replacing",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4154",
          "visibility": "Essential",
          "summary": "Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.",
          "description": "Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.\n\n`::scan` functions as the replace method as well via the `replace`\n\nIf you're programmatically modifying the results, you may want to try\n{::backwardsScanInBufferRange} to avoid tripping over your own changes.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "leadingContextLineCount",
                  "description": "{Number} default `0`; The number of lines  before the matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLineCount",
                  "description": "{Number} default `0`; The number of lines  after the matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "match",
                      "description": "The current regular expression match.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "matchText",
                      "description": "A {String} with the text of the match.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "range",
                      "description": "The {Range} of the match.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "stop",
                      "description": "Call this {Function} to terminate the scan.",
                      "type": "Function",
                      "isOptional": false
                    },
                    {
                      "name": "replace",
                      "description": "Call this {Function} with a {String} to replace the match.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "object",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "scanInBufferRange",
          "sectionName": "Searching and Replacing",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4175",
          "visibility": "Essential",
          "summary": "Scan regular expression matches in a given range, calling the given\niterator function on each match.",
          "description": "Scan regular expression matches in a given range, calling the given\niterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "A {Range} in which to search.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match.",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "backwardsScanInBufferRange",
          "sectionName": "Searching and Replacing",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4191",
          "visibility": "Essential",
          "summary": "Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.",
          "description": "Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "A {Range} in which to search.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match.",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getSoftTabs",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4201",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether softTabs are enabled for this\neditor."
            }
          ]
        },
        {
          "name": "setSoftTabs",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4208",
          "visibility": "Essential",
          "summary": "Enable or disable soft tabs for this editor.",
          "description": "Enable or disable soft tabs for this editor.",
          "arguments": [
            {
              "name": "softTabs",
              "description": "A {Boolean}",
              "type": "Boolean",
              "isOptional": false
            }
          ]
        },
        {
          "name": "toggleSoftTabs",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4219",
          "visibility": "Essential",
          "summary": "Toggle soft tabs for this editor",
          "description": "Toggle soft tabs for this editor"
        },
        {
          "name": "getTabLength",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4226",
          "visibility": "Essential",
          "summary": "Get the on-screen length of tab characters.",
          "description": "Get the on-screen length of tab characters.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "setTabLength",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4235",
          "visibility": "Essential",
          "summary": "Set the on-screen length of tab characters. Setting this to a\n{Number} This will override the `editor.tabLength` setting.",
          "description": "Set the on-screen length of tab characters. Setting this to a\n{Number} This will override the `editor.tabLength` setting.",
          "arguments": [
            {
              "name": "tabLength",
              "description": "{Number} length of a single tab. Setting to `null` will fallback to using the `editor.tabLength` config setting",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "usesSoftTabs",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4266",
          "visibility": "Extended",
          "summary": "Determine if the buffer uses hard or soft tabs.",
          "description": "Determine if the buffer uses hard or soft tabs.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns `true` if the first non-comment line with leading whitespace starts\nwith a space character."
            },
            {
              "type": null,
              "description": "Returns `false` if it starts with a hard tab (`\\t`)."
            },
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} or undefined if no non-comment lines had leading\nwhitespace."
            }
          ]
        },
        {
          "name": "getTabText",
          "sectionName": "Tab Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4287",
          "visibility": "Extended",
          "summary": "Get the text representing a single level of indent.",
          "description": "Get the text representing a single level of indent.\n\nIf soft tabs are enabled, the text is composed of N spaces, where N is the\ntab length. Otherwise the text is a tab character (`\\t`).",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "isSoftWrapped",
          "sectionName": "Soft Wrap Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4309",
          "visibility": "Essential",
          "summary": "Determine whether lines in this editor are soft-wrapped.",
          "description": "Determine whether lines in this editor are soft-wrapped.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "setSoftWrapped",
          "sectionName": "Soft Wrap Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4318",
          "visibility": "Essential",
          "summary": "Enable or disable soft wrapping for this editor.",
          "description": "Enable or disable soft wrapping for this editor.",
          "arguments": [
            {
              "name": "softWrapped",
              "description": "A {Boolean}",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "toggleSoftWrapped",
          "sectionName": "Soft Wrap Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4330",
          "visibility": "Essential",
          "summary": "Toggle soft wrapping for this editor",
          "description": "Toggle soft wrapping for this editor",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getSoftWrapColumn",
          "sectionName": "Soft Wrap Behavior",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4335",
          "visibility": "Essential",
          "summary": "Gets the column at which column will soft wrap",
          "description": "Gets the column at which column will soft wrap"
        },
        {
          "name": "indentationForBufferRow",
          "sectionName": "Indentation",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4361",
          "visibility": "Essential",
          "summary": "Get the indentation level of the given buffer row.",
          "description": "Get the indentation level of the given buffer row.\n\nDetermines how deeply the given row is indented based on the soft tabs and\ntab length settings of this editor. Note that if soft tabs are enabled and\nthe tab length is 2, a row with 4 leading spaces would have an indentation\nlevel of 2.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number} indicating the buffer row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "setIndentationForBufferRow",
          "sectionName": "Indentation",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4377",
          "visibility": "Essential",
          "summary": "Set the indentation level for the given buffer row.",
          "description": "Set the indentation level for the given buffer row.\n\nInserts or removes hard tabs or spaces based on the soft tabs and tab length\nsettings of this editor in order to bring it to the given indentation level.\nNote that if soft tabs are enabled and the tab length is 2, a row with 4\nleading spaces would have an indentation level of 2.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number} indicating the buffer row.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "newLevel",
              "description": "A {Number} indicating the new indentation level.",
              "type": "Number",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "preserveLeadingWhitespace",
                  "description": "`true` to preserve any whitespace already at  the beginning of the line (default: false).",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "indentSelectedRows",
          "sectionName": "Indentation",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4399",
          "visibility": "Extended",
          "summary": "Indent rows intersecting selections by one level.",
          "description": "Indent rows intersecting selections by one level.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "outdentSelectedRows",
          "sectionName": "Indentation",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4410",
          "visibility": "Extended",
          "summary": "Outdent rows intersecting selections by one level.",
          "description": "Outdent rows intersecting selections by one level.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "indentLevelForLine",
          "sectionName": "Indentation",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4427",
          "visibility": "Extended",
          "summary": "Get the indentation level of the given line of text.",
          "description": "Get the indentation level of the given line of text.\n\nDetermines how deeply the given line is indented based on the soft tabs and\ntab length settings of this editor. Note that if soft tabs are enabled and\nthe tab length is 2, a row with 4 leading spaces would have an indentation\nlevel of 2.",
          "arguments": [
            {
              "name": "line",
              "description": "A {String} representing a line of text.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "autoIndentSelectedRows",
          "sectionName": "Indentation",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4448",
          "visibility": "Extended",
          "summary": "Indent rows intersecting selections based on the grammar's suggested\nindent level.",
          "description": "Indent rows intersecting selections based on the grammar's suggested\nindent level.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getGrammar",
          "sectionName": "Grammars",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4489",
          "visibility": "Essential",
          "summary": "Get the current {Grammar} of this editor.",
          "description": "Get the current {Grammar} of this editor."
        },
        {
          "name": "getRootScopeDescriptor",
          "sectionName": "Managing Syntax Scopes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4521",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "ScopeDescriptor",
              "description": "Returns a {ScopeDescriptor} that includes this editor's language.\ne.g. `['.source.ruby']`, or `['.source.coffee']`. You can use this with\n{Config::get} to get language specific config values."
            }
          ]
        },
        {
          "name": "scopeDescriptorForBufferPosition",
          "sectionName": "Managing Syntax Scopes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4536",
          "visibility": "Essential",
          "summary": "Get the syntactic {ScopeDescriptor} for the given position in buffer\ncoordinates. Useful with {Config::get}.",
          "description": "Get the syntactic {ScopeDescriptor} for the given position in buffer\ncoordinates. Useful with {Config::get}.\n\nFor example, if called with a position inside the parameter list of an\nanonymous CoffeeScript function, this method returns a {ScopeDescriptor} with\nthe following scopes array:\n`[\"source.coffee\", \"meta.function.inline.coffee\", \"meta.parameters.coffee\", \"variable.parameter.function.coffee\"]`",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or {Array} of `[row, column]`.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "ScopeDescriptor",
              "description": "Returns a {ScopeDescriptor}."
            }
          ]
        },
        {
          "name": "syntaxTreeScopeDescriptorForBufferPosition",
          "sectionName": "Managing Syntax Scopes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4558",
          "visibility": "Essential",
          "summary": "Get the syntactic tree {ScopeDescriptor} for the given position in buffer\ncoordinates or the syntactic {ScopeDescriptor} for TextMate language mode",
          "description": "Get the syntactic tree {ScopeDescriptor} for the given position in buffer\ncoordinates or the syntactic {ScopeDescriptor} for TextMate language mode\n\nFor example, if called with a position inside the parameter list of a\nJavaScript class function, this method returns a {ScopeDescriptor} with\nthe following syntax nodes array:\n`[\"source.js\", \"program\", \"expression_statement\", \"assignment_expression\", \"class\", \"class_body\", \"method_definition\", \"formal_parameters\", \"identifier\"]`\nif tree-sitter is used\nand the following scopes array:\n`[\"source.js\"]`\nif textmate is used",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "A {Point} or {Array} of `[row, column]`.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "ScopeDescriptor",
              "description": "Returns a {ScopeDescriptor}."
            }
          ]
        },
        {
          "name": "bufferRangeForScopeAtCursor",
          "sectionName": "Managing Syntax Scopes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4574",
          "visibility": "Extended",
          "summary": "Get the range in buffer coordinates of all tokens surrounding the\ncursor that match the given scope selector.",
          "description": "Get the range in buffer coordinates of all tokens surrounding the\ncursor that match the given scope selector.\n\nFor example, if you wanted to find the string surrounding the cursor, you\ncould call `editor.bufferRangeForScopeAtCursor(\".string.quoted\")`.",
          "arguments": [
            {
              "name": "scopeSelector",
              "description": "{String} selector. e.g. `'.source.ruby'`",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "bufferRangeForScopeAtPosition",
          "sectionName": "Managing Syntax Scopes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4591",
          "visibility": "Extended",
          "summary": "Get the range in buffer coordinates of all tokens surrounding the\ngiven position in buffer coordinates that match the given scope selector.",
          "description": "Get the range in buffer coordinates of all tokens surrounding the\ngiven position in buffer coordinates that match the given scope selector.\n\nFor example, if you wanted to find the string surrounding the cursor, you\ncould call `editor.bufferRangeForScopeAtPosition(\".string.quoted\", this.getCursorBufferPosition())`.",
          "arguments": [
            {
              "name": "scopeSelector",
              "description": "{String} selector. e.g. `'.source.ruby'`",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "bufferPosition",
              "description": "A {Point} or {Array} of [row, column]",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "isBufferRowCommented",
          "sectionName": "Managing Syntax Scopes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4598",
          "visibility": "Extended",
          "summary": "Determine if the given row is entirely a comment",
          "description": "Determine if the given row is entirely a comment"
        },
        {
          "name": "copySelectedText",
          "sectionName": "Clipboard Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4628",
          "visibility": "Essential",
          "summary": "For each selection, copy the selected text.",
          "description": "For each selection, copy the selected text."
        },
        {
          "name": "cutSelectedText",
          "sectionName": "Clipboard Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4658",
          "visibility": "Essential",
          "summary": "For each selection, cut the selected text.",
          "description": "For each selection, cut the selected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "pasteText",
          "sectionName": "Clipboard Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4680",
          "visibility": "Essential",
          "summary": "For each selection, replace the selected text with the contents of\nthe clipboard.",
          "description": "For each selection, replace the selected text with the contents of\nthe clipboard.\n\nIf the clipboard contains the same number of selections as the current\neditor, each selection will be replaced with the content of the\ncorresponding clipboard selection text.",
          "arguments": [
            {
              "name": "options",
              "description": "See {Selection::insertText}.",
              "type": null,
              "isOptional": true
            }
          ]
        },
        {
          "name": "cutToEndOfLine",
          "sectionName": "Clipboard Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4736",
          "visibility": "Essential",
          "summary": "For each selection, if the selection is empty, cut all characters\nof the containing screen line following the cursor. Otherwise cut the selected\ntext.",
          "description": "For each selection, if the selection is empty, cut all characters\nof the containing screen line following the cursor. Otherwise cut the selected\ntext.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "cutToEndOfBufferLine",
          "sectionName": "Clipboard Operations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4751",
          "visibility": "Essential",
          "summary": "For each selection, if the selection is empty, cut all characters\nof the containing buffer line following the cursor. Otherwise cut the\nselected text.",
          "description": "For each selection, if the selection is empty, cut all characters\nof the containing buffer line following the cursor. Otherwise cut the\nselected text.",
          "arguments": [
            {
              "children": [
                {
                  "name": "bypassReadOnly",
                  "description": "{Boolean} Must be `true` to modify a read-only editor.",
                  "type": "Boolean",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "foldCurrentRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4769",
          "visibility": "Essential",
          "summary": "Fold the most recent cursor's row based on its indentation level.",
          "description": "Fold the most recent cursor's row based on its indentation level.\n\nThe fold will extend from the nearest preceding line with a lower\nindentation level up to the nearest following row with a lower indentation\nlevel."
        },
        {
          "name": "unfoldCurrentRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4782",
          "visibility": "Essential",
          "summary": "Unfold the most recent cursor's row by one level.",
          "description": "Unfold the most recent cursor's row by one level."
        },
        {
          "name": "foldBufferRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4797",
          "visibility": "Essential",
          "summary": "Fold the given row in buffer coordinates based on its indentation\nlevel.",
          "description": "Fold the given row in buffer coordinates based on its indentation\nlevel.\n\nIf the given row is foldable, the fold will begin there. Otherwise, it will\nbegin at the first foldable row preceding the given row.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number}.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "unfoldBufferRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4830",
          "visibility": "Essential",
          "summary": "Unfold all folds containing the given row in buffer coordinates.",
          "description": "Unfold all folds containing the given row in buffer coordinates.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number}",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "foldSelectedLines",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4836",
          "visibility": "Extended",
          "summary": "For each selection, fold the rows it intersects.",
          "description": "For each selection, fold the rows it intersects."
        },
        {
          "name": "foldAll",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4843",
          "visibility": "Extended",
          "summary": "Fold all foldable lines.",
          "description": "Fold all foldable lines."
        },
        {
          "name": "unfoldAll",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4855",
          "visibility": "Extended",
          "summary": "Unfold all existing folds.",
          "description": "Unfold all existing folds."
        },
        {
          "name": "foldAllAtIndentLevel",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4864",
          "visibility": "Extended",
          "summary": "Fold all foldable lines at the given indent level.",
          "description": "Fold all foldable lines at the given indent level.",
          "arguments": [
            {
              "name": "level",
              "description": "A {Number} starting at 0.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "isFoldableAtBufferRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4882",
          "visibility": "Extended",
          "summary": "Determine whether the given row in buffer coordinates is foldable.",
          "description": "Determine whether the given row in buffer coordinates is foldable.\n\nA *foldable* row is a row that *starts* a row range that can be folded.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number}",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isFoldableAtScreenRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4896",
          "visibility": "Extended",
          "summary": "Determine whether the given row in screen coordinates is foldable.",
          "description": "Determine whether the given row in screen coordinates is foldable.\n\nA *foldable* row is a row that *starts* a row range that can be folded.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number}",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "toggleFoldAtBufferRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4902",
          "visibility": "Extended",
          "summary": "Fold the given buffer row if it isn't currently folded, and unfold\nit otherwise.",
          "description": "Fold the given buffer row if it isn't currently folded, and unfold\nit otherwise."
        },
        {
          "name": "isFoldedAtCursorRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4913",
          "visibility": "Extended",
          "summary": "Determine whether the most recently added cursor's row is folded.",
          "description": "Determine whether the most recently added cursor's row is folded.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isFoldedAtBufferRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4922",
          "visibility": "Extended",
          "summary": "Determine whether the given row in buffer coordinates is folded.",
          "description": "Determine whether the given row in buffer coordinates is folded.",
          "arguments": [
            {
              "name": "bufferRow",
              "description": "A {Number}",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isFoldedAtScreenRow",
          "sectionName": "Folds",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L4935",
          "visibility": "Extended",
          "summary": "Determine whether the given row in screen coordinates is folded.",
          "description": "Determine whether the given row in screen coordinates is folded.",
          "arguments": [
            {
              "name": "screenRow",
              "description": "A {Number}",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "addGutter",
          "sectionName": "Gutters",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5006",
          "visibility": "Essential",
          "summary": "Add a custom {Gutter}.",
          "description": "Add a custom {Gutter}.",
          "arguments": [
            {
              "children": [
                {
                  "name": "name",
                  "description": "(required) A unique {String} to identify this gutter.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "priority",
                  "description": "A {Number} that determines stacking order between   gutters. Lower priority items are forced closer to the edges of the   window. (default: -100)",
                  "type": "Number",
                  "isOptional": true
                },
                {
                  "name": "visible",
                  "description": "{Boolean} specifying whether the gutter is visible   initially after being created. (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "type",
                  "description": "{String} specifying the type of gutter to create. `'decorated'`   gutters are useful as a destination for decorations created with {Gutter::decorateMarker}.   `'line-number'` gutters.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "class",
                  "description": "{String} added to the CSS classnames of the gutter's root DOM element.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "name": "bufferRow",
                          "description": "{Number} indicating the zero-indexed buffer index of this line.",
                          "type": "Number",
                          "isOptional": false
                        },
                        {
                          "name": "screenRow",
                          "description": "{Number} indicating the zero-indexed screen index.",
                          "type": "Number",
                          "isOptional": false
                        },
                        {
                          "name": "foldable",
                          "description": "{Boolean} that is `true` if a fold may be created here.",
                          "type": "Boolean",
                          "isOptional": false
                        },
                        {
                          "name": "softWrapped",
                          "description": "{Boolean} if this screen row is the soft-wrapped continuation of the same buffer row.",
                          "type": "Boolean",
                          "isOptional": false
                        },
                        {
                          "name": "maxDigits",
                          "description": "{Number} the maximum number of digits necessary to represent any known screen row.",
                          "type": "Number",
                          "isOptional": false
                        }
                      ],
                      "name": "lineData",
                      "description": "an {Object} containing information about each line to label.",
                      "type": "Object",
                      "isOptional": false
                    }
                  ],
                  "name": "labelFn",
                  "description": "{Function} called by a `'line-number'` gutter to generate the label for each line number   element. Should return a {String} that will be used to label the corresponding line.",
                  "type": "Function",
                  "isOptional": true
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "name": "bufferRow",
                          "description": "{Number} of the originating line element",
                          "type": "Number",
                          "isOptional": false
                        },
                        {
                          "name": "screenRow",
                          "description": "{Number}",
                          "type": "Number",
                          "isOptional": false
                        }
                      ],
                      "name": "lineData",
                      "description": "an {Object} containing information about the line that's being clicked.",
                      "type": "Object",
                      "isOptional": false
                    }
                  ],
                  "name": "onMouseDown",
                  "description": "{Function} to be called when a mousedown event is received by a line-number    element within this `type: 'line-number'` {Gutter}. If unspecified, the default behavior is to select the    clicked buffer row.",
                  "type": "Function",
                  "isOptional": true
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "name": "bufferRow",
                          "description": "{Number} of the originating line element",
                          "type": "Number",
                          "isOptional": false
                        },
                        {
                          "name": "screenRow",
                          "description": "{Number}",
                          "type": "Number",
                          "isOptional": false
                        }
                      ],
                      "name": "lineData",
                      "description": "an {Object} containing information about the line that's being clicked.",
                      "type": "Object",
                      "isOptional": false
                    }
                  ],
                  "name": "onMouseMove",
                  "description": "{Function} to be called when a mousemove event occurs on a line-number element within    within this `type: 'line-number'` {Gutter}.",
                  "type": "Function",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An {Object} with the following fields:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Gutter",
              "description": "Returns the newly-created {Gutter}."
            }
          ]
        },
        {
          "name": "getGutters",
          "sectionName": "Gutters",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5013",
          "visibility": "Essential",
          "summary": "Get this editor's gutters.",
          "description": "Get this editor's gutters.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Gutter}s."
            }
          ]
        },
        {
          "name": "gutterWithName",
          "sectionName": "Gutters",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5024",
          "visibility": "Essential",
          "summary": "Get the gutter with the given name.",
          "description": "Get the gutter with the given name.",
          "returnValues": [
            {
              "type": "Gutter",
              "description": "Returns a {Gutter}, or `null` if no gutter exists for the given name."
            }
          ]
        },
        {
          "name": "scrollToCursorPosition",
          "sectionName": "Scrolling the TextEditor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5037",
          "visibility": "Essential",
          "summary": "Scroll the editor to reveal the most recently added cursor if it is\noff-screen.",
          "description": "Scroll the editor to reveal the most recently added cursor if it is\noff-screen.",
          "arguments": [
            {
              "children": [
                {
                  "name": "center",
                  "description": "Center the editor around the cursor if possible. (default: true)",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "scrollToBufferPosition",
          "sectionName": "Scrolling the TextEditor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5049",
          "visibility": "Essential",
          "summary": "Scrolls the editor to the given buffer position.",
          "description": "Scrolls the editor to the given buffer position.",
          "arguments": [
            {
              "name": "bufferPosition",
              "description": "An object that represents a buffer position. It can be either an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}",
              "type": "Object",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "center",
                  "description": "Center the editor around the position if possible. (default: false)",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "scrollToScreenPosition",
          "sectionName": "Scrolling the TextEditor",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5062",
          "visibility": "Essential",
          "summary": "Scrolls the editor to the given screen position.",
          "description": "Scrolls the editor to the given screen position.",
          "arguments": [
            {
              "name": "screenPosition",
              "description": "An object that represents a screen position. It can be either  an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}",
              "type": "Object",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "center",
                  "description": "Center the editor around the position if possible. (default: false)",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getPlaceholderText",
          "sectionName": "TextEditor Rendering",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5260",
          "visibility": "Essential",
          "summary": "Retrieves the greyed out placeholder of a mini editor.",
          "description": "Retrieves the greyed out placeholder of a mini editor.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "setPlaceholderText",
          "sectionName": "TextEditor Rendering",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/text-editor.js#L5268",
          "visibility": "Essential",
          "summary": "Set the greyed out placeholder of a mini editor. Placeholder text\nwill be displayed when the editor has no content.",
          "description": "Set the greyed out placeholder of a mini editor. Placeholder text\nwill be displayed when the editor has no content.",
          "arguments": [
            {
              "name": "placeholderText",
              "description": "{String} text that is displayed when the editor has no content.",
              "type": "String",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "This class represents all essential editing state for a single\n{TextBuffer}, including cursor and selection positions, folds, and soft wraps.\nIf you're manipulating the state of an editor, use this class.",
      "description": "This class represents all essential editing state for a single\n{TextBuffer}, including cursor and selection positions, folds, and soft wraps.\nIf you're manipulating the state of an editor, use this class.\n\nA single {TextBuffer} can belong to multiple editors. For example, if the\nsame file is open in two different panes, Atom creates a separate editor for\neach pane. If the buffer is manipulated the changes are reflected in both\neditors, but each maintains its own cursor position, folded lines, etc.\n\n## Accessing TextEditor Instances\n\nThe easiest way to get hold of `TextEditor` objects is by registering a callback\nwith `::observeTextEditors` on the `atom.workspace` global. Your callback will\nthen be called with all current editor instances and also when any editor is\ncreated in the future.\n\n```js\natom.workspace.observeTextEditors(editor => {\n  editor.insertText('Hello World')\n})\n```\n\n## Buffer vs. Screen Coordinates\n\nBecause editors support folds and soft-wrapping, the lines on screen don't\nalways match the lines in the buffer. For example, a long line that soft wraps\ntwice renders as three lines on screen, but only represents one line in the\nbuffer. Similarly, if rows 5-10 are folded, then row 6 on screen corresponds\nto row 11 in the buffer.\n\nYour choice of coordinates systems will depend on what you're trying to\nachieve. For example, if you're writing a command that jumps the cursor up or\ndown by 10 lines, you'll want to use screen coordinates because the user\nprobably wants to skip lines *on screen*. However, if you're writing a package\nthat jumps between method definitions, you'll want to work in buffer\ncoordinates.\n\n**When in doubt, just default to buffer coordinates**, then experiment with\nsoft wraps and folds to ensure your code interacts with them correctly."
    },
    "ThemeManager": {
      "name": "ThemeManager",
      "superClass": null,
      "filename": "src/theme-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L13",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Accessing Loaded Themes",
          "description": ""
        },
        {
          "name": "Accessing Active Themes",
          "description": ""
        },
        {
          "name": "Managing Enabled Themes",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangeActiveThemes",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L64",
          "visibility": "Essential",
          "summary": "Invoke `callback` when style sheet changes associated with\nupdating the list of active themes have completed.",
          "description": "Invoke `callback` when style sheet changes associated with\nupdating the list of active themes have completed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getLoadedThemeNames",
          "sectionName": "Accessing Loaded Themes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L82",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s of all the loaded theme names."
            }
          ]
        },
        {
          "name": "getLoadedThemes",
          "sectionName": "Accessing Loaded Themes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L87",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of all the loaded themes."
            }
          ]
        },
        {
          "name": "getActiveThemeNames",
          "sectionName": "Accessing Active Themes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L98",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s of all the active theme names."
            }
          ]
        },
        {
          "name": "getActiveThemes",
          "sectionName": "Accessing Active Themes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L103",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of all the active themes."
            }
          ]
        },
        {
          "name": "getEnabledThemeNames",
          "sectionName": "Managing Enabled Themes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/theme-manager.js#L136",
          "visibility": "Public",
          "summary": "Get the enabled theme names from the config.",
          "description": "Get the enabled theme names from the config.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of theme names in the order that they should be activated."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Handles loading and activating available themes.",
      "description": "Handles loading and activating available themes.\n\nAn instance of this class is always available as the `atom.themes` global."
    },
    "TooltipManager": {
      "name": "TooltipManager",
      "superClass": null,
      "filename": "src/tooltip-manager.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/tooltip-manager.js#L47",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/tooltip-manager.js#L113",
          "visibility": "Essential",
          "summary": "Add a tooltip to the given element.",
          "description": "Add a tooltip to the given element.",
          "arguments": [
            {
              "name": "target",
              "description": "An `HTMLElement`",
              "type": null,
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "title",
                  "description": "A {String} or {Function} to use for the text in the tip. If a function is passed, `this` will be set to the `target` element. This option is mutually exclusive with the `item` option.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "html",
                  "description": "A {Boolean} affecting the interpretation of the `title` option. If `true` (the default), the `title` string will be interpreted as HTML. Otherwise it will be interpreted as plain text.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "item",
                  "description": "A view (object with an `.element` property) or a DOM element containing custom content for the tooltip. This option is mutually exclusive with the `title` option.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "class",
                  "description": "A {String} with a class to apply to the tooltip element to enable custom styling.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "placement",
                  "description": "A {String} or {Function} returning a string to indicate the position of the tooltip relative to `element`. Can be `'top'`, `'bottom'`, `'left'`, `'right'`, or `'auto'`. When `'auto'` is specified, it will dynamically reorient the tooltip. For example, if placement is `'auto left'`, the tooltip will display to the left when possible, otherwise it will display right. When a function is used to determine the placement, it is called with the tooltip DOM node as its first argument and the triggering element DOM node as its second. The `this` context is set to the tooltip instance.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "trigger",
                  "description": "A {String} indicating how the tooltip should be displayed. Choose from one of the following options:\n* `'hover'` Show the tooltip when the mouse hovers over the element.\n  This is the default.\n* `'click'` Show the tooltip when the element is clicked. The tooltip\n  will be hidden after clicking the element again or anywhere else\n  outside of the tooltip itself.\n* `'focus'` Show the tooltip when the element is focused.\n* `'manual'` Show the tooltip immediately and only hide it when the\n  returned disposable is disposed.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "delay",
                  "description": "An object specifying the show and hide delay in milliseconds. Defaults to `{show: 1000, hide: 100}` if the `trigger` is `hover` and otherwise defaults to `0` for both values.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "keyBindingCommand",
                  "description": "A {String} containing a command name. If you specify this option and a key binding exists that matches the command, it will be appended to the title or rendered alone if no title is specified.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "keyBindingTarget",
                  "description": "An `HTMLElement` on which to look up the key binding. If this option is not supplied, the first of all matching key bindings for the given command will be rendered.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An object with one or more of the following options:",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\ntooltip."
            }
          ]
        },
        {
          "name": "findTooltips",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/tooltip-manager.js#L188",
          "visibility": "Extended",
          "summary": "Find the tooltips that have been applied to the given element.",
          "description": "Find the tooltips that have been applied to the given element.",
          "arguments": [
            {
              "name": "target",
              "description": "The `HTMLElement` to find tooltips on.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of `Tooltip` objects that match the `target`."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Associates tooltips with HTML elements.",
      "description": "Associates tooltips with HTML elements.\n\nYou can get the `TooltipManager` via `atom.tooltips`.",
      "examples": [
        {
          "description": "The essence of displaying a tooltip",
          "lang": "js",
          "code": "// display it\nconst disposable = atom.tooltips.add(div, {title: 'This is a tooltip'})\n\n// remove it\ndisposable.dispose()",
          "raw": "```js\n// display it\nconst disposable = atom.tooltips.add(div, {title: 'This is a tooltip'})\n\n// remove it\ndisposable.dispose()\n```"
        },
        {
          "description": "In practice there are usually multiple tooltips. So we add them to a\nCompositeDisposable",
          "lang": "js",
          "code": "const {CompositeDisposable} = require('atom')\nconst subscriptions = new CompositeDisposable()\n\nconst div1 = document.createElement('div')\nconst div2 = document.createElement('div')\nsubscriptions.add(atom.tooltips.add(div1, {title: 'This is a tooltip'}))\nsubscriptions.add(atom.tooltips.add(div2, {title: 'Another tooltip'}))\n\n// remove them all\nsubscriptions.dispose()",
          "raw": "```js\nconst {CompositeDisposable} = require('atom')\nconst subscriptions = new CompositeDisposable()\n\nconst div1 = document.createElement('div')\nconst div2 = document.createElement('div')\nsubscriptions.add(atom.tooltips.add(div1, {title: 'This is a tooltip'}))\nsubscriptions.add(atom.tooltips.add(div2, {title: 'Another tooltip'}))\n\n// remove them all\nsubscriptions.dispose()\n```"
        },
        {
          "description": "You can display a key binding in the tooltip as well with the\n`keyBindingCommand` option.",
          "lang": "js",
          "code": "disposable = atom.tooltips.add(this.caseOptionButton, {\n  title: 'Match Case',\n  keyBindingCommand: 'find-and-replace:toggle-case-option',\n  keyBindingTarget: this.findEditor.element\n})",
          "raw": "```js\ndisposable = atom.tooltips.add(this.caseOptionButton, {\n  title: 'Match Case',\n  keyBindingCommand: 'find-and-replace:toggle-case-option',\n  keyBindingTarget: this.findEditor.element\n})\n```"
        }
      ]
    },
    "ViewRegistry": {
      "name": "ViewRegistry",
      "superClass": null,
      "filename": "src/view-registry.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/view-registry.js#L25",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "addViewProvider",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/view-registry.js#L68",
          "visibility": "Essential",
          "summary": "Add a provider that will be used to construct views in the\nworkspace's view layer based on model objects in its model layer.",
          "description": "Add a provider that will be used to construct views in the\nworkspace's view layer based on model objects in its model layer.",
          "arguments": [
            {
              "name": "modelConstructor",
              "description": "Constructor {Function} for your model. If a constructor is given, the `createView` function will only be used for model objects inheriting from that constructor. Otherwise, it will will be called for any object.",
              "type": "Function",
              "isOptional": true
            },
            {
              "name": "createView",
              "description": "Factory {Function} that is passed an instance of your model and must return a subclass of `HTMLElement` or `undefined`. If it returns `undefined`, then the registry will continue to search for other view providers.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "Text editors are divided into a model and a view layer, so when you interact\nwith methods like `atom.workspace.getActiveTextEditor()` you're only going\nto get the model object. We display text editors on screen by teaching the\nworkspace what view constructor it should use to represent them:",
              "lang": "coffee",
              "code": "atom.views.addViewProvider TextEditor, (textEditor) ->\n  textEditorElement = new TextEditorElement\n  textEditorElement.initialize(textEditor)\n  textEditorElement",
              "raw": "```coffee\natom.views.addViewProvider TextEditor, (textEditor) ->\n  textEditorElement = new TextEditorElement\n  textEditorElement.initialize(textEditor)\n  textEditorElement\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\nadded provider."
            }
          ]
        },
        {
          "name": "getView",
          "sectionName": null,
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/view-registry.js#L126",
          "visibility": "Essential",
          "summary": "Get the view associated with an object in the workspace.",
          "description": "Get the view associated with an object in the workspace.\n\nIf you're just *using* the workspace, you shouldn't need to access the view\nlayer, but view layer access may be necessary if you want to perform DOM\nmanipulation that isn't supported via the model API.\n\n## View Resolution Algorithm\n\nThe view associated with the object is resolved using the following\nsequence\n\n1. Is the object an instance of `HTMLElement`? If true, return the object.\n1. Does the object have a method named `getElement` that returns an\n  instance of `HTMLElement`? If true, return that value.\n1. Does the object have a property named `element` with a value which is\n  an instance of `HTMLElement`? If true, return the property value.\n1. Is the object a jQuery object, indicated by the presence of a `jquery`\n  property? If true, return the root DOM element (i.e. `object[0]`).\n1. Has a view provider been registered for the object? If true, use the\n  provider to create a view associated with the object, and return the\n  view.\n\nIf no associated view is returned by the sequence an error is thrown.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a DOM element."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "`ViewRegistry` handles the association between model and view\ntypes in Atom. We call this association a View Provider. As in, for a given\nmodel, this class can provide a view via {::getView}, as long as the\nmodel/view association was registered via {::addViewProvider}",
      "description": "`ViewRegistry` handles the association between model and view\ntypes in Atom. We call this association a View Provider. As in, for a given\nmodel, this class can provide a view via {::getView}, as long as the\nmodel/view association was registered via {::addViewProvider}\n\nIf you're adding your own kind of pane item, a good strategy for all but the\nsimplest items is to separate the model and the view. The model handles\napplication logic and is the primary point of API interaction. The view\njust handles presentation.\n\nNote: Models can be any object, but must implement a `getTitle()` function\nif they are to be displayed in a {Pane}\n\nView providers inform the workspace how your model objects should be\npresented in the DOM. A view provider must always return a DOM node, which\nmakes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)\nan ideal tool for implementing views in Atom.\n\nYou can access the `ViewRegistry` object via `atom.views`."
    },
    "Workspace": {
      "name": "Workspace",
      "superClass": "Model",
      "filename": "src/workspace.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L176",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Opening",
          "description": ""
        },
        {
          "name": "Pane Items",
          "description": ""
        },
        {
          "name": "Panes",
          "description": ""
        },
        {
          "name": "Pane Locations",
          "description": ""
        },
        {
          "name": "Panels",
          "description": "Panels are used to display UI related to an editor window. They are placed at one of the four\n  edges of the window: left, right, top or bottom. If there are multiple panels on the same window\n  edge they are stacked in order of priority: higher priority is closer to the center, lower\n  priority towards the edge.\n\n  *Note:* If your panel changes its size throughout its lifetime, consider giving it a higher\n  priority, allowing fixed size panels to be closer to the edge. This allows control targets to\n  remain more static for easier targeting by users that employ mice or trackpads. (See\n  [atom/atom#4834](https://github.com/atom/atom/issues/4834) for discussion.)"
        },
        {
          "name": "Searching and Replacing",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "observeTextEditors",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L766",
          "visibility": "Essential",
          "summary": "Invoke the given callback with all current and future text\neditors in the workspace.",
          "description": "Invoke the given callback with all current and future text\neditors in the workspace.",
          "arguments": [
            {
              "children": [
                {
                  "name": "editor",
                  "description": "A {TextEditor} that is present in {::getTextEditors} at the time of subscription or that is added at some later time.",
                  "type": "TextEditor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future text editors.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observePaneItems",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L781",
          "visibility": "Essential",
          "summary": "Invoke the given callback with all current and future panes items\nin the workspace.",
          "description": "Invoke the given callback with all current and future panes items\nin the workspace.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "An item that is present in {::getPaneItems} at the time of  subscription or that is added at some later time.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future pane items.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L800",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the active pane item changes.",
          "description": "Invoke the given callback when the active pane item changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method. Consider\n{::onDidStopChangingActivePaneItem} to delay operations until after changes\nstop occurring.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidStopChangingActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L818",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the active pane item stops\nchanging.",
          "description": "Invoke the given callback when the active pane item stops\nchanging.\n\nObservers are called asynchronously 100ms after the last active pane item\nchange. Handling changes here rather than in the synchronous\n{::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly\nchanging or closing tabs and ensures critical UI feedback, like changing the\nhighlighted tab, gets priority over work that can be done asynchronously.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item stops changing.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActiveTextEditor",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L830",
          "visibility": "Essential",
          "summary": "Invoke the given callback when a text editor becomes the active\ntext editor and when there is no longer an active text editor.",
          "description": "Invoke the given callback when a text editor becomes the active\ntext editor and when there is no longer an active text editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "editor",
                  "description": "The active {TextEditor} or undefined if there is no longer an  active text editor.",
                  "type": "TextEditor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active text editor changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L841",
          "visibility": "Essential",
          "summary": "Invoke the given callback with the current active pane item and\nwith all future active pane items in the workspace.",
          "description": "Invoke the given callback with the current active pane item and\nwith all future active pane items in the workspace.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The current active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActiveTextEditor",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L855",
          "visibility": "Essential",
          "summary": "Invoke the given callback with the current active text editor\n(if any), with all future active text editors, and when there is no longer\nan active text editor.",
          "description": "Invoke the given callback with the current active text editor\n(if any), with all future active text editors, and when there is no longer\nan active text editor.",
          "arguments": [
            {
              "children": [
                {
                  "name": "editor",
                  "description": "The active {TextEditor} or undefined if there is not an  active text editor.",
                  "type": "TextEditor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active text editor changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidOpen",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L873",
          "visibility": "Essential",
          "summary": "Invoke the given callback whenever an item is opened. Unlike\n{::onDidAddPaneItem}, observers will be notified for items that are already\npresent in the workspace when they are reopened.",
          "description": "Invoke the given callback whenever an item is opened. Unlike\n{::onDidAddPaneItem}, observers will be notified for items that are already\npresent in the workspace when they are reopened.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "uri",
                      "description": "{String} representing the opened URI. Could be `undefined`.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "item",
                      "description": "The opened item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "The pane in which the item was opened.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "The index of the opened item on its pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called whenever an item is opened.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L884",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane is added to the workspace.",
          "description": "Invoke the given callback when a pane is added to the workspace.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The added pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L900",
          "visibility": "Extended",
          "summary": "Invoke the given callback before a pane is destroyed in the\nworkspace.",
          "description": "Invoke the given callback before a pane is destroyed in the\nworkspace.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The pane to be destroyed.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before panes are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroyPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L916",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane is destroyed in the\nworkspace.",
          "description": "Invoke the given callback when a pane is destroyed in the\nworkspace.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The destroyed pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observePanes",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L932",
          "visibility": "Extended",
          "summary": "Invoke the given callback with all current and future panes in the\nworkspace.",
          "description": "Invoke the given callback with all current and future panes in the\nworkspace.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is present in {::getPanes} at the time of  subscription or that is added at some later time.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future panes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActivePane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L946",
          "visibility": "Extended",
          "summary": "Invoke the given callback when the active pane changes.",
          "description": "Invoke the given callback when the active pane changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is the current return value of {::getActivePane}.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActivePane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L958",
          "visibility": "Extended",
          "summary": "Invoke the given callback with the current active pane and when\nthe active pane changes.",
          "description": "Invoke the given callback with the current active pane and when\nthe active pane changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is the current return value of {::getActivePane}.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with the current and future active# panes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L973",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is added to the\nworkspace.",
          "description": "Invoke the given callback when a pane item is added to the\nworkspace.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The added pane item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the added item.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the added item in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when pane items are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L993",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.",
          "description": "Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The item to be destroyed.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the item to be destroyed.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the item to be destroyed in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before pane items are destroyed. If this function returns a {Promise}, then the item will not be destroyed until the promise resolves.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroyPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1011",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is destroyed.",
          "description": "Invoke the given callback when a pane item is destroyed.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The destroyed item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the destroyed item.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the destroyed item in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when pane items are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddTextEditor",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1030",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a text editor is added to the\nworkspace.",
          "description": "Invoke the given callback when a text editor is added to the\nworkspace.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "textEditor",
                      "description": "{TextEditor} that was added.",
                      "type": "TextEditor",
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the added text editor.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the added text editor in its  pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "open",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1077",
          "visibility": "Essential",
          "summary": "Opens the given URI in Atom asynchronously.\nIf the URI is already open, the existing item for that URI will be\nactivated. If no URI is given, or no registered opener can open\nthe URI, a new empty {TextEditor} will be created.",
          "description": "Opens the given URI in Atom asynchronously.\nIf the URI is already open, the existing item for that URI will be\nactivated. If no URI is given, or no registered opener can open\nthe URI, a new empty {TextEditor} will be created.",
          "arguments": [
            {
              "name": "uri",
              "description": "A {String} containing a URI.",
              "type": "String",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "initialLine",
                  "description": "A {Number} indicating which row to move the cursor to initially. Defaults to `0`.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "initialColumn",
                  "description": "A {Number} indicating which column to move the cursor to initially. Defaults to `0`.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "split",
                  "description": "Either 'left', 'right', 'up' or 'down'. If 'left', the item will be opened in leftmost pane of the current active pane's row. If 'right', the item will be opened in the rightmost pane of the current active pane's row. If only one pane exists in the row, a new pane will be created. If 'up', the item will be opened in topmost pane of the current active pane's column. If 'down', the item will be opened in the bottommost pane of the current active pane's column. If only one pane exists in the column, a new pane will be created.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "activatePane",
                  "description": "A {Boolean} indicating whether to call {Pane::activate} on containing pane. Defaults to `true`.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "activateItem",
                  "description": "A {Boolean} indicating whether to call {Pane::activateItem} on containing pane. Defaults to `true`.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "pending",
                  "description": "A {Boolean} indicating whether or not the item should be opened in a pending state. Existing pending items in a pane are replaced with new pending items when they are opened.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "searchAllPanes",
                  "description": "A {Boolean}. If `true`, the workspace will attempt to activate an existing item for the given URI on any pane. If `false`, only the active pane will be searched for an existing item for the same URI. Defaults to `false`.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "location",
                  "description": "A {String} containing the name of the location in which this item should be opened (one of \"left\", \"right\", \"bottom\", or \"center\"). If omitted, Atom will fall back to the last location in which a user has placed an item with the same URI or, if this is a new URI, the default location specified by the item. NOTE: This option should almost always be omitted to honor user preference.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves to the {TextEditor} for the file URI."
            }
          ]
        },
        {
          "name": "hide",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1257",
          "visibility": "Essential",
          "summary": "Search the workspace for items matching the given URI and hide them.",
          "description": "Search the workspace for items matching the given URI and hide them.",
          "arguments": [
            {
              "name": "itemOrURI",
              "description": "The item to hide or a {String} containing the URI of the item to hide.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether any items were found (and hidden)."
            }
          ]
        },
        {
          "name": "toggle",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1294",
          "visibility": "Essential",
          "summary": "Search the workspace for items matching the given URI. If any are found, hide them.\nOtherwise, open the URL.",
          "description": "Search the workspace for items matching the given URI. If any are found, hide them.\nOtherwise, open the URL.",
          "arguments": [
            {
              "name": "itemOrURI",
              "description": "The item to toggle or a {String} containing the URI of the item to toggle.",
              "type": "String",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a Promise that resolves when the item is shown or hidden."
            }
          ]
        },
        {
          "name": "createItemForURI",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1362",
          "visibility": "Public",
          "summary": "Creates a new item that corresponds to the provided URI.",
          "description": "Creates a new item that corresponds to the provided URI.\n\nIf no URI is given, or no registered opener can open the URI, a new empty\n{TextEditor} will be created.",
          "arguments": [
            {
              "name": "uri",
              "description": "A {String} containing a URI.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves to the {TextEditor} (or other item) for the given URI."
            }
          ]
        },
        {
          "name": "isTextEditor",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1464",
          "visibility": "Public",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "object",
              "description": "An {Object} you want to perform the check against.",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} that is `true` if `object` is a `TextEditor`."
            }
          ]
        },
        {
          "name": "buildTextEditor",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1471",
          "visibility": "Extended",
          "summary": "Create a new text editor.",
          "description": "Create a new text editor.",
          "returnValues": [
            {
              "type": "TextEditor",
              "description": "Returns a {TextEditor}."
            }
          ]
        },
        {
          "name": "reopenItem",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1482",
          "visibility": "Public",
          "summary": "Asynchronously reopens the last-closed item's URI if it hasn't already been\nreopened.",
          "description": "Asynchronously reopens the last-closed item's URI if it hasn't already been\nreopened.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that is resolved when the item is opened"
            }
          ]
        },
        {
          "name": "addOpener",
          "sectionName": "Opening",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1524",
          "visibility": "Public",
          "summary": "Register an opener for a uri.",
          "description": "Register an opener for a uri.\n\nWhen a URI is opened via {Workspace::open}, Atom loops through its registered\nopener functions until one returns a value for the given uri.\nOpeners are expected to return an object that inherits from HTMLElement or\na model which has an associated view in the {ViewRegistry}.\nA {TextEditor} will be used if no opener returns a value.",
          "arguments": [
            {
              "name": "opener",
              "description": "A {Function} to be called when a path is being opened.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "coffee",
              "code": "atom.workspace.addOpener (uri) ->\n  if path.extname(uri) is '.toml'\n    return new TomlEditor(uri)",
              "raw": "```coffee\natom.workspace.addOpener (uri) ->\n  if path.extname(uri) is '.toml'\n    return new TomlEditor(uri)\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\nopener.\n\nNote that the opener will be called if and only if the URI is not already open\nin the current pane. The searchAllPanes flag expands the search from the\ncurrent pane to all panes. If you wish to open a view of a different type for\na file that is already open, consider changing the protocol of the URI. For\nexample, perhaps you wish to preview a rendered version of the file `/foo/bar/baz.quux`\nthat is already open in a text editor view. You could signal this by calling\n{Workspace::open} on the URI `quux-preview://foo/bar/baz.quux`. Then your opener\ncan check the protocol for quux-preview and only handle those URIs that match.\n\nTo defer your package's activation until a specific URL is opened, add a\n`workspaceOpeners` field to your `package.json` containing an array of URL\nstrings."
            }
          ]
        },
        {
          "name": "getPaneItems",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1542",
          "visibility": "Essential",
          "summary": "Get all pane items in the workspace.",
          "description": "Get all pane items in the workspace.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of items."
            }
          ]
        },
        {
          "name": "getActivePaneItem",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1551",
          "visibility": "Essential",
          "summary": "Get the active {Pane}'s active item.",
          "description": "Get the active {Pane}'s active item.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns a pane item {Object}."
            }
          ]
        },
        {
          "name": "getTextEditors",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1558",
          "visibility": "Essential",
          "summary": "Get all text editors in the workspace, if they are pane items.",
          "description": "Get all text editors in the workspace, if they are pane items.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {TextEditor}s."
            }
          ]
        },
        {
          "name": "getActiveTextEditor",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1566",
          "visibility": "Essential",
          "summary": "Get the workspace center's active item if it is a {TextEditor}.",
          "description": "Get the workspace center's active item if it is a {TextEditor}.",
          "returnValues": [
            {
              "type": "TextEditor",
              "description": "Returns a {TextEditor} or `undefined` if the workspace center's current\nactive item is not a {TextEditor}."
            }
          ]
        },
        {
          "name": "getActivePaneContainer",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1624",
          "visibility": "Extended",
          "summary": "Get the most recently focused pane container.",
          "description": "Get the most recently focused pane container.",
          "returnValues": [
            {
              "type": "Dock",
              "description": "Returns a {Dock} or the {WorkspaceCenter}."
            }
          ]
        },
        {
          "name": "getPanes",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1631",
          "visibility": "Extended",
          "summary": "Get all panes in the workspace.",
          "description": "Get all panes in the workspace.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Pane}s."
            }
          ]
        },
        {
          "name": "getActivePane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1646",
          "visibility": "Extended",
          "summary": "Get the active {Pane}.",
          "description": "Get the active {Pane}.",
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns a {Pane}."
            }
          ]
        },
        {
          "name": "activateNextPane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1651",
          "visibility": "Extended",
          "summary": "Make the next pane active.",
          "description": "Make the next pane active."
        },
        {
          "name": "activatePreviousPane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1656",
          "visibility": "Extended",
          "summary": "Make the previous pane active.",
          "description": "Make the previous pane active."
        },
        {
          "name": "paneContainerForURI",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1667",
          "visibility": "Extended",
          "summary": "Get the first pane container that contains an item with the given\nURI.",
          "description": "Get the first pane container that contains an item with the given\nURI.",
          "arguments": [
            {
              "name": "uri",
              "description": "{String} uri",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Dock",
              "description": "Returns a {Dock}, the {WorkspaceCenter}, or `undefined` if no item exists\nwith the given URI."
            }
          ]
        },
        {
          "name": "paneContainerForItem",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1679",
          "visibility": "Extended",
          "summary": "Get the first pane container that contains the given item.",
          "description": "Get the first pane container that contains the given item.",
          "arguments": [
            {
              "name": "item",
              "description": "the Item that the returned pane container must contain.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Dock",
              "description": "Returns a {Dock}, the {WorkspaceCenter}, or `undefined` if no item exists\nwith the given URI."
            }
          ]
        },
        {
          "name": "paneForURI",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1690",
          "visibility": "Extended",
          "summary": "Get the first {Pane} that contains an item with the given URI.",
          "description": "Get the first {Pane} that contains an item with the given URI.",
          "arguments": [
            {
              "name": "uri",
              "description": "{String} uri",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns a {Pane} or `undefined` if no item exists with the given URI."
            }
          ]
        },
        {
          "name": "paneForItem",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1704",
          "visibility": "Extended",
          "summary": "Get the {Pane} containing the given item.",
          "description": "Get the {Pane} containing the given item.",
          "arguments": [
            {
              "name": "item",
              "description": "the Item that the returned pane must contain.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns a {Pane} or `undefined` if no pane exists for the given item."
            }
          ]
        },
        {
          "name": "getCenter",
          "sectionName": "Pane Locations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1802",
          "visibility": "Essential",
          "summary": "Get the {WorkspaceCenter} at the center of the editor window.",
          "description": "Get the {WorkspaceCenter} at the center of the editor window."
        },
        {
          "name": "getLeftDock",
          "sectionName": "Pane Locations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1807",
          "visibility": "Essential",
          "summary": "Get the {Dock} to the left of the editor window.",
          "description": "Get the {Dock} to the left of the editor window."
        },
        {
          "name": "getRightDock",
          "sectionName": "Pane Locations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1812",
          "visibility": "Essential",
          "summary": "Get the {Dock} to the right of the editor window.",
          "description": "Get the {Dock} to the right of the editor window."
        },
        {
          "name": "getBottomDock",
          "sectionName": "Pane Locations",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1817",
          "visibility": "Essential",
          "summary": "Get the {Dock} below the editor window.",
          "description": "Get the {Dock} below the editor window."
        },
        {
          "name": "getBottomPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1852",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the panel items at the bottom of the editor window.",
          "description": "Get an {Array} of all the panel items at the bottom of the editor window."
        },
        {
          "name": "addBottomPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1868",
          "visibility": "Essential",
          "summary": "Adds a panel item to the bottom of the editor window.",
          "description": "Adds a panel item to the bottom of the editor window.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the latter. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "getLeftPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1873",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the panel items to the left of the editor window.",
          "description": "Get an {Array} of all the panel items to the left of the editor window."
        },
        {
          "name": "addLeftPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1889",
          "visibility": "Essential",
          "summary": "Adds a panel item to the left of the editor window.",
          "description": "Adds a panel item to the left of the editor window.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the latter. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "getRightPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1894",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the panel items to the right of the editor window.",
          "description": "Get an {Array} of all the panel items to the right of the editor window."
        },
        {
          "name": "addRightPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1910",
          "visibility": "Essential",
          "summary": "Adds a panel item to the right of the editor window.",
          "description": "Adds a panel item to the right of the editor window.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the latter. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "getTopPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1915",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the panel items at the top of the editor window.",
          "description": "Get an {Array} of all the panel items at the top of the editor window."
        },
        {
          "name": "addTopPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1931",
          "visibility": "Essential",
          "summary": "Adds a panel item to the top of the editor window above the tabs.",
          "description": "Adds a panel item to the top of the editor window above the tabs.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the latter. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "getHeaderPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1936",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the panel items in the header.",
          "description": "Get an {Array} of all the panel items in the header."
        },
        {
          "name": "addHeaderPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1952",
          "visibility": "Essential",
          "summary": "Adds a panel item to the header.",
          "description": "Adds a panel item to the header.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the latter. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "getFooterPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1957",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the panel items in the footer.",
          "description": "Get an {Array} of all the panel items in the footer."
        },
        {
          "name": "addFooterPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1973",
          "visibility": "Essential",
          "summary": "Adds a panel item to the footer.",
          "description": "Adds a panel item to the footer.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the latter. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "getModalPanels",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1978",
          "visibility": "Essential",
          "summary": "Get an {Array} of all the modal panel items",
          "description": "Get an {Array} of all the modal panel items"
        },
        {
          "name": "addModalPanel",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L1999",
          "visibility": "Essential",
          "summary": "Adds a panel item as a modal dialog.",
          "description": "Adds a panel item as a modal dialog.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "Your panel content. It can be a DOM element, a jQuery element, or a model with a view registered via {ViewRegistry::addViewProvider}. We recommend the model option. See {ViewRegistry::addViewProvider} for more information.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "visible",
                  "description": "{Boolean} false if you want the panel to initially be hidden (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "priority",
                  "description": "{Number} Determines stacking order. Lower priority items are forced closer to the edges of the window. (default: 100)",
                  "type": "Number",
                  "isOptional": true
                },
                {
                  "name": "autoFocus",
                  "description": "{Boolean|Element} true if you want modal focus managed for you by Atom. Atom will automatically focus on this element or your modal panel's first tabbable element when the modal opens and will restore the previously selected element when the modal closes. Atom will also automatically restrict user tab focus within your modal while it is open. (default: false)",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns a {Panel}"
            }
          ]
        },
        {
          "name": "panelForItem",
          "sectionName": "Panels",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L2007",
          "visibility": "Essential",
          "summary": "",
          "description": "\n\n",
          "arguments": [
            {
              "name": "item",
              "description": "Item the panel contains",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Panel",
              "description": "Returns the {Panel} associated with the given item."
            },
            {
              "type": null,
              "description": "Returns\n`null` when the item has no panel."
            }
          ]
        },
        {
          "name": "scan",
          "sectionName": "Searching and Replacing",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L2050",
          "visibility": "Public",
          "summary": "Performs a search across all files in the workspace.",
          "description": "Performs a search across all files in the workspace.",
          "arguments": [
            {
              "name": "regex",
              "description": "{RegExp} to search with.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "paths",
                  "description": "An {Array} of glob patterns to search within.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "onPathsSearched",
                  "description": "{Function} to be periodically called with number of paths searched.",
                  "type": "Function",
                  "isOptional": true
                },
                {
                  "name": "leadingContextLineCount",
                  "description": "{Number} default `0`; The number of lines  before the matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "trailingContextLineCount",
                  "description": "{Number} default `0`; The number of lines  after the matched line to include in the results object.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "name": "iterator",
              "description": "{Function} callback on each file found.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} with a `cancel()` method that will cancel all\nof the underlying searches that were started as part of this scan."
            }
          ]
        },
        {
          "name": "replace",
          "sectionName": "Searching and Replacing",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace.js#L2188",
          "visibility": "Public",
          "summary": "Performs a replace across all the specified files in the project.",
          "description": "Performs a replace across all the specified files in the project.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search with.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "replacementText",
              "description": "{String} to replace all matches of regex with.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "filePaths",
              "description": "An {Array} of file path strings to run the replace on.",
              "type": "Array",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "options",
                  "description": "{Object} with keys `filePath` and `replacements`.",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} callback on each file with replacements:",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Represents the state of the user interface for the entire window.\nAn instance of this class is available via the `atom.workspace` global.",
      "description": "Represents the state of the user interface for the entire window.\nAn instance of this class is available via the `atom.workspace` global.\n\nInteract with this object to open files, be notified of current and future\neditors, and manipulate panes. To add panels, use {Workspace::addTopPanel}\nand friends.\n\n## Workspace Items\n\nThe term \"item\" refers to anything that can be displayed\nin a pane within the workspace, either in the {WorkspaceCenter} or in one\nof the three {Dock}s. The workspace expects items to conform to the\nfollowing interface:\n\n### Required Methods\n\n#### `getTitle()`\n\nReturns a {String} containing the title of the item to display on its\nassociated tab.\n\n### Optional Methods\n\n#### `getElement()`\n\nIf your item already *is* a DOM element, you do not need to implement this\nmethod. Otherwise it should return the element you want to display to\nrepresent this item.\n\n#### `destroy()`\n\nDestroys the item. This will be called when the item is removed from its\nparent pane.\n\n#### `onDidDestroy(callback)`\n\nCalled by the workspace so it can be notified when the item is destroyed.\nMust return a {Disposable}.\n\n#### `serialize()`\n\nSerialize the state of the item. Must return an object that can be passed to\n`JSON.stringify`. The state should include a field called `deserializer`,\nwhich names a deserializer declared in your `package.json`. This method is\ninvoked on items when serializing the workspace so they can be restored to\nthe same location later.\n\n#### `getURI()`\n\nReturns the URI associated with the item.\n\n#### `getLongTitle()`\n\nReturns a {String} containing a longer version of the title to display in\nplaces like the window title or on tabs their short titles are ambiguous.\n\n#### `onDidChangeTitle(callback)`\n\nCalled by the workspace so it can be notified when the item's title changes.\nMust return a {Disposable}.\n\n#### `getIconName()`\n\nReturn a {String} with the name of an icon. If this method is defined and\nreturns a string, the item's tab element will be rendered with the `icon` and\n`icon-${iconName}` CSS classes.\n\n### `onDidChangeIcon(callback)`\n\nCalled by the workspace so it can be notified when the item's icon changes.\nMust return a {Disposable}.\n\n#### `getDefaultLocation()`\n\nTells the workspace where your item should be opened in absence of a user\noverride. Items can appear in the center or in a dock on the left, right, or\nbottom of the workspace.\n\nReturns a {String} with one of the following values: `'center'`, `'left'`,\n`'right'`, `'bottom'`. If this method is not defined, `'center'` is the\ndefault.\n\n#### `getAllowedLocations()`\n\nTells the workspace where this item can be moved. Returns an {Array} of one\nor more of the following values: `'center'`, `'left'`, `'right'`, or\n`'bottom'`.\n\n#### `isPermanentDockItem()`\n\nTells the workspace whether or not this item can be closed by the user by\nclicking an `x` on its tab. Use of this feature is discouraged unless there's\na very good reason not to allow users to close your item. Items can be made\npermanent *only* when they are contained in docks. Center pane items can\nalways be removed. Note that it is currently still possible to close dock\nitems via the `Close Pane` option in the context menu and via Atom APIs, so\nyou should still be prepared to handle your dock items being destroyed by the\nuser even if you implement this method.\n\n#### `save()`\n\nSaves the item.\n\n#### `saveAs(path)`\n\nSaves the item to the specified path.\n\n#### `getPath()`\n\nReturns the local path associated with this item. This is only used to set\nthe initial location of the \"save as\" dialog.\n\n#### `isModified()`\n\nReturns whether or not the item is modified to reflect modification in the\nUI.\n\n#### `onDidChangeModified()`\n\nCalled by the workspace so it can be notified when item's modified status\nchanges. Must return a {Disposable}.\n\n#### `copy()`\n\nCreate a copy of the item. If defined, the workspace will call this method to\nduplicate the item when splitting panes via certain split commands.\n\n#### `getPreferredHeight()`\n\nIf this item is displayed in the bottom {Dock}, called by the workspace when\ninitially displaying the dock to set its height. Once the dock has been\nresized by the user, their height will override this value.\n\nReturns a {Number}.\n\n#### `getPreferredWidth()`\n\nIf this item is displayed in the left or right {Dock}, called by the\nworkspace when initially displaying the dock to set its width. Once the dock\nhas been resized by the user, their width will override this value.\n\nReturns a {Number}.\n\n#### `onDidTerminatePendingState(callback)`\n\nIf the workspace is configured to use *pending pane items*, the workspace\nwill subscribe to this method to terminate the pending state of the item.\nMust return a {Disposable}.\n\n#### `shouldPromptToSave()`\n\nThis method indicates whether Atom should prompt the user to save this item\nwhen the user closes or reloads the window. Returns a boolean."
    },
    "WorkspaceCenter": {
      "name": "WorkspaceCenter",
      "superClass": null,
      "filename": "src/workspace-center.js",
      "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L7",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Pane Items",
          "description": ""
        },
        {
          "name": "Panes",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "observeTextEditors",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L60",
          "visibility": "Essential",
          "summary": "Invoke the given callback with all current and future text\neditors in the workspace center.",
          "description": "Invoke the given callback with all current and future text\neditors in the workspace center.",
          "arguments": [
            {
              "children": [
                {
                  "name": "editor",
                  "description": "An {TextEditor} that is present in {::getTextEditors} at the time of subscription or that is added at some later time.",
                  "type": "TextEditor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future text editors.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observePaneItems",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L75",
          "visibility": "Essential",
          "summary": "Invoke the given callback with all current and future panes items\nin the workspace center.",
          "description": "Invoke the given callback with all current and future panes items\nin the workspace center.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "An item that is present in {::getPaneItems} at the time of  subscription or that is added at some later time.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future pane items.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L90",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the active pane item changes.",
          "description": "Invoke the given callback when the active pane item changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method. Consider\n{::onDidStopChangingActivePaneItem} to delay operations until after changes\nstop occurring.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidStopChangingActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L108",
          "visibility": "Essential",
          "summary": "Invoke the given callback when the active pane item stops\nchanging.",
          "description": "Invoke the given callback when the active pane item stops\nchanging.\n\nObservers are called asynchronously 100ms after the last active pane item\nchange. Handling changes here rather than in the synchronous\n{::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly\nchanging or closing tabs and ensures critical UI feedback, like changing the\nhighlighted tab, gets priority over work that can be done asynchronously.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item stopts changing.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActivePaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L119",
          "visibility": "Essential",
          "summary": "Invoke the given callback with the current active pane item and\nwith all future active pane items in the workspace center.",
          "description": "Invoke the given callback with the current active pane item and\nwith all future active pane items in the workspace center.",
          "arguments": [
            {
              "children": [
                {
                  "name": "item",
                  "description": "The current active pane item.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane item changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L131",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane is added to the workspace\ncenter.",
          "description": "Invoke the given callback when a pane is added to the workspace\ncenter.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The added pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L143",
          "visibility": "Extended",
          "summary": "Invoke the given callback before a pane is destroyed in the\nworkspace center.",
          "description": "Invoke the given callback before a pane is destroyed in the\nworkspace center.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The pane to be destroyed.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before panes are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroyPane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L155",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane is destroyed in the\nworkspace center.",
          "description": "Invoke the given callback when a pane is destroyed in the\nworkspace center.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "pane",
                      "description": "The destroyed pane.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observePanes",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L167",
          "visibility": "Extended",
          "summary": "Invoke the given callback with all current and future panes in the\nworkspace center.",
          "description": "Invoke the given callback with all current and future panes in the\nworkspace center.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is present in {::getPanes} at the time of  subscription or that is added at some later time.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future panes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeActivePane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L177",
          "visibility": "Extended",
          "summary": "Invoke the given callback when the active pane changes.",
          "description": "Invoke the given callback when the active pane changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is the current return value of {::getActivePane}.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the active pane changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeActivePane",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L189",
          "visibility": "Extended",
          "summary": "Invoke the given callback with the current active pane and when\nthe active pane changes.",
          "description": "Invoke the given callback with the current active pane and when\nthe active pane changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "pane",
                  "description": "A {Pane} that is the current return value of {::getActivePane}.",
                  "type": "Pane",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with the current and future active# panes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L203",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is added to the\nworkspace center.",
          "description": "Invoke the given callback when a pane item is added to the\nworkspace center.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The added pane item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the added item.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the added item in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when pane items are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillDestroyPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L218",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.",
          "description": "Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The item to be destroyed.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the item to be destroyed.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the item to be destroyed in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called before pane items are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroyPaneItem",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L232",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a pane item is destroyed.",
          "description": "Invoke the given callback when a pane item is destroyed.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "item",
                      "description": "The destroyed item.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the destroyed item.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the destroyed item in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when pane items are destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidAddTextEditor",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L247",
          "visibility": "Extended",
          "summary": "Invoke the given callback when a text editor is added to the\nworkspace center.",
          "description": "Invoke the given callback when a text editor is added to the\nworkspace center.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "textEditor",
                      "description": "{TextEditor} that was added.",
                      "type": "TextEditor",
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the added text editor.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the added text editor in its  pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when panes are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getPaneItems",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L262",
          "visibility": "Essential",
          "summary": "Get all pane items in the workspace center.",
          "description": "Get all pane items in the workspace center.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of items."
            }
          ]
        },
        {
          "name": "getActivePaneItem",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L269",
          "visibility": "Essential",
          "summary": "Get the active {Pane}'s active item.",
          "description": "Get the active {Pane}'s active item.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an pane item {Object}."
            }
          ]
        },
        {
          "name": "getTextEditors",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L276",
          "visibility": "Essential",
          "summary": "Get all text editors in the workspace center.",
          "description": "Get all text editors in the workspace center.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {TextEditor}s."
            }
          ]
        },
        {
          "name": "getActiveTextEditor",
          "sectionName": "Pane Items",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L284",
          "visibility": "Essential",
          "summary": "Get the active item if it is an {TextEditor}.",
          "description": "Get the active item if it is an {TextEditor}.",
          "returnValues": [
            {
              "type": "TextEditor",
              "description": "Returns an {TextEditor} or `undefined` if the current active item is not an\n{TextEditor}."
            }
          ]
        },
        {
          "name": "getPanes",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L307",
          "visibility": "Extended",
          "summary": "Get all panes in the workspace center.",
          "description": "Get all panes in the workspace center.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Pane}s."
            }
          ]
        },
        {
          "name": "getActivePane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L314",
          "visibility": "Extended",
          "summary": "Get the active {Pane}.",
          "description": "Get the active {Pane}.",
          "returnValues": [
            {
              "type": "Pane",
              "description": "Returns a {Pane}."
            }
          ]
        },
        {
          "name": "activateNextPane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L319",
          "visibility": "Extended",
          "summary": "Make the next pane active.",
          "description": "Make the next pane active."
        },
        {
          "name": "activatePreviousPane",
          "sectionName": "Panes",
          "srcUrl": "https://github.com/atom/atom/blob/v1.59.0/src/workspace-center.js#L324",
          "visibility": "Extended",
          "summary": "Make the previous pane active.",
          "description": "Make the previous pane active."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Represents the workspace at the center of the entire window.",
      "description": "Represents the workspace at the center of the entire window."
    }
  }
}